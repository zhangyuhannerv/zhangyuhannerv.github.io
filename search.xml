<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker相关命令</title>
      <link href="/posts/13749.html"/>
      <url>/posts/13749.html</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-Compose-命令大全"><a href="#Docker-Compose-命令大全" class="headerlink" title="Docker Compose 命令大全"></a>Docker Compose 命令大全</h2><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker-compose up</code></td><td>创建并启动所有服务（前台运行）</td></tr><tr><td><code>docker-compose up -d</code></td><td>后台启动服务</td></tr><tr><td><code>docker-compose down</code></td><td>停止并移除容器、网络、卷</td></tr><tr><td><code>docker-compose ps</code></td><td>查看服务运行状态</td></tr><tr><td><code>docker-compose logs</code></td><td>查看所有服务日志</td></tr><tr><td><code>docker-compose logs -f &lt;service&gt;</code></td><td>实时追踪指定服务日志</td></tr></tbody></table></div><h3 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h3><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker-compose start &lt;service&gt;</code></td><td>启动已存在的服务容器</td></tr><tr><td><code>docker-compose stop &lt;service&gt;</code></td><td>停止服务容器</td></tr><tr><td><code>docker-compose restart &lt;service&gt;</code></td><td>重启服务</td></tr><tr><td><code>docker-compose pause/unpause &lt;service&gt;</code></td><td>暂停/恢复服务</td></tr><tr><td><code>docker-compose stats</code></td><td>查看服务资源使用</td></tr></tbody></table></div><h3 id="开发调试"><a href="#开发调试" class="headerlink" title="开发调试"></a>开发调试</h3><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker-compose build</code></td><td>重建所有服务的镜像</td></tr><tr><td><code>docker-compose build --no-cache &lt;service&gt;</code></td><td>不带缓存构建指定服务</td></tr><tr><td><code>docker-compose exec &lt;service&gt; &lt;command&gt;</code></td><td>在运行中的容器执行命令<br><code>例：docker-compose exec app bash</code></td></tr><tr><td><code>docker-compose run --rm &lt;service&gt; &lt;command&gt;</code></td><td>一次性运行服务命令并自动清理</td></tr><tr><td><code>docker-compose up -d --build --force-recreate</code></td><td>强制重建服务（开发常用）</td></tr></tbody></table></div><h3 id="配置检查"><a href="#配置检查" class="headerlink" title="配置检查"></a>配置检查</h3><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker-compose config</code></td><td>验证 compose 文件语法</td></tr><tr><td><code>docker-compose images</code></td><td>列出服务使用的镜像</td></tr><tr><td><code>docker-compose top</code></td><td>显示容器内运行的进程</td></tr><tr><td><code>docker-compose port &lt;service&gt; &lt;private-port&gt;</code></td><td>查看端口映射关系</td></tr></tbody></table></div><h3 id="高级操作"><a href="#高级操作" class="headerlink" title="高级操作"></a>高级操作</h3><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker-compose pull</code></td><td>拉取服务依赖的镜像</td></tr><tr><td><code>docker-compose push</code></td><td>推送服务镜像到仓库</td></tr><tr><td><code>docker-compose scale &lt;service&gt;=&lt;num&gt;</code></td><td>扩展服务实例数量</td></tr><tr><td><code>docker-compose events</code></td><td>实时查看容器事件</td></tr></tbody></table></div><h3 id="资源清理"><a href="#资源清理" class="headerlink" title="资源清理"></a>资源清理</h3><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker-compose down -v</code></td><td>同时删除数据卷</td></tr><tr><td><code>docker-compose down --rmi all</code></td><td>同时删除所有镜像</td></tr><tr><td><code>docker-compose down --remove-orphans</code></td><td>删除未在配置中定义的容器</td></tr></tbody></table></div><h3 id="多环境控制"><a href="#多环境控制" class="headerlink" title="多环境控制"></a>多环境控制</h3><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker-compose -f docker-compose.prod.yml up</code></td><td>指定配置文件启动</td></tr><tr><td><code>docker-compose --env-file .env.prod up</code></td><td>指定环境变量文件</td></tr></tbody></table></div><h2 id="实用组合命令"><a href="#实用组合命令" class="headerlink" title="实用组合命令"></a>实用组合命令</h2>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端自定义下载功能</title>
      <link href="/posts/15793.html"/>
      <url>/posts/15793.html</url>
      
        <content type="html"><![CDATA[<h4 id="2025新版"><a href="#2025新版" class="headerlink" title="2025新版"></a>2025新版</h4><p>接口定义</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/exportWelfareCertificate&quot;)</span></span><br><span class="line"><span class="meta">@Operation(summary = &quot;导出福利报销凭证&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exportWelfareCertificate</span><span class="params">(<span class="meta">@RequestBody</span> OasCostSharingCertificateExportVo reqParam, HttpServletResponse response)</span> &#123;</span><br><span class="line">    List&lt;OasCostSharingCredentialExcelVo&gt; excelDataList = costSharingService.getWelfareCertificateData(reqParam);</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;福利费凭证_&quot;</span> + DateUtil.format(<span class="keyword">new</span> <span class="title class_">Date</span>(),<span class="string">&quot;YYYYMMdd_HHmmss&quot;</span>) + <span class="string">&quot;.xlsx&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">objectKey</span> <span class="operator">=</span> <span class="string">&quot;oas/costSharing/welfare/&quot;</span> + fileName;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">          <span class="type">InputStream</span> <span class="variable">templateStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(</span><br><span class="line">                  HttpUtil.downloadBytes(CostSharingConstant.certificateTemplateUrl))) &#123;</span><br><span class="line">        <span class="comment">// 先写内存</span></span><br><span class="line">        EasyExcel.write(bos).withTemplate(templateStream).sheet().doFill(excelDataList);</span><br><span class="line">        <span class="type">byte</span>[] bytes = bos.toByteArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里为了记录日志先上传到minio里了</span></span><br><span class="line">        url = MinioUtil.upload(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes), objectKey);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">encodedFileName</span> <span class="operator">=</span> URLEncoder.encode(fileName, StandardCharsets.UTF_8).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        <span class="comment">// 回写响应</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,</span><br><span class="line">                <span class="string">&quot;attachment; filename=\&quot;&quot;</span> + encodedFileName + <span class="string">&quot;\&quot;; &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;filename*=UTF-8&#x27;&#x27;&quot;</span> + encodedFileName);</span><br><span class="line">        response.setContentLength(bytes.length);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream()) &#123;</span><br><span class="line">            out.write(bytes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;oas：费用分摊，导出福利凭证失败&quot;</span>, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Map&lt;String, String&gt; params = Map.of(</span><br><span class="line">                    <span class="string">&quot;billType&quot;</span>, reqParam.getBillType(),</span><br><span class="line">                    <span class="string">&quot;selectedBill&quot;</span>, reqParam.getSelectedBill(),</span><br><span class="line">                    <span class="string">&quot;fsDeptInfoId&quot;</span>, reqParam.getFsDeptInfoId()</span><br><span class="line">            );</span><br><span class="line">            costSharingLogService.insertLog(CostSharingConstant.MODULE_TYPE.WELFARE, CostSharingConstant.EVENT_TYPE.EXPORT, fileName, url, JSON.toJSONString(params));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception logEx) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;记录导出日志失败&quot;</span>, logEx);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>api定义与使用<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">exportWelfareCertificateApi</span> = (<span class="params">params: &#123;</span></span><br><span class="line"><span class="params">  dataList;</span></span><br><span class="line"><span class="params">  totalAmountExcludingTax;</span></span><br><span class="line"><span class="params">  totalTax;</span></span><br><span class="line"><span class="params">  totalAmount;</span></span><br><span class="line"><span class="params">  billDate;</span></span><br><span class="line"><span class="params">  billType;</span></span><br><span class="line"><span class="params">  selectedBill;</span></span><br><span class="line"><span class="params">  fsDeptInfoId;</span></span><br><span class="line"><span class="params">&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> defHttp.<span class="title function_">post</span>(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="title class_">Api</span>.<span class="property">exportWelfareCertificate</span>,</span><br><span class="line">      params,</span><br><span class="line">      <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span>, <span class="comment">// 非常重要</span></span><br><span class="line">      <span class="attr">timeout</span>: <span class="number">1000000</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">isTransformResponse</span>: <span class="literal">false</span>, <span class="attr">isReturnNativeResponse</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> response = <span class="keyword">await</span> <span class="title function_">exportWelfareCertificateApi</span>(&#123;</span><br><span class="line">  <span class="attr">dataList</span>: allLeafHasPersonNumNodeArr,</span><br><span class="line">  <span class="attr">totalAmountExcludingTax</span>: costSharingItem.<span class="property">value</span>.<span class="property">totalAmountExcludingTax</span>,</span><br><span class="line">  <span class="attr">totalTax</span>: costSharingItem.<span class="property">value</span>.<span class="property">totalTax</span>,</span><br><span class="line">  <span class="attr">totalAmount</span>: costSharingItem.<span class="property">value</span>.<span class="property">totalAmount</span>,</span><br><span class="line">  <span class="attr">billDate</span>: costSharingItem.<span class="property">value</span>.<span class="property">selectedInvoice</span>[<span class="number">0</span>].<span class="property">billDate</span>,</span><br><span class="line">  <span class="attr">billType</span>: billType.<span class="property">value</span>,</span><br><span class="line">  <span class="attr">selectedBill</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(</span><br><span class="line">    costSharingItem.<span class="property">value</span>.<span class="property">selectedInvoice</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">deptId</span>: e.<span class="property">deptId</span>,</span><br><span class="line">      <span class="attr">deptName</span>: e.<span class="property">deptName</span>,</span><br><span class="line">      <span class="attr">billDate</span>: e.<span class="property">billDate</span>,</span><br><span class="line">      <span class="attr">djbh</span>: e.<span class="property">djbh</span>,</span><br><span class="line">      <span class="attr">pkJkbx</span>: e.<span class="property">pkJkbx</span>,</span><br><span class="line">      <span class="attr">djrq</span>: e.<span class="property">djrq</span>,</span><br><span class="line">      <span class="attr">zy</span>: e.<span class="property">zy</span>,</span><br><span class="line">      <span class="attr">total</span>: e.<span class="property">total</span>,</span><br><span class="line">    &#125;))</span><br><span class="line">  ),</span><br><span class="line">  <span class="attr">fsDeptInfoId</span>: costSharingItem.<span class="property">value</span>.<span class="property">fsDeptInfoId</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([response.<span class="property">data</span>], &#123; <span class="attr">type</span>: response.<span class="property">data</span>.<span class="property">type</span> || <span class="string">&#x27;application/octet-stream&#x27;</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> cd = response.<span class="property">headers</span>?.[<span class="string">&#x27;content-disposition&#x27;</span>];</span><br><span class="line"><span class="title function_">downloadBlobSmart</span>(blob, <span class="string">&#x27;福利费凭证.xlsx&#x27;</span>, cd);</span><br></pre></td></tr></table></figure></p><p>工具类</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 追加到文件末尾</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">global</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">Navigator</span> &#123;</span><br><span class="line">    msSaveOrOpenBlob?: <span class="function">(<span class="params">blob: Blob, defaultName?: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">boolean</span>;</span><br><span class="line">    msSaveBlob?: <span class="function">(<span class="params">blob: Blob, defaultName?: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">boolean</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">parseDispositionFileName</span>(<span class="params">header?: <span class="built_in">string</span> | <span class="literal">null</span></span>): <span class="built_in">string</span> | <span class="literal">null</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!header) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// RFC5987: filename*=UTF-8&#x27;&#x27;...</span></span><br><span class="line">  <span class="keyword">const</span> utf8Match = header.<span class="title function_">match</span>(<span class="regexp">/filename\*\s*=\s*([^&#x27;]*)&#x27;&#x27;([^;]+)/i</span>);</span><br><span class="line">  <span class="keyword">if</span> (utf8Match &amp;&amp; utf8Match[<span class="number">2</span>]) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(utf8Match[<span class="number">2</span>]);</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="comment">// ignore decode error and fallback to standard</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// filename=&quot;...&quot;</span></span><br><span class="line">  <span class="keyword">const</span> quoted = header.<span class="title function_">match</span>(<span class="regexp">/filename\s*=\s*&quot;([^&quot;]+)&quot;/i</span>);</span><br><span class="line">  <span class="keyword">if</span> (quoted &amp;&amp; quoted[<span class="number">1</span>]) &#123;</span><br><span class="line">    <span class="keyword">return</span> quoted[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// filename=...</span></span><br><span class="line">  <span class="keyword">const</span> unquoted = header.<span class="title function_">match</span>(<span class="regexp">/filename\s*=\s*([^;]+)/i</span>);</span><br><span class="line">  <span class="keyword">if</span> (unquoted &amp;&amp; unquoted[<span class="number">1</span>]) &#123;</span><br><span class="line">    <span class="keyword">return</span> unquoted[<span class="number">1</span>].<span class="title function_">trim</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sanitizeAndTruncateFileName</span>(<span class="params">inputName: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> illegalRe = <span class="regexp">/[&lt;&gt;:&quot;/\\|?*\x00-\x1F]/g</span>;</span><br><span class="line">  <span class="keyword">const</span> windowsTrailingRe = <span class="regexp">/[. ]+$/</span>;</span><br><span class="line">  <span class="keyword">let</span> name = inputName.<span class="title function_">replace</span>(illegalRe, <span class="string">&#x27;_&#x27;</span>).<span class="title function_">replace</span>(windowsTrailingRe, <span class="string">&#x27;_&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 保留扩展名，整体长度不超过 200</span></span><br><span class="line">  <span class="keyword">if</span> (name.<span class="property">length</span> &gt; <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> lastDot = name.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (lastDot &gt; <span class="number">0</span> &amp;&amp; lastDot &gt;= name.<span class="property">length</span> - <span class="number">15</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> ext = name.<span class="title function_">slice</span>(lastDot);</span><br><span class="line">      <span class="keyword">const</span> baseMax = <span class="number">200</span> - ext.<span class="property">length</span>;</span><br><span class="line">      name = name.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>, baseMax)) + ext;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      name = name.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> name || <span class="string">&#x27;download&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isIOSLike</span>(<span class="params"></span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> ua = navigator.<span class="property">userAgent</span>;</span><br><span class="line">  <span class="keyword">const</span> iOS = <span class="regexp">/iPad|iPhone|iPod/i</span>.<span class="title function_">test</span>(ua);</span><br><span class="line">  <span class="keyword">const</span> iPadOS = navigator.<span class="property">platform</span> === <span class="string">&#x27;MacIntel&#x27;</span> &amp;&amp; (navigator <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">maxTouchPoints</span> &gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> iOS || iPadOS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更稳健的 Blob 下载方法（支持 Content-Disposition 文件名、iOS/IE 兼容）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">downloadBlobSmart</span>(<span class="params">blob: Blob, defaultFileName: <span class="built_in">string</span>, contentDisposition?: <span class="built_in">string</span> | <span class="literal">null</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> parsedName = <span class="title function_">parseDispositionFileName</span>(contentDisposition);</span><br><span class="line">  <span class="keyword">const</span> fileName = <span class="title function_">sanitizeAndTruncateFileName</span>(parsedName || defaultFileName || <span class="string">&#x27;download&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// IE / 旧 Edge</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> navigator.<span class="property">msSaveOrOpenBlob</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    navigator.<span class="title function_">msSaveOrOpenBlob</span>(blob, fileName);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> navigator.<span class="property">msSaveBlob</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    navigator.<span class="title function_">msSaveBlob</span>(blob, fileName);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> supportsDownload = <span class="string">&#x27;download&#x27;</span> <span class="keyword">in</span> a;</span><br><span class="line">  <span class="keyword">const</span> iOS = <span class="title function_">isIOSLike</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 标准路径（非 iOS 且支持 download）</span></span><br><span class="line">  <span class="keyword">if</span> (!iOS &amp;&amp; supportsDownload) &#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">    a.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">    a.<span class="property">href</span> = url;</span><br><span class="line">    a.<span class="property">download</span> = fileName;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(a);</span><br><span class="line">    a.<span class="title function_">click</span>();</span><br><span class="line">    a.<span class="title function_">remove</span>();</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(url), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 兜底（iOS/Safari 等）：用 DataURL 打开，由用户保存</span></span><br><span class="line">  <span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">  reader.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> dataUrl = reader.<span class="property">result</span> <span class="keyword">as</span> <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">const</span> win = <span class="variable language_">window</span>.<span class="title function_">open</span>();</span><br><span class="line">    <span class="keyword">if</span> (win) &#123;</span><br><span class="line">      win.<span class="property">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;iframe src=&quot;&#x27;</span> + dataUrl + <span class="string">&#x27;&quot; style=&quot;display:none;&quot;&gt;&lt;/iframe&gt;&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = dataUrl;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  reader.<span class="title function_">readAsDataURL</span>(blob);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="返回整体文件流，通过浏览器转成二进制触发下载"><a href="#返回整体文件流，通过浏览器转成二进制触发下载" class="headerlink" title="返回整体文件流，通过浏览器转成二进制触发下载"></a>返回整体文件流，通过浏览器转成二进制触发下载</h4><p>该方式和传统的方式不同。</p><p>传统是读取服务器返回的流，这里是服务器流都已经整体返回了，然后才通过 js 转成文件触发下载</p><p>该方式只适合下载小文件（一般是小于 10M），如果文件过大，会导致浏览器占用内存过大，页面崩溃</p><p>以下载 excel 为例子</p><p>前台代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载数据导入模板</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">downloadImportTemplate</span>(<span class="params">url, fileName</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    url,</span><br><span class="line">    <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span></span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(<span class="keyword">new</span> <span class="title class_">Blob</span>([res]))</span><br><span class="line">    <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    link.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">    link.<span class="property">href</span> = url</span><br><span class="line">    link.<span class="title function_">setAttribute</span>(<span class="string">&#x27;download&#x27;</span>, fileName + <span class="string">&#x27;.xlsx&#x27;</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(link)</span><br><span class="line">    link.<span class="title function_">click</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他地方只需引入该方法，调用传入参数即可</span></span><br><span class="line"><span class="title function_">downloadImportTemplate</span>(<span class="string">&#x27;/downloadTemplate&#x27;</span>, <span class="string">&#x27;工程车辆导入模板&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/downloadTemplate&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downLoadEngineeringVehiclesImportTemplateFile</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    downLoadTemplate(<span class="string">&quot;工程车导入模板&quot;</span>, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downLoadTemplate</span><span class="params">(String name, HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;template/&quot;</span> + name + <span class="string">&quot;.xlsx&quot;</span>;</span><br><span class="line">    <span class="comment">// 创建缓冲区</span></span><br><span class="line">    <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];<span class="comment">// 缓冲区大小1k</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 重点就是获取输入流和输出流，还有设置请求头</span></span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResourceAsStream(path);</span><br><span class="line">         <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream()) &#123;</span><br><span class="line">        <span class="comment">// 设置头部信息</span></span><br><span class="line">        response.setHeader(</span><br><span class="line">            <span class="string">&quot;Content-disposition&quot;</span>,</span><br><span class="line">            <span class="string">&quot;attachment;filename=&quot;</span></span><br><span class="line">            + <span class="keyword">new</span> <span class="title class_">String</span>((name + <span class="string">&quot;.xlsx&quot;</span>).getBytes(StandardCharsets.UTF_8), StandardCharsets.ISO_8859_1));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环将输入流中的内容读取到缓冲区当中</span></span><br><span class="line">        <span class="keyword">while</span> ((len = in.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//输出缓冲区的内容到浏览器，实现文件下载</span></span><br><span class="line">            out.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> vue </category>
          
          <category> base </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> vue </tag>
            
            <tag> base </tag>
            
            <tag> 前端自定义下载功能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装postgresql</title>
      <link href="/posts/53211.html"/>
      <url>/posts/53211.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-建立docker-compose-yml"><a href="#1-建立docker-compose-yml" class="headerlink" title="1.建立docker-compose.yml"></a>1.建立docker-compose.yml</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">postgres:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="number">192.168</span><span class="number">.80</span><span class="number">.226</span><span class="string">:8080/template/postgres:15</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">POSTGRES_USER:</span> <span class="string">intco</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="string">Yingke@2025</span></span><br><span class="line">      <span class="attr">POSTGRES_DB:</span> <span class="string">intco_dev</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5432:5432&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/docker/postgresql/postgresql-data:/var/lib/postgresql/data</span></span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> postgresql </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表格自定义单元格</title>
      <link href="/posts/48333.html"/>
      <url>/posts/48333.html</url>
      
        <content type="html"><![CDATA[<p>ant-design-vue的a-table组件如何定义单元格内容，整理一下</p><p>版本: ant-design-vue4</p><h2 id="方式1：bodyCell插槽"><a href="#方式1：bodyCell插槽" class="headerlink" title="方式1：bodyCell插槽"></a>方式1：bodyCell插槽</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">a-table</span> <span class="attr">:columns</span>=<span class="string">&quot;columns&quot;</span> <span class="attr">:data-source</span>=<span class="string">&quot;data&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 使用 bodyCell 插槽自定义单元格内容 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">bodyCell</span>=<span class="string">&quot;&#123; text, record, index, column &#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;column.dataIndex === &#x27;value&#x27;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">:style</span>=<span class="string">&quot;text &gt; 0 ? &#123; color: &#x27;red&#x27; &#125; : &#123;&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;&#123; text &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">a-table</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> columns=[</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">title</span>: <span class="string">&#x27;Name&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">dataIndex</span>: <span class="string">&#x27;name&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">key</span>: <span class="string">&#x27;name&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">title</span>: <span class="string">&#x27;Value&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">dataIndex</span>: <span class="string">&#x27;value&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">key</span>: <span class="string">&#x27;value&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="方式2：为每列自定义插槽名称"><a href="#方式2：为每列自定义插槽名称" class="headerlink" title="方式2：为每列自定义插槽名称"></a>方式2：为每列自定义插槽名称</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">a-table</span> <span class="attr">:columns</span>=<span class="string">&quot;columns&quot;</span> <span class="attr">:data-source</span>=<span class="string">&quot;data&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 自定义 name 列的内容 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">name</span>=<span class="string">&quot;&#123; text, record &#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; text &#125;&#125; (自定义内容)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">a-table</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span>  <span class="attr">columns</span>: [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">title</span>: <span class="string">&#x27;Name&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">dataIndex</span>: <span class="string">&#x27;name&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">key</span>: <span class="string">&#x27;name&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">slots</span>: &#123; <span class="attr">customRender</span>: <span class="string">&#x27;name&#x27;</span> &#125;, <span class="comment">// 指定插槽名称</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">title</span>: <span class="string">&#x27;Age&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">dataIndex</span>: <span class="string">&#x27;age&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">key</span>: <span class="string">&#x27;age&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="方式3：使用-customRender-函数"><a href="#方式3：使用-customRender-函数" class="headerlink" title="方式3：使用 customRender 函数"></a>方式3：使用 customRender 函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>; <span class="comment">// 引入 h 函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> columns = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;编码&#x27;</span>,</span><br><span class="line">    <span class="attr">dataIndex</span>: <span class="string">&#x27;code&#x27;</span>,</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&#x27;code&#x27;</span>,</span><br><span class="line">    <span class="attr">customRender</span>: <span class="function">(<span class="params">&#123; text, record &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> value = record.<span class="property">code</span> <span class="comment">// value与text是一致的</span></span><br><span class="line">      <span class="keyword">const</span> formattedValue = <span class="title function_">formatDecimal</span>(text); <span class="comment">// 格式化值</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (record.<span class="property">type</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;剩余&#x27;</span>) === -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> formattedValue; <span class="comment">// 直接返回值</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (text &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">// 使用 h 函数创建带样式的 span</span></span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;span&#x27;</span>, &#123; <span class="attr">style</span>: &#123; <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125; &#125;, formattedValue);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> formattedValue;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">formatDecimal</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;number&#x27;</span> &amp;&amp; !<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(value)) &#123;</span><br><span class="line">    <span class="keyword">return</span> value.<span class="title function_">toFixed</span>(<span class="number">2</span>); <span class="comment">// 保留 2 位小数</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;,</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> vue </category>
          
          <category> ant-design-vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> vue </tag>
            
            <tag> ant-design-vue </tag>
            
            <tag> Table </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/posts/46132.html"/>
      <url>/posts/46132.html</url>
      
        <content type="html"><![CDATA[<p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><p>单例模式也是开发过程中使用的最多的一种设计模式，它只允许创建一个对象，因此节省内存，加快了对象访问速度，当对象需要被公用的场景就很适合使用单例模式；但是它不适用于变化的对象，如果同一类型的对象总是要在不同的用例场景发生变化，单例就会引起数据的错误，不能保存彼此的状态</p><p>需要注意的是:</p><ol><li><p>单例类只能有一个实例</p></li><li><p>单例类必须自己创建自己的唯一实例</p></li><li><p>单例类必须给所有其他对象提供这一实例</p></li></ol><h2 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h2><p>顾名思义就是特别懒，在类加载时不初始化，等到第一次被使用时才初始化。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">  <span class="comment">// 创建示例，注意此时没有new</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line">  <span class="comment">// 构造方法私有化，无法在外部创建实例</span></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 公有的静态方法，返回实例对象</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 判断是否存在实例，没有才实例化</span></span><br><span class="line">    <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (Singleton.class)&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">          instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这种写法用了两个判断，更重要的是它同步的是代码块而非方法，这样效率就会大大提升。</p><p>简单的解释一下为什么要用两个if判断：这是为了线程安全考虑，还是那个场景，对象还没实例化，两个线程A和B同时访问静态方法并同时运行到第一个if判断语句，这时线程A先进入同步代码块中实例化对象，结束之后线程B也进入同步代码块，如果没有第二个if判断语句，那么线程B也同样会执行实例化对象的操作了，但此时我们加上了第二个if判断，这样就不会重复执行对象的实例化操作，也就大大提升了代码效率。</p><h2 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h2><p>创建对象的时候就直接进行实例化操作</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">  <span class="comment">// 创建示例，注意此时没有new</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">  <span class="comment">// 构造方法私有化，无法在外部创建实例</span></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 公有的静态方法，返回实例对象</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这种写法，在类加载的时候就完成了实例化，避免了多线程的同步问题，适合调用较为频繁类，而且效率较高。</p><p>但是缺点也是很明显的，在类加载时就进行实例化，没有达到Lazy Loading (懒加载) 的效果，如果这个实例没用被使用，那么内存就浪费了。</p><p>单例模式的典型应用场景</p><ol><li><p>Windows的Task Manager（任务管理器）就是很典型的单例模式。在windows上是不能打开两个windows task manager的， 不信你自己试试看哦ヾ(•ω•`)o</p></li><li><p>Windows的Recycle Bin（回收站）也是典型的单例应用。在整个系统运行过程中，回收站一直维护着仅有的一个实例。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/posts/58640.html"/>
      <url>/posts/58640.html</url>
      
        <content type="html"><![CDATA[<h2 id="为什么讲策略模式"><a href="#为什么讲策略模式" class="headerlink" title="为什么讲策略模式"></a>为什么讲策略模式</h2><p>策略模式，应该是工作中比较常用的设计模式，调用方自己选择用哪一种策略完成对数据的操作，也就是“一个类的行为或其算法可以在运行时更改”我个人的理解是 将一些除了过程不同其他都一样的函数封装成策略，然后调用方自己去选择想让数据执行什么过程策略。常见的例子为根据用户分类推荐不同的排行榜（用户关注点不一样，推荐榜单就不一样）和单例模式一样，随着时间发展，我不再推荐经典策略模式，更推荐简单策略用枚举策略模式，复杂地用工厂策略模式。下面引入一个例子，我们的需求是：对一份股票数据列表，给出低价榜、高价榜、涨幅榜。这其中只有排序条件的区别，比较适合作为策略模式的例子</p><h2 id="经典策略模式"><a href="#经典策略模式" class="headerlink" title="经典策略模式"></a>经典策略模式</h2><p>数据DTO</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stock</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 股票交易代码  </span></span><br><span class="line">    <span class="keyword">private</span> String code;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 现价  </span></span><br><span class="line">    <span class="keyword">private</span> Double price;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 涨幅  </span></span><br><span class="line">    <span class="keyword">private</span> Double rise;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>抽象得到的策略接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Strategy</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 将股票列表排序  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source 源数据  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 排序后的榜单  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    List&lt;Stock&gt; <span class="title function_">sort</span><span class="params">(List&lt;Stock&gt; source)</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>实现我们的策略类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 高价榜  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HighPriceRank</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> List&lt;Stock&gt; <span class="title function_">sort</span><span class="params">(List&lt;Stock&gt; source)</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> source.stream()  </span><br><span class="line">                .sorted(Comparator.comparing(Stock::getPrice).reversed())  </span><br><span class="line">                .collect(Collectors.toList());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 低价榜  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LowPriceRank</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> List&lt;Stock&gt; <span class="title function_">sort</span><span class="params">(List&lt;Stock&gt; source)</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> source.stream()  </span><br><span class="line">                .sorted(Comparator.comparing(Stock::getPrice))  </span><br><span class="line">                .collect(Collectors.toList());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 高涨幅榜  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HighRiseRank</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> List&lt;Stock&gt; <span class="title function_">sort</span><span class="params">(List&lt;Stock&gt; source)</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> source.stream()  </span><br><span class="line">                .sorted(Comparator.comparing(Stock::getRise).reversed())  </span><br><span class="line">                .collect(Collectors.toList());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>经典的Context类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Context</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStrategy</span><span class="params">(Strategy strategy)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.strategy = strategy;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> List&lt;Stock&gt; <span class="title function_">getRank</span><span class="params">(List&lt;Stock&gt; source)</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> strategy.sort(source);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>于是 我们顺礼成章地得到调用类—榜单实例RankServiceImpl</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RankServiceImpl</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * dataService.getSource() 提供原始的股票数据  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Resource</span>  </span><br><span class="line">    <span class="keyword">private</span> DataService dataService;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 前端传入榜单类型, 返回排序完的榜单  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rankType 榜单类型  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 榜单数据  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> List&lt;Stock&gt; <span class="title function_">getRank</span><span class="params">(String rankType)</span> &#123;  </span><br><span class="line">        <span class="comment">// 创建上下文  </span></span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Context</span>();  </span><br><span class="line">        <span class="comment">// 这里选择策略  </span></span><br><span class="line">        <span class="keyword">switch</span> (rankType) &#123;  </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;HighPrice&quot;</span>:  </span><br><span class="line">                context.setStrategy(<span class="keyword">new</span> <span class="title class_">HighPriceRank</span>());  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;LowPrice&quot;</span>:  </span><br><span class="line">                context.setStrategy(<span class="keyword">new</span> <span class="title class_">LowPriceRank</span>());  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;HighRise&quot;</span>:  </span><br><span class="line">                context.setStrategy(<span class="keyword">new</span> <span class="title class_">HighRiseRank</span>());  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">default</span>:  </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;rankType not found&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">// 然后执行策略  </span></span><br><span class="line">        <span class="keyword">return</span> context.getRank(dataService.getSource());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以看到经典方法，创建了一个接口、三个策略类，还是比较啰嗦的。调用类的实现也待商榷，新增一个策略类还要修改榜单实例（可以用抽象工厂解决，但是复杂度又上升了）。加之我们有更好的选择，所以此处不再推荐经典策略模式</p><h2 id="基于枚举的策略模式"><a href="#基于枚举的策略模式" class="headerlink" title="基于枚举的策略模式"></a>基于枚举的策略模式</h2><p>这里对这种简单的策略，推荐用枚举进行优化。</p><p>枚举的本质是创建了一些静态类的集合。</p><p>我下面直接给出例子，大家可以直观感受一下</p><p>枚举策略类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">RankEnum</span> &#123;  </span><br><span class="line">    <span class="comment">// 以下三个为策略实例  </span></span><br><span class="line">    HighPrice &#123;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> List&lt;Stock&gt; <span class="title function_">sort</span><span class="params">(List&lt;Stock&gt; source)</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> source.stream()  </span><br><span class="line">                    .sorted(Comparator.comparing(Stock::getPrice).reversed())  </span><br><span class="line">                    .collect(Collectors.toList());  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;,  </span><br><span class="line">    LowPrice &#123;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> List&lt;Stock&gt; <span class="title function_">sort</span><span class="params">(List&lt;Stock&gt; source)</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> source.stream()  </span><br><span class="line">                    .sorted(Comparator.comparing(Stock::getPrice))  </span><br><span class="line">                    .collect(Collectors.toList());  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;,  </span><br><span class="line">    HighRise &#123;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> List&lt;Stock&gt; <span class="title function_">sort</span><span class="params">(List&lt;Stock&gt; source)</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> source.stream()  </span><br><span class="line">                    .sorted(Comparator.comparing(Stock::getRise).reversed())  </span><br><span class="line">                    .collect(Collectors.toList());  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 这里定义了策略接口  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> List&lt;Stock&gt; <span class="title function_">sort</span><span class="params">(List&lt;Stock&gt; source)</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>对应的调用类也得以优化，榜单实例RankServiceImpl</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RankServiceImpl</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * dataService.getSource() 提供原始的股票数据  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Resource</span>  </span><br><span class="line">    <span class="keyword">private</span> DataService dataService;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 前端传入榜单类型, 返回排序完的榜单  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rankType 榜单类型 形似 RankEnum.HighPrice.name()  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 榜单数据  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> List&lt;Stock&gt; <span class="title function_">getRank</span><span class="params">(String rankType)</span> &#123;  </span><br><span class="line">        <span class="comment">// 获取策略，这里如果未匹配会抛 IllegalArgumentException异常  </span></span><br><span class="line">        <span class="type">RankEnum</span> <span class="variable">rank</span> <span class="operator">=</span> RankEnum.valueOf(rankType);  </span><br><span class="line">        <span class="comment">// 然后执行策略  </span></span><br><span class="line">        <span class="keyword">return</span> rank.sort(dataService.getSource());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>可以看到，如果策略简单的话，基于枚举的策略模式优雅许多，调用方也做到了0修改，但正确地使用枚举策略模式需要额外考虑以下几点</p><ul><li><p>枚举的策略类是公用且静态，这意味着这个策略过程不能引入非静态的部分，扩展性受限</p></li><li><p>策略模式的目标之一，是优秀的扩展性和可维护性，最好能新增或修改某一策略类时，对其他类是无改动的。而枚举策略如果过多或者过程复杂，维护是比较困难的，可维护性受限</p></li></ul><h2 id="基于工厂的策略模式"><a href="#基于工厂的策略模式" class="headerlink" title="基于工厂的策略模式"></a>基于工厂的策略模式</h2><p>为了解决良好的扩展性和可维护性，我更推荐以下利用spring自带beanFactory的优势，实现一个基于工厂的策略模式。</p><p>策略类改动只是添加了@Service注解，并指定了Service的value属性</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 高价榜  </span></span><br><span class="line"><span class="comment"> * 注意申明 Service.value = HighPrice,他是我们的key,下同  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Service(&quot;HighPrice&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HighPriceRank</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> List&lt;Stock&gt; <span class="title function_">sort</span><span class="params">(List&lt;Stock&gt; source)</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> source.stream()  </span><br><span class="line">                .sorted(Comparator.comparing(Stock::getPrice).reversed())  </span><br><span class="line">                .collect(Collectors.toList());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 低价榜  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Service(&quot;LowPrice&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LowPriceRank</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> List&lt;Stock&gt; <span class="title function_">sort</span><span class="params">(List&lt;Stock&gt; source)</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> source.stream()  </span><br><span class="line">                .sorted(Comparator.comparing(Stock::getPrice))  </span><br><span class="line">                .collect(Collectors.toList());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 高涨幅榜  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Service(&quot;HighRise&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HighRiseRank</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> List&lt;Stock&gt; <span class="title function_">sort</span><span class="params">(List&lt;Stock&gt; source)</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> source.stream()  </span><br><span class="line">                .sorted(Comparator.comparing(Stock::getRise).reversed())  </span><br><span class="line">                .collect(Collectors.toList());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>调用类修改较大，接入借助spring工厂特性，完成策略类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RankServiceImpl</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * dataService.getSource() 提供原始的股票数据  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Resource</span>  </span><br><span class="line">    <span class="keyword">private</span> DataService dataService;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 利用注解<span class="doctag">@Resource</span>和<span class="doctag">@Autowired</span>特性,直接获取所有策略类  </span></span><br><span class="line"><span class="comment">     * key = <span class="doctag">@Service</span>的value  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Resource</span>  </span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Strategy&gt; rankMap;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 前端传入榜单类型, 返回排序完的榜单  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rankType 榜单类型 和Service注解的value属性一致  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 榜单数据  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> List&lt;Stock&gt; <span class="title function_">getRank</span><span class="params">(String rankType)</span> &#123;  </span><br><span class="line">        <span class="comment">// 判断策略是否存在  </span></span><br><span class="line">        <span class="keyword">if</span> (!rankMap.containsKey(rankType)) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;rankType not found&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">// 获得策略实例  </span></span><br><span class="line">        <span class="type">Strategy</span> <span class="variable">rank</span> <span class="operator">=</span> rankMap.get(rankType);  </span><br><span class="line">        <span class="comment">// 执行策略  </span></span><br><span class="line">        <span class="keyword">return</span> rank.sort(dataService.getSource());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>若使用的不是Spring，也可以找找对应框架的工厂模式实现，或者自己实现一个抽象工厂。</p><p>工厂策略模式会比枚举策略模式啰嗦，但也更加灵活、易扩展性和易维护。故简单策略推荐枚举策略模式，复杂策略才推荐工厂策略模式。</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 策略模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在oracle里杀死进程</title>
      <link href="/posts/3157.html"/>
      <url>/posts/3157.html</url>
      
        <content type="html"><![CDATA[<p><code>ORA-00054: resource busy and acquire with NOWAIT specified or timeout expired</code>错误</p><p>表示在尝试执行 SQL 语句时，目标资源正被其他会话占用，而由于 NOWAIT 或超时设置，当前操作未能成功获取锁。</p><p>目标表正被锁定</p><p>可能其他事务正在访问或修改 MYBOOT.PUS_MACHINE_MATERIAL_MESSAGE 表，导致无法获取锁。</p><p>解决方式</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    s.sid,</span><br><span class="line">    s.serial#,</span><br><span class="line">    s.username,</span><br><span class="line">    s.program,</span><br><span class="line">    o.object_name,</span><br><span class="line">    l.locked_mode</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    v$locked_object l</span><br><span class="line"><span class="keyword">JOIN</span></span><br><span class="line">    dba_objects o <span class="keyword">ON</span> l.object_id <span class="operator">=</span> o.object_id</span><br><span class="line"><span class="keyword">JOIN</span></span><br><span class="line">    v$session s <span class="keyword">ON</span> l.session_id <span class="operator">=</span> s.sid</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    o.object_name <span class="operator">=</span> <span class="string">&#x27;PUS_MACHINE_MATERIAL_MESSAGE&#x27;</span>;</span><br></pre></td></tr></table></figure><p>找到阻塞的会话 ID（SID 和 SERIAL#），然后终止会话：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 杀死进程</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> KILL SESSION <span class="string">&#x27;sid,serial#&#x27;</span>;</span><br><span class="line"><span class="comment">-- 例子</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> KILL SESSION <span class="string">&#x27;1155,22161&#x27;</span>;</span><br></pre></td></tr></table></figure><p>强制终止会话可能会导致阻塞会话的事务回滚，请谨慎操作。</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> oracle </tag>
            
            <tag> 在oracle里杀死进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatisPlus关联查询分页插件的坑</title>
      <link href="/posts/52315.html"/>
      <url>/posts/52315.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>mybatis-plus自带一个分页插件，能够帮助我们快速的完成分页，详细用法可以看官网。但是分页插件只适用于基础的单表，对于需要聚合查询的一对多情况，有个很深的坑。</p><h2 id="正确示例"><a href="#正确示例" class="headerlink" title="正确示例"></a>正确示例</h2><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>使用子查询的方式，查询子实体，再<code>collection</code>标签里指定子查询语句<code>select</code>和关联的字段<code>column</code></p><p>这个column也可以理解为子查询语句所需的参数，需要把主查询的哪个字段作为参数传入到子查询的查询方法里</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NcsErBxzbDTO</span> &#123;</span><br><span class="line">    <span class="comment">// 主键</span></span><br><span class="line">    <span class="keyword">private</span> String pkJkbx;</span><br><span class="line">    <span class="comment">// 单据编号</span></span><br><span class="line">    <span class="keyword">private</span> String djbh;</span><br><span class="line">    <span class="comment">// 单据日期</span></span><br><span class="line">    <span class="keyword">private</span> String djrq;</span><br><span class="line">    <span class="comment">// 单据总金额</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal total;</span><br><span class="line">    <span class="comment">// 事由</span></span><br><span class="line">    <span class="keyword">private</span> String zy;</span><br><span class="line">    <span class="comment">// 借款保险部门主键</span></span><br><span class="line">    <span class="keyword">private</span> String deptId;</span><br><span class="line">    <span class="comment">// 借款报销部门名称</span></span><br><span class="line">    <span class="keyword">private</span> String deptName;</span><br><span class="line">    <span class="comment">// 财务组织</span></span><br><span class="line">    <span class="keyword">private</span> String pkFiorg;</span><br><span class="line">    <span class="comment">// 明细</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;ErBusitem&gt; erBusitemList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ErBusitem</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String pkBusitem;</span><br><span class="line">        <span class="comment">// 不含税金额</span></span><br><span class="line">        <span class="keyword">private</span> String amountExcludingTax;</span><br><span class="line">        <span class="comment">// 税额</span></span><br><span class="line">        <span class="keyword">private</span> String tax;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mapper接口</span></span><br><span class="line">List&lt;NcsErBxzbDTO&gt; <span class="title function_">getList</span><span class="params">(<span class="meta">@Param(&quot;query&quot;)</span> ErBxzbQO qo, <span class="meta">@Param(&quot;page&quot;)</span> IPage&lt;NcsErBxzbDTO&gt; page)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sql语句 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;NcsErBxzbDTOMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;org.jeecg.modules.ncs.dto.NcsErBxzbDTO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;pk_jkbx&quot;</span> <span class="attr">property</span>=<span class="string">&quot;pkJkbx&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;PK_FIORG&quot;</span> <span class="attr">property</span>=<span class="string">&quot;pkFiorg&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;TOTAL&quot;</span> <span class="attr">property</span>=<span class="string">&quot;total&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;DJBH&quot;</span> <span class="attr">property</span>=<span class="string">&quot;djbh&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;DJRQ&quot;</span> <span class="attr">property</span>=<span class="string">&quot;djrq&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;ZY&quot;</span> <span class="attr">property</span>=<span class="string">&quot;zy&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;DEPTID&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptId&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;erBusitemList&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">ofType</span>=<span class="string">&quot;org.jeecg.modules.ncs.dto.NcsErBxzbDTO$ErBusitem&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">select</span>=<span class="string">&quot;getErBusitemListByPkJkbx&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">column</span>=<span class="string">&quot;pk_jkbx&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;NcsErBxzbDTOMap&quot;</span>&gt;</span></span><br><span class="line">      SELECT</span><br><span class="line">          er_bxzb.pk_jkbx,</span><br><span class="line">          er_bxzb.PK_FIORG,</span><br><span class="line">          er_bxzb.TOTAL,</span><br><span class="line">          er_bxzb.DJBH,</span><br><span class="line">          er_bxzb.DJRQ,</span><br><span class="line">          er_bxzb.ZY,</span><br><span class="line">          er_bxzb.DEPTID</span><br><span class="line">      FROM</span><br><span class="line">          er_bxzb er_bxzb</span><br><span class="line">      <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;query.pkFiorg != null and query.pkFiorg != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">              and er_bxzb.PK_FIORG = #&#123;query.pkFiorg&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;query.deptId != null and query.deptId != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">              and er_bxzb.DEPTID = #&#123;query.deptId&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;query.startDate != null and query.startDate != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">              AND TO_DATE(er_bxzb.DJRQ, &#x27;YYYY-MM-DD HH24:MI:SS&#x27;) <span class="symbol">&amp;gt;</span>= TO_DATE(#&#123;query.startDate&#125;, &#x27;YYYY-MM-DD&#x27;)</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;query.endDate != null and query.endDate != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">              AND TO_DATE(er_bxzb.DJRQ, &#x27;YYYY-MM-DD HH24:MI:SS&#x27;) <span class="symbol">&amp;lt;</span> TO_DATE(#&#123;query.endDate&#125;, &#x27;YYYY-MM-DD&#x27;) + 1</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;query.djbh != null and query.djbh != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;djbhBind&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27;+query.djbh+&#x27;%&#x27;&quot;</span>/&gt;</span></span><br><span class="line">              AND er_bxzb.DJBH like #&#123;djbhBind&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">          AND er_bxzb.dr = 0</span><br><span class="line">      <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">      ORDER BY</span><br><span class="line">          djrq DESC,</span><br><span class="line">          djbh DESC</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getErBusitemListByPkJkbx&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.jeecg.modules.ncs.dto.NcsErBxzbDTO$ErBusitem&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            er_busitem.pk_busitem pkBusitem,</span><br><span class="line">            er_busitem.defitem25 amountExcludingTax,</span><br><span class="line">            er_busitem.defitem26 tax</span><br><span class="line">        FROM</span><br><span class="line">            er_busitem</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            er_busitem.pk_jkbx = #&#123;pkJkbx&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><p>这里不写具体的代码，就稍微描述一下</p><p>不再依赖mybatis完成子查询，而是自己通过编码的方式完成子查询<br>如示例1所示，不需要再<code>resultMap</code>里写<code>collection</code>，而是直接执行主表的单表查询<br>当主表的数据查询出来后，在代码里循环集合或数组，对每个对象执行子查询，然后将查询出的结果手动set到实体的属性中</p><h2 id="错误示例"><a href="#错误示例" class="headerlink" title="错误示例"></a>错误示例</h2><p>在示例1的基础上，在<code>collection</code>里写<code>id</code>,<code>result</code>等标签，不写<code>sql</code>,<code>column</code>标签<br>在主表的查询语句的基础上直接<code>left join</code>子表<br>不写子表的单独查询的语句，而是只有一个关联查询<br>这样查出来的结果分页就会不正确。<br>比如，主表1条，子表3条，他们是关联的，此时如果前端传过来的pageSize是5，那么这一个主表对象就占了3个位置，而不是原本的占一个位置</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mybatisPlus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mybatisPlus </tag>
            
            <tag> mybatisPlus关联查询分页插件的坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口定义常量的方式</title>
      <link href="/posts/15701.html"/>
      <url>/posts/15701.html</url>
      
        <content type="html"><![CDATA[<p>常见的在java下定义常量的方式有静态变量或者枚举。今天看到别人的代码，还有用接口来定义常量的，分享一下。</p><p>静态常量</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Constants</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">APP_NAME</span> <span class="operator">=</span> <span class="string">&quot;MyApplication&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_USERS</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14159</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举定义常量</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Status</span> &#123;</span><br><span class="line">    SUCCESS,</span><br><span class="line">    FAILURE,</span><br><span class="line">    PENDING</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口定义常量</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NcConstant</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PROJECT_CLASS</span> &#123;</span><br><span class="line">        <span class="comment">// 销售类型的项目</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">SALES_TYPE</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 组织编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ORG_CODE</span> &#123;</span><br><span class="line">        <span class="comment">// 集团编码（英科集团）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">pk_org</span> <span class="operator">=</span> <span class="string">&quot;b&quot;</span>;</span><br><span class="line">        <span class="comment">// 仓库编码（501成品库）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cwarehouseid</span> <span class="operator">=</span> <span class="string">&quot;c&quot;</span>;</span><br><span class="line">        <span class="comment">// 公司编码(英科再生）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">pk_group</span> <span class="operator">=</span> <span class="string">&quot;d&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用接口常量：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> NcConstant.ORG_CODE.cwarehouseid</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> 接口定义常量的方式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>@JsonFormat和@DateTimeFormat</title>
      <link href="/posts/24020.html"/>
      <url>/posts/24020.html</url>
      
        <content type="html"><![CDATA[<h2 id="JsonFormat-注解"><a href="#JsonFormat-注解" class="headerlink" title="@JsonFormat 注解"></a>@JsonFormat 注解</h2><p>@JsonFormat 注解来自于 Jackson 库，通常用于控制日期时间格式在<code>序列化和反序列化</code>时的表现，主要应用于将<code>Java对象转换为JSON</code>时的日期时间格式处理，或者从<code>JSON转换回Java</code>对象时解析日期格式。</p><h3 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Event</span> &#123;</span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date date1;</span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;, timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDate date2;</span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;GMT+8&quot;)</span>    </span><br><span class="line">    <span class="keyword">private</span> LocalDateTime date3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateController</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/receiveDate&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveDate</span><span class="params">(<span class="meta">@RequestBody</span> Event dateDto)</span> &#123;  </span><br><span class="line">          </span><br><span class="line">        <span class="comment">// 这里dateDto.getDate1()已经是一个Date对象，包含了时分秒  </span></span><br><span class="line">        <span class="comment">// 你可以直接使用它，或者转换为其他格式  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>解析前端传来的 JSON 数据中的日期时间字段：前端传来的json数据的日期字符串(<code>例：&#123;&quot;date1&quot;:&quot;2024-02-12 14:23:55&quot;&#125;</code>)在SpringBoot中使用@RequestBody标注的对象接收时就能自动转换为Date、LocalDate、LocalDateTime等属性，不需要手动转换</li><li>处理返回的 JSON 数据中日期时间的格式: 上面定义的Event对象以JSON返回给前端时，前端能得到一个一个格式化后的时间字符串(<code>例：&#123;&quot;date1&quot;:&quot;2024-02-12 14:23:55&quot;&#125;</code>)</li></ul><h2 id="DateTimeFormat-注解"><a href="#DateTimeFormat-注解" class="headerlink" title="@DateTimeFormat 注解"></a>@DateTimeFormat 注解</h2><p>@DateTimeFormat注解来自于 Spring 框架，主要用于在 Spring MVC 的数据绑定中，控制日期时间在Java对象和字符串之间的转换格式。常用于将表单提交的数据（通常是字符串形式）转换为日期类型。</p><h3 id="用法示例-1"><a href="#用法示例-1" class="headerlink" title="用法示例"></a>用法示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateController</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 处理GET请求  </span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getDate&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDate</span><span class="params">(  </span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(&quot;date&quot;)</span>  </span></span><br><span class="line"><span class="params">            <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span> LocalDateTime dateTime)</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Received GET date: &quot;</span> + dateTime.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// DTO类用于POST请求  </span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DateDto</span> &#123;  </span><br><span class="line">        <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span>  </span><br><span class="line">        <span class="keyword">private</span> LocalDateTime date;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// Getters and Setters  </span></span><br><span class="line">        <span class="keyword">public</span> LocalDateTime <span class="title function_">getDate</span><span class="params">()</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> date;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDate</span><span class="params">(LocalDateTime date)</span> &#123;  </span><br><span class="line">            <span class="built_in">this</span>.date = date;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 处理POST请求  </span></span><br><span class="line">    <span class="comment">// 此时前台是表单提交，ContentType是application/x-www-form-urlencoded或multipart/form-data</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/postDate&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">postDate</span><span class="params">(<span class="meta">@ModelAttribute</span> DateDto dateDto)</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Received POST date: &quot;</span> + dateDto.getDate().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>处理来自前端表单、URL参数的数据绑定时，解析和格式化日期字段。</li></ul><h2 id="两者的异同"><a href="#两者的异同" class="headerlink" title="两者的异同"></a>两者的异同</h2><h3 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>@JsonFormat：主要用于处理 JSON 数据的序列化和反序列化（通常在 REST API 开发中使用）。</li><li>@DateTimeFormat：主要用于处理来自表单或 URL 参数的日期字符串绑定（通常在 Spring MVC 的数据绑定中使用）。</li></ul><h3 id="使用库"><a href="#使用库" class="headerlink" title="使用库"></a>使用库</h3><ul><li>@JsonFormat：来自 Jackson 库，依赖于 Jackson 的序列化和反序列化机制。</li><li>@DateTimeFormat：来自 Spring 框架，依赖于 Spring 的数据绑定机制。</li></ul><h3 id="支持字段类型"><a href="#支持字段类型" class="headerlink" title="支持字段类型"></a>支持字段类型</h3><ul><li>都支持<code>Date</code>,<code>LocalDate</code>,<code>LocalDateTime</code>类型，需要注意各自的日期时间格式化字符串，这个是通用的：<code>yyyy-MM-dd HH:mm:ss</code></li></ul><h2 id="综合使用"><a href="#综合使用" class="headerlink" title="综合使用"></a>综合使用</h2><p>在项目中，一般日期时间字段，两个注解都加上</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateDTO</span>&#123;</span><br><span class="line">    <span class="meta">@JsonFormat(timezone = &quot;GMT+8&quot;,pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="meta">@DateTimeFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="补充，Mysql和Oracle中日期时间字段与java中字段的对应关系"><a href="#补充，Mysql和Oracle中日期时间字段与java中字段的对应关系" class="headerlink" title="补充，Mysql和Oracle中日期时间字段与java中字段的对应关系"></a>补充，Mysql和Oracle中日期时间字段与java中字段的对应关系</h2><p>mysql的date对应java的（jdk8及以上）LocalDate、（jdk7及以下）Date<br>mysql的datetime对应java的（jdk8及以上）LocalDateTime、（jdk7及以下）Date<br>oracle的date对应java的（jdk8及以上）LocalDateTime、（jdk7及以下）Date</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> @JsonFormat和@DateTimeFormat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot下的反射</title>
      <link href="/posts/18526.html"/>
      <url>/posts/18526.html</url>
      
        <content type="html"><![CDATA[<p>普通的java反射调用一个方法的例子如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取类的 Class 对象</span></span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;TestClass&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建类的实例</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> clazz.getDeclaredConstructor().newInstance();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取方法</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;sayHello&quot;</span>, String.class);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用方法</span></span><br><span class="line">            method.invoke(instance, <span class="string">&quot;World&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的方式实例化的对象与被spring管理的bean对象有着本质的不同</p><p>spring的bean都是动态代理对象</p><p>而自己手动实例化的对象里面的依赖注入，注解等都会失效</p><p>正确的方式是从spring容器中获取bean对象,如下是工具类，可以根据类或者名称或者类和名称获取bean</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBootBeanUtil</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (SpringBootBeanUtil.applicationContext == <span class="literal">null</span>) &#123;</span><br><span class="line">            SpringBootBeanUtil.applicationContext = applicationContext;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取applicationContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title function_">getApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过name获取 Bean.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getBean</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getApplicationContext().getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过class获取Bean.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getApplicationContext().getBean(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过name,以及Clazz返回指定的Bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(String name, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getApplicationContext().getBean(name, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类与方法示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.jeecg.modules.fsevent.server.job;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jeecg.common.api.vo.Result;</span><br><span class="line"><span class="keyword">import</span> org.jeecg.common.system.api.ISysBaseAPI;</span><br><span class="line"><span class="keyword">import</span> org.jeecg.common.system.vo.SysPositionModel;</span><br><span class="line"><span class="keyword">import</span> org.jeecg.modules.fsevent.constant.FsEventConstant;</span><br><span class="line"><span class="keyword">import</span> org.jeecg.modules.fsevent.util.JobUtil;</span><br><span class="line"><span class="keyword">import</span> org.jeecg.modules.tps.api.TpsFsJobApi;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lark.oapi.service.corehr.v2.model.I18n;</span><br><span class="line"><span class="keyword">import</span> com.lark.oapi.service.corehr.v2.model.Job;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主服务job（职务）变更处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MasterJob</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> TpsFsJobApi tpsFsJobApi;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ISysBaseAPI sysBaseAPI;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 职务更新</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@DS(&quot;feishupersondev&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobUpdated</span><span class="params">(String eventEntityJson)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jobId</span> <span class="operator">=</span> JobUtil.checkJobEventEntity(eventEntityJson);</span><br><span class="line">        Result&lt;Job&gt; feignRes = tpsFsJobApi.searchOneJobInfo(jobId);</span><br><span class="line">        <span class="keyword">if</span> (!feignRes.isSuccess()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(feignRes.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> feignRes.getResult();</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> job.getCode();</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(code)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;飞书远程查询职位信息，职位编码为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据jobCode判断job是否存在</span></span><br><span class="line">        <span class="type">SysPositionModel</span> <span class="variable">oldSysPositionModel</span> <span class="operator">=</span> sysBaseAPI.getSysPositionByCode(code);</span><br><span class="line">        <span class="keyword">if</span> (oldSysPositionModel == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;主库不存在该职务编码:&quot;</span> + code + <span class="string">&quot;，无法更新&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入表中</span></span><br><span class="line">        <span class="type">SysPositionModel</span> <span class="variable">sysPositionModel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SysPositionModel</span>();</span><br><span class="line">        <span class="type">I18n</span> <span class="variable">nameI18n</span> <span class="operator">=</span> Arrays.stream(job.getName())</span><br><span class="line">            .filter(name -&gt; FsEventConstant.LanguageCode.CHINESE.equals(name.getLang())).findFirst().orElse(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (nameI18n == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;更新职位没有中文名称&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sysPositionModel.setId(oldSysPositionModel.getId()).setCode(job.getCode()).setName(nameI18n.getValue())</span><br><span class="line">            .setStatus(job.getActive() ? <span class="number">1</span> : <span class="number">0</span>).setUpdateBy(<span class="string">&quot;system&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> sysBaseAPI.updateSysPosition(sysPositionModel);</span><br><span class="line">        <span class="keyword">if</span> (!res) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;职位更新失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法调用示例:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> <span class="string">&quot;masterJob&quot;</span>;</span><br><span class="line">  <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> <span class="string">&quot;jobUpdated&quot;</span>;</span><br><span class="line">  <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="string">&quot;org.jeecg.modules.fsevent.server.job.MasterJob&quot;</span>;</span><br><span class="line">  Class&lt;?&gt; aClass = Class.forName(className);</span><br><span class="line">  <span class="type">Method</span> <span class="variable">method1</span> <span class="operator">=</span> aClass.getMethod(methodName, String.class);</span><br><span class="line">  <span class="type">Object</span> <span class="variable">bean1</span> <span class="operator">=</span> SpringBootBeanUtil.getBean(beanName, aClass);</span><br><span class="line">  method1.invoke(bean1, <span class="string">&quot;111&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    log.error(<span class="string">&quot;反射执行事件失败，执行id:&#123;&#125;&quot;</span>, result.getId(), e);</span><br><span class="line">    String logInfo;</span><br><span class="line">    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ClassNotFoundException) &#123;</span><br><span class="line">        logInfo = <span class="string">&quot;类未找到: &quot;</span> + e.getMessage();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> NoSuchMethodException) &#123;</span><br><span class="line">        logInfo = <span class="string">&quot;方法: &quot;</span> + e.getMessage();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> IllegalAccessException) &#123;</span><br><span class="line">        logInfo = <span class="string">&quot;无法访问目标方法: &quot;</span> + e.getMessage();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> InvocationTargetException) &#123;</span><br><span class="line">        <span class="type">Throwable</span> <span class="variable">cause</span> <span class="operator">=</span> e.getCause();</span><br><span class="line">        <span class="keyword">if</span> (cause != <span class="literal">null</span>) &#123;</span><br><span class="line">            logInfo = cause.getMessage();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logInfo = e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        logInfo = e.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// logInfo就是反射方法调用失败的信息。如果是子方法报错，这里就会是子方法的报错信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> SpringBoot下的反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装minio</title>
      <link href="/posts/63341.html"/>
      <url>/posts/63341.html</url>
      
        <content type="html"><![CDATA[<p>项目调试需要本地搭建一个minio，记录一下docker命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9000:9000 -p 9001:9001 \</span><br><span class="line">--net=els \</span><br><span class="line">--name minio \</span><br><span class="line">-e <span class="string">&quot;MINIO_ROOT_USER=minio&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;MINIO_ROOT_PASSWORD=minio123&quot;</span> \</span><br><span class="line">-v /Users/zhangyuhan/Work/dev-env/minio/data:/data \</span><br><span class="line">-v /Users/zhangyuhan/Work/dev-env/minio/config:/root/.minio \</span><br><span class="line">minio/minio server /data --console-address <span class="string">&quot;:9001&quot;</span> -address <span class="string">&quot;:9000&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> minio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> minio </tag>
            
            <tag> docker安装minio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java:Path与Files类</title>
      <link href="/posts/44557.html"/>
      <url>/posts/44557.html</url>
      
        <content type="html"><![CDATA[<p>jDK1.7引入了新的IO操作类,java.nio.file包下的Path接口和Files类。然而网上的好多教程仍然用着比较老旧的File类。这里整理一下新的用法。</p><h2 id="创建文件和目录"><a href="#创建文件和目录" class="headerlink" title="创建文件和目录"></a>创建文件和目录</h2><p>创建文件和目录非常简单。我们可以使用Files类的createFile()方法和createDirectory()方法来创建文件和目录</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateFileAndDirectory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="comment">//文件</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">pathToFile</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;example.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//目录</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">pathToDir</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;exampleDir&quot;</span>);</span><br><span class="line">    <span class="comment">//多级目录</span></span><br><span class="line">    <span class="type">Path</span> <span class="variable">pathDirectories</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;java\exampleDir\pathDirectories\dir&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Files.createFile(pathToFile);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建目录</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          Files.createDirectory(pathToDir);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建多级目录</span></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">              Files.createDirectories(pathDirectories);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码会创建一个名为“example.txt”的文件和一个名为“exampleDir”的目录。如果文件或目录已经存在，这些方法将抛出异常。<br>createDirectories方法会创建多级目录，上级目录不存在的话，直接创建。</p><h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><p>Java包含多种方式来写入文件。我们可以使用Files类的write()方法来将数据写入文件。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WriteToFile</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;example.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="string">&quot;Hello, world!&quot;</span>.getBytes();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">      Files.write(path, bytes);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">      Files.write(path, text.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入字符串列表</span></span><br><span class="line">        Iterable&lt;String&gt; lines = Arrays.asList(<span class="string">&quot;line 1&quot;</span>, <span class="string">&quot;line 2&quot;</span>, <span class="string">&quot;line 3&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">    Files.write(path, lines);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的代码将数据写入“example.txt”文件。我们可以使用write()方法将字节数组、字符串或字符串列表写入文件。</p><h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><p>Java包含多种方式来读取文件。我们可以使用Files类的readAllBytes()方法、readAllLines()方法或newBufferedReader()方法来读取文件。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadFromFile</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;example.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = Files.readAllBytes(path);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取字符串列表</span></span><br><span class="line">        List&lt;String&gt; lines = Files.readAllLines(path);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用BufferedReader读取文件</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> Files.newBufferedReader(path);</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">          <span class="comment">// do something</span></span><br><span class="line">        &#125;</span><br><span class="line">        reader.close();</span><br></pre></td></tr></table></figure><h2 id="删除文件或目录"><a href="#删除文件或目录" class="headerlink" title="删除文件或目录"></a>删除文件或目录</h2><p>删除文件或目录可以使用Files类的delete()方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除一个文件</span></span><br><span class="line"><span class="type">Path</span> <span class="variable">fileToDeletePath</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;fileToDelete.txt&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Files.delete(fileToDeletePath);</span><br><span class="line">    System.out.println(<span class="string">&quot;文件删除成功&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;文件删除失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除一个目录</span></span><br><span class="line"><span class="type">Path</span> <span class="variable">dirToDeletePath</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;dirToDelete&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Files.delete(dirToDeletePath);</span><br><span class="line">    System.out.println(<span class="string">&quot;目录删除成功&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;目录删除失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果文件存在才删除，不会抛出异常</span></span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//返回布尔值</span></span><br><span class="line">       Files.deleteIfExists(<span class="string">&quot;dirToDelete/dir&quot;</span>);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 复制一个文件</span></span><br><span class="line"><span class="comment">//资源地址</span></span><br><span class="line"><span class="type">Path</span> <span class="variable">sourceFilePath</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;sourceFile.txt&quot;</span>);</span><br><span class="line"><span class="comment">//目标地址</span></span><br><span class="line"><span class="type">Path</span> <span class="variable">targetFilePath</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;targetFile.txt&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Files.copy(sourceFilePath, targetFilePath,StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line">    System.out.println(<span class="string">&quot;文件复制成功&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;文件复制失败：&quot;</span> + e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复制目录"><a href="#复制目录" class="headerlink" title="复制目录"></a>复制目录</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 复制一个目录</span></span><br><span class="line"><span class="type">Path</span> <span class="variable">sourceDirPath</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;C:/Users/username/Desktop/sourceDir&quot;</span>);</span><br><span class="line"><span class="type">Path</span> <span class="variable">targetDirPath</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;C:/Users/username/Desktop/targetDir&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//CopyFileVisitor是需要自己实现的</span></span><br><span class="line"></span><br><span class="line">    Files.walkFileTree(sourceDirPath, <span class="keyword">new</span> <span class="title class_">CopyFileVisitor</span>(sourceDirPath, targetDirPath));</span><br><span class="line">    System.out.println(<span class="string">&quot;目录复制成功&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;目录复制失败：&quot;</span> + e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CopyFileVisitor</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.attribute.BasicFileAttributes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CopyFileVisitor</span> <span class="keyword">extends</span> <span class="title class_">SimpleFileVisitor</span>&lt;Path&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Path sourceDir;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Path targetDir;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CopyFileVisitor</span><span class="params">(Path sourceDir, Path targetDir)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sourceDir = sourceDir;</span><br><span class="line">        <span class="built_in">this</span>.targetDir = targetDir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> FileVisitResult <span class="title function_">preVisitDirectory</span><span class="params">(Path dir, BasicFileAttributes attrs)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">targetPath</span> <span class="operator">=</span> targetDir.resolve(sourceDir.relativize(dir));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Files.copy(dir, targetPath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileAlreadyExistsException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Files.isDirectory(targetPath)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> FileVisitResult <span class="title function_">visitFile</span><span class="params">(Path file, BasicFileAttributes attrs)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">targetPath</span> <span class="operator">=</span> targetDir.resolve(sourceDir.relativize(file));</span><br><span class="line">        Files.copy(file, targetPath, StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line">        <span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在preVisitDirectory()方法中，我们将源目录下的子目录逐个创建到目标目录中。在创建过程中，我们使用Files.copy()方法将目录复制到目标目录中。由于目标目录可能已经存在，因此我们在Files.copy()方法中使用了FileAlreadyExistsException异常进行处理。</p><p>在visitFile()方法中，我们将源目录下的文件逐个复制到目标目录中。在复制过程中，我们使用Files.copy()方法将文件复制到目标目录中，并使用StandardCopyOption.REPLACE_EXISTING选项替换现有文件。</p><h2 id="移动或重命名"><a href="#移动或重命名" class="headerlink" title="移动或重命名"></a>移动或重命名</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//这个操作可以做移动或重命名</span></span><br><span class="line">    Files.move(Paths.get(<span class="string">&quot;source.txt&quot;</span>),Paths.get(<span class="string">&quot;target.txt&quot;</span>), StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="遍历目录"><a href="#遍历目录" class="headerlink" title="遍历目录"></a>遍历目录</h2><h3 id="第一种遍历方式"><a href="#第一种遍历方式" class="headerlink" title="第一种遍历方式"></a>第一种遍历方式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">start</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;sourceDir&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">maxDepth</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Files.walk(start, maxDepth).forEach(System.out::println);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法接受三个参数：</p><p>start：表示要遍历的根目录的路径。<br>maxDepth：表示要遍历的最大深度。如果maxDepth为0，则只遍历根目录，不遍历其子目录。如果maxDepth为正整数，则遍历根目录和所有深度不超过maxDepth的子目录。如果maxDepth为负数，则遍历根目录和所有子目录。<br>options：表示遍历选项。可选项包括FileVisitOption.FOLLOW_LINKS和FileVisitOption.NOFOLLOW_LINKS。<br>如果选择FOLLOW_LINKS选项，则遍历符号链接指向的目录；<br>如果选择NOFOLLOW_LINKS选项，则遍历符号链接本身</p><h3 id="第二种遍历方式"><a href="#第二种遍历方式" class="headerlink" title="第二种遍历方式"></a>第二种遍历方式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">dir</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;/home/user/newdir&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Path entry : Files.list(dir)) &#123;</span><br><span class="line">    System.out.println(entry.getFileName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取文件属性"><a href="#获取文件属性" class="headerlink" title="获取文件属性"></a>获取文件属性</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;F:\\java\\2.txt&quot;</span>).toAbsolutePath();</span><br><span class="line">    System.out.println(<span class="string">&quot;文件是否存在: &quot;</span> + Files.exists(path));</span><br><span class="line">    System.out.println(<span class="string">&quot;是否是目录: &quot;</span> + Files.isDirectory(path));</span><br><span class="line">    System.out.println(<span class="string">&quot;是否是可执行文件: &quot;</span> + Files.isExecutable(path));</span><br><span class="line">    System.out.println(<span class="string">&quot;是否可读: &quot;</span> + Files.isReadable(path));</span><br><span class="line">    System.out.println(<span class="string">&quot;判断是否是一个文件: &quot;</span> + Files.isRegularFile(path));</span><br><span class="line">    System.out.println(<span class="string">&quot;是否可写: &quot;</span> + Files.isWritable(path));</span><br><span class="line">    System.out.println(<span class="string">&quot;文件是否不存在: &quot;</span> + Files.notExists(path));</span><br><span class="line">    System.out.println(<span class="string">&quot;文件是否隐藏: &quot;</span> + Files.isHidden(path));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;文件大小: &quot;</span> + Files.size(path));</span><br><span class="line">    System.out.println(<span class="string">&quot;文件存储在SSD还是HDD: &quot;</span> + Files.getFileStore(path));</span><br><span class="line">    System.out.println(<span class="string">&quot;文件修改时间：&quot;</span> + Files.getLastModifiedTime(path));</span><br><span class="line">    System.out.println(<span class="string">&quot;文件拥有者： &quot;</span> + Files.getOwner(path));</span><br><span class="line">    System.out.println(<span class="string">&quot;文件类型: &quot;</span> + Files.probeContentType(path));</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> java:Path与Files类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java split()方法输出示例</title>
      <link href="/posts/64251.html"/>
      <url>/posts/64251.html</url>
      
        <content type="html"><![CDATA[<p>在java里，split()方法如果只传入分割字符，那么会自动去除结尾的空字符串。</p><p>以前一直不知道，到底写了多少隐藏的bug，ヽ（゜ロ゜；）ノ</p><h2 id="情况1"><a href="#情况1" class="headerlink" title="情况1"></a>情况1</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;6000,5000&quot;</span>;</span><br><span class="line">String[] s = str.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(s));<span class="comment">// [6000, 5000]</span></span><br><span class="line">System.out.println(s.length);<span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h2 id="情况2"><a href="#情况2" class="headerlink" title="情况2"></a>情况2</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;6000,5000&quot;</span>;</span><br><span class="line">String[] s = str.split(<span class="string">&quot;,&quot;</span>, -<span class="number">1</span>);</span><br><span class="line">System.out.println(Arrays.toString(s));<span class="comment">// [6000, 5000]</span></span><br><span class="line">System.out.println(s.length);<span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h2 id="情况3"><a href="#情况3" class="headerlink" title="情况3"></a>情况3</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;6000,&quot;</span>;</span><br><span class="line">String[] s = str.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(s));<span class="comment">// [6000]</span></span><br><span class="line">System.out.println(s.length);<span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="情况4"><a href="#情况4" class="headerlink" title="情况4"></a>情况4</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;6000,&quot;</span>;</span><br><span class="line">String[] s = str.split(<span class="string">&quot;,&quot;</span>, -<span class="number">1</span>);</span><br><span class="line">System.out.println(Arrays.toString(s));<span class="comment">// [6000, ]</span></span><br><span class="line">System.out.println(s.length);<span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h2 id="情况5"><a href="#情况5" class="headerlink" title="情况5"></a>情况5</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;,6000&quot;</span>;</span><br><span class="line">String[] s = str.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(s));<span class="comment">// [, 6000]</span></span><br><span class="line">System.out.println(s.length);<span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h2 id="情况6"><a href="#情况6" class="headerlink" title="情况6"></a>情况6</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;,6000&quot;</span>;</span><br><span class="line">String[] s = str.split(<span class="string">&quot;,&quot;</span>, -<span class="number">1</span>);</span><br><span class="line">System.out.println(Arrays.toString(s));<span class="comment">// [, 6000]</span></span><br><span class="line">System.out.println(s.length);<span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h2 id="情况7"><a href="#情况7" class="headerlink" title="情况7"></a>情况7</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;,&quot;</span>;</span><br><span class="line">String[] s = str.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(s));<span class="comment">// []</span></span><br><span class="line">System.out.println(s.length);<span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h2 id="情况8"><a href="#情况8" class="headerlink" title="情况8"></a>情况8</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;,&quot;</span>;</span><br><span class="line">String[] s = str.split(<span class="string">&quot;,&quot;</span>, -<span class="number">1</span>);</span><br><span class="line">System.out.println(Arrays.toString(s));<span class="comment">// [, ]</span></span><br><span class="line">System.out.println(s.length);<span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h2 id="情况9"><a href="#情况9" class="headerlink" title="情况9"></a>情况9</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">String[] s = str.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(s));<span class="comment">// []</span></span><br><span class="line">System.out.println(s.length);<span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="情况10"><a href="#情况10" class="headerlink" title="情况10"></a>情况10</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">String[] s = str.split(<span class="string">&quot;,&quot;</span>, -<span class="number">1</span>);</span><br><span class="line">System.out.println(Arrays.toString(s));<span class="comment">// []</span></span><br><span class="line">System.out.println(s.length);<span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>split()不传limit参数时会自动去除结尾的空字符串。</p><p>上述所有代码都可以直接运行。</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> java split()方法输出示例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置ssl证书示例</title>
      <link href="/posts/62002.html"/>
      <url>/posts/62002.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl; #修改端口号增加ssl</span><br><span class="line">    server_name xxxx.cn; # 该域名必须对应当前nginx所在的服务器（通过dns解析的ip和nginx服务器的公网ip相同）</span><br><span class="line">    #server_name _;</span><br><span class="line">    #ssl on; #注释或删除ssl on</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置</span><br><span class="line">    ssl_prefer_server_ciphers on;   #指定PEM格式的证书文件   </span><br><span class="line">    ssl_certificate     xxxx.pem;   #指定PEM格式的私钥文件  </span><br><span class="line">    ssl_certificate_key  xxxx.key;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_pass http://127.0.0.1:8088;</span><br><span class="line">        # 保留所有请求头字段</span><br><span class="line">        proxy_pass_request_headers on;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name xxxx.cn;</span><br><span class="line">    #server_name _;</span><br><span class="line"> </span><br><span class="line">    # 使用return指令进行重定向</span><br><span class="line">    #return 301 https://$server_name$request_uri;</span><br><span class="line"> </span><br><span class="line">    # 或者使用rewrite指令进行重定向</span><br><span class="line">    rewrite ^(.*)$ https://$host$1 permanent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> nginx </tag>
            
            <tag> 配置ssl证书示例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装redis</title>
      <link href="/posts/44762.html"/>
      <url>/posts/44762.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull redis:7.2</span><br><span class="line"></span><br><span class="line">docker run \</span><br><span class="line">-p 6379:6379 \</span><br><span class="line">--name redis-7.2 \</span><br><span class="line">--restart=always \</span><br><span class="line">--network=els \</span><br><span class="line">-d redis:7.2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> redis </tag>
            
            <tag> docker安装redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>m1,docker安装rabbitmq</title>
      <link href="/posts/56360.html"/>
      <url>/posts/56360.html</url>
      
        <content type="html"><![CDATA[<h2 id="基本安装"><a href="#基本安装" class="headerlink" title="基本安装"></a>基本安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉镜像</span></span><br><span class="line">docker pull rabbitmq:3-management</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器。</span></span><br><span class="line"><span class="comment"># 项目用到mqtt，所以额外开启了一个mqtt插件</span></span><br><span class="line"><span class="comment"># 可以把--network去掉，或者自己建个自定义网络els</span></span><br><span class="line">docker run -d --name rabbitmq-3 --network els -p 5672:5672 -p 15672:15672 -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=123456  -e RABBITMQ_PLUGINS_ENABLE=rabbitmq_mqtt rabbitmq:3-management</span><br></pre></td></tr></table></figure><h2 id="开启延时插件"><a href="#开启延时插件" class="headerlink" title="开启延时插件"></a>开启延时插件</h2><p>首先下载并启动镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq:3.10.6-management</span><br><span class="line"></span><br><span class="line">docker run -d \</span><br><span class="line">--name rabbitmq \</span><br><span class="line">-e RABBITMQ_DEFAULT_USER=admin \</span><br><span class="line">-e RABBITMQ_DEFAULT_PASS=admin \</span><br><span class="line">-p 15672:15672 -p 5672:5672 -p 25672:25672 -p 61613:61613 -p 1883:1883 \</span><br><span class="line">rabbitmq:3.10.6-management</span><br></pre></td></tr></table></figure><p>下载插件到本地磁盘</p><p><a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/download/3.10.2/rabbitmq_delayed_message_exchange-3.10.2.ez">点击下载</a></p><p>将下载的插件移动到容器的plugins目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 进入到下载目录</span></span><br><span class="line">docker <span class="built_in">cp</span> rabbitmq_delayed_message_exchange-3.10.2.ez rabbitmq:/plugins</span><br></pre></td></tr></table></figure><p>启动插件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it rabbitmq /bin/bash</span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_delayed_message_exchange</span><br><span class="line"><span class="comment"># 执行完毕后退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>最后检查是否有x-delayed-message类型的交换机</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> RabbitMq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> RabbitMq </tag>
            
            <tag> m1,docker安装rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>m1,docker安装mysql5.7</title>
      <link href="/posts/2459.html"/>
      <url>/posts/2459.html</url>
      
        <content type="html"><![CDATA[<p>mysql5.7版本没有适合arm架构的docker镜像<br>但是网上大佬说x86镜像的mysql5.7一样能在macbook m1上运行<br>自己试验了，果然可以。整理一下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像（--platform linux/x86_64一定要加，要不然会报错，提示搜不到适合arm架构的mysql:5.7镜像）</span></span><br><span class="line">docker pull --platform linux/x86_64 mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立目录</span></span><br><span class="line"><span class="built_in">mkdir</span> /Users/zhangyuhan/Work/dev-env/mysql-5.7/log</span><br><span class="line"><span class="built_in">mkdir</span> /Users/zhangyuhan/Work/dev-env/mysql-5.7/data</span><br><span class="line"><span class="built_in">mkdir</span> /Users/zhangyuhan/Work/dev-env/mysql-5.7/conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立配置文件</span></span><br><span class="line">vim /Users/zhangyuhan/Work/dev-env/mysql-5.7/conf/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 归纳整理mysql:5.7的一些通用配置</span></span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">init_connect=<span class="string">&quot;SET collation_connection = utf8mb4_unicode_ci&quot;</span></span><br><span class="line">init_connect=<span class="string">&quot;SET NAMES utf8mb4&quot;</span></span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line">collation-server=utf8mb4_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">skip-name-resolve</span><br><span class="line">bind-address = 0.0.0.0</span><br><span class="line">port=3306</span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br><span class="line">lower_case_table_names=1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器(在配置文件保存之后)</span></span><br><span class="line"><span class="comment"># 可以把--network去掉，或者自己建个自定义网络els</span></span><br><span class="line">docker run -p 3306:3306 --name mysql-5.7 --network els \</span><br><span class="line">-v /Users/zhangyuhan/Work/dev-env/mysql-5.7/log:/var/log/mysql \</span><br><span class="line">-v /Users/zhangyuhan/Work/dev-env/mysql-5.7/data:/var/lib/mysql \</span><br><span class="line">-v /Users/zhangyuhan/Work/dev-env/mysql-5.7/conf:/etc/mysql \</span><br><span class="line">--restart=always \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> m1,docker安装mysql5.7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装nginx</title>
      <link href="/posts/57560.html"/>
      <url>/posts/57560.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line"><span class="comment"># 本文章以1.24为例，读者可以自行替换为其他的版本，流程基本不变。</span></span><br><span class="line">docker pull nginx:1.24</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器，该容器只为复制配置文件，后续会删除</span></span><br><span class="line">docker run -p80:80 --name nginx-1.24 -d nginx:1.24</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到容器id：e6c27ac9bc13</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建映射目录</span></span><br><span class="line"><span class="comment"># 所有的映射目录根目录为/Users/zhangyuhan/Work/dev-env/nginx-1.24，可自行替换</span></span><br><span class="line"><span class="built_in">mkdir</span> /Users/zhangyuhan/Work/dev-env/nginx-1.24</span><br><span class="line"><span class="built_in">cd</span> /Users/zhangyuhan/Work/dev-env/nginx-1.24</span><br><span class="line"><span class="built_in">mkdir</span> conf</span><br><span class="line"><span class="built_in">mkdir</span> html</span><br><span class="line"><span class="built_in">mkdir</span> logs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将容器内的nginx配置文件夹拷贝到conf文件下</span></span><br><span class="line">docker <span class="built_in">cp</span> e6c27ac9bc13:/etc/nginx /Users/zhangyuhan/Work/dev-env/nginx-1.24/conf</span><br><span class="line"><span class="comment"># 此时目录结构为conf/nginx/一堆配置文件，所以需要将所有的配置文件拷贝conf下</span></span><br><span class="line"><span class="built_in">mv</span> /Users/zhangyuhan/Work/dev-env/nginx-1.24/conf/nginx/* /Users/zhangyuhan/Work/dev-env/nginx-1.24/conf</span><br><span class="line"><span class="comment"># 删除多余的nginx空文件夹</span></span><br><span class="line"><span class="built_in">rm</span> -rf /Users/zhangyuhan/Work/dev-env/nginx-1.24/conf/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将nginx自带的两个html拷贝到自己配置的html目录下</span></span><br><span class="line">docker <span class="built_in">cp</span> e6c27ac9bc13:/usr/share/nginx/html /Users/zhangyuhan/Work/dev-env/nginx-1.24/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止并删除之前的容器</span></span><br><span class="line">docker stop nginx-1.24</span><br><span class="line">docker <span class="built_in">rm</span> nginx-1.24</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置映射目录重新启动</span></span><br><span class="line">docker run -p 80:80 --name nginx-1.24 \</span><br><span class="line">-v /Users/zhangyuhan/Work/dev-env/nginx-1.24/html:/usr/share/nginx/html \</span><br><span class="line">-v /Users/zhangyuhan/Work/dev-env/nginx-1.24/logs:/var/log/nginx \</span><br><span class="line">-v /Users/zhangyuhan/Work/dev-env/nginx-1.24/conf:/etc/nginx \</span><br><span class="line">-d nginx:1.24</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> nginx </tag>
            
            <tag> docker安装nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch通过docker在mackbook m1安装</title>
      <link href="/posts/50662.html"/>
      <url>/posts/50662.html</url>
      
        <content type="html"><![CDATA[<p>主要目的：安装elasticsearch和kibana，解决kibana无法连接elasticsearch导致server is not ready yet的问题</p><h2 id="建立docker网络els"><a href="#建立docker网络els" class="headerlink" title="建立docker网络els"></a>建立docker网络els</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建立</span></span><br><span class="line">docker network create els</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看：有name：els，成功</span></span><br><span class="line">docker network <span class="built_in">ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">12f31e2d6df1   bridge    bridge    <span class="built_in">local</span></span><br><span class="line">4e3cc13000ef   els       bridge    <span class="built_in">local</span></span><br><span class="line">e0cb50b3dee5   host      host      <span class="built_in">local</span></span><br><span class="line">18f13202e657   none      null      <span class="built_in">local</span></span><br></pre></td></tr></table></figure><h2 id="安装elasticsearch"><a href="#安装elasticsearch" class="headerlink" title="安装elasticsearch"></a>安装elasticsearch</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建立映射文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> /Users/zhangyuhan/Work/dev-env/elasticsearch-7.16.2/config</span><br><span class="line"><span class="built_in">mkdir</span> /Users/zhangyuhan/Work/dev-env/elasticsearch-7.16.2/data</span><br><span class="line"><span class="built_in">mkdir</span> /Users/zhangyuhan/Work/dev-env/elasticsearch-7.16.2/plugins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置所有ip都能访问elasticsearch</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;http.host: 0.0.0.0&quot;</span> &gt;/Users/zhangyuhan/Work/dev-env/elasticsearch-7.16.2/config/elasticsearch.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker安装</span></span><br><span class="line">docker run --name elasticsearch-7.16.2 --network els -p 9200:9200 -p 9300:9300 \</span><br><span class="line">-e  <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line">-e ES_JAVA_OPTS=<span class="string">&quot;-Xms64m -Xmx512m&quot;</span> \</span><br><span class="line">-v /Users/zhangyuhan/Work/dev-env/elasticsearch-7.16.2/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \</span><br><span class="line">-v /Users/zhangyuhan/Work/dev-env/elasticsearch-7.16.2/data:/usr/share/elasticsearch/data \</span><br><span class="line">-v /Users/zhangyuhan/Work/dev-env/elasticsearch-7.16.2/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">-d elasticsearch:7.16.2</span><br></pre></td></tr></table></figure><h2 id="安装kibana"><a href="#安装kibana" class="headerlink" title="安装kibana"></a>安装kibana</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker安装，注意：环境变量写正确的elasticsearch容器别名，因为是自定义网络，可以通过别名通信</span></span><br><span class="line">docker run --name kibana-7.16.2 --network els -e ELASTICSEARCH_HOSTS=http://elasticsearch-7.16.2:9200 -p 5601:5601 -d kibana:7.16.2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> elasticsearch </tag>
            
            <tag> elasticsearch通过docker安装（适配macbook m1） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis主从、哨兵、集群搭建</title>
      <link href="/posts/30107.html"/>
      <url>/posts/30107.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_47062656/article/details/123187627">博客参考</a></p><p>引申：如何给redis主从、哨兵模式添加认证密码</p><p>注意：如果三台服务器已经启动了主从和哨兵，那么需要先在三台服务器上关闭所有的哨兵，再在三台服务器上关闭所有的主从</p><p>服务器关闭顺序要求：先关从节点（从节点之间不分顺序），再关主节点</p><p>如果不知道哪个是主节点，可以通过redis-cli进入redis控制台输入<code>info replication</code>查看主节点的ip</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看redis服务和哨兵的进程命令：</span></span><br><span class="line">ps -ef|grep redis</span><br></pre></td></tr></table></figure><ul><li>redis服务的关闭命令如下：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-cli shutdown</span><br></pre></td></tr></table></figure><ul><li>redis哨兵的关闭命令如下</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 哨兵进程</span><br></pre></td></tr></table></figure><p>配置认证密码在上面博客配置的基础上执行如下步骤：</p><ol><li>三台服务器的redis.conf添加如下配置</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">requirepass &quot;123456&quot;</span><br><span class="line"></span><br><span class="line">masterauth &quot;123456&quot;</span><br></pre></td></tr></table></figure><ol><li>三台服务器sentinel.conf添加如下配置</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在上面博客里已经配置了</span><br><span class="line">sentinel monitor mymaster 10.13.181.97 6379 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 新增的配置，要求写在上面配置的下面</span><br><span class="line">sentinel auth-pass mymaster 123456</span><br></pre></td></tr></table></figure><ol><li>启动</li></ol><p>先按照特定顺序启动redis主从模式</p><p>先启动redis主节点redis服务</p><p>再启动redis的两台从节点（不分顺序）redis服务</p><p>都启动完成后进入主节点的redis.cli</p><p>依次执行下面的命令查看主从情况</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auth 123456</span><br><span class="line"></span><br><span class="line">info replication</span><br></pre></td></tr></table></figure><p>主从没问题后再启动三台服务器的哨兵服务（先主后从）</p><p>在任意一台服务器上查看哨兵情况</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli -p 26379 info Sentinel</span><br></pre></td></tr></table></figure><p>完成</p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> Ops </tag>
            
            <tag> redis主从 </tag>
            
            <tag> redis哨兵 </tag>
            
            <tag> redis集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis哨兵模式在springboot下的配置</title>
      <link href="/posts/2684.html"/>
      <url>/posts/2684.html</url>
      
        <content type="html"><![CDATA[<p>springboot连接单体的redis配置如下</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span></span><br></pre></td></tr></table></figure><p>但是如果是redis哨兵模式，那么上述配置会报错，无法连接redis。</p><p>正确连接redis哨兵模式在springboot中的配置如下</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Redis连接信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span>     <span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line">    <span class="attr">password:</span>   </span><br><span class="line">    <span class="comment"># timeout: 5000   # Redis超时时间（单位：毫秒）</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">master:</span> <span class="string">mymaster</span>   <span class="comment"># Sentinel主节点名称</span></span><br><span class="line">      <span class="attr">nodes:</span> <span class="number">192.168</span><span class="number">.10</span><span class="number">.11</span><span class="string">:26379,192.168.10.12:26379,192.168.10.13:26379</span>   <span class="comment"># Sentinel节点地址列表</span></span><br><span class="line">      <span class="comment"># 注意端口是26379，即哨兵模式的端口，不是6379，redis服务的端口</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> redis </tag>
            
            <tag> 哨兵 </tag>
            
            <tag> sentinel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>公网nfs配置踩坑</title>
      <link href="/posts/973.html"/>
      <url>/posts/973.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近需要迁移一个老的单体项目到私有云环境做集群，之前的上传文件都是直接存储在磁盘上，而且体积超大，而且项目架构又从单体过渡到多个实例集群。为了能够读取到之前的上传文件，采用nfs将原先服务器上存储文件的路径挂载到新的私有云环境的多个集群服务器上。网上有很多关于nfs的配置讲解，但是大多是局域网。我这里因为两个环境都是独立封闭，只通过堡垒机提供外部访问，因此需要配置公网的nfs，踩了不少坑。在这里总结一下相关经验。</p><h2 id="安装nfs"><a href="#安装nfs" class="headerlink" title="安装nfs"></a>安装nfs</h2><p>安装的过程实际上很简单。我参考的这篇博客<br><a href="http://t.csdnimg.cn/VERoB">Centos7 NFS服务的安装以及使用</a></p><p>唯一值得注意的是，私有云环境不能用yum，因此我是上传的多个rpm包来手动执行的安装，这里是参考的这篇博客<a href="http://t.csdnimg.cn/QjRAO">nfs无网络条件rpm安装</a></p><p>如果需要nfs的整合rpm包的话，可以发邮件给我</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置这里是踩坑最多的地方，内网的环境下大可以关闭防火墙，而外网环境下不可能对外暴漏所有的端口，因此要搞明白nfs到底配置那些端口开放才能让客户端成功挂载。我这里也是和同事不断的查资料，并且试错最后才成功的。👏🏻👏🏻👏🏻👏🏻👏🏻👏🏻</p><h3 id="服务端还要额外配置5个端口"><a href="#服务端还要额外配置5个端口" class="headerlink" title="服务端还要额外配置5个端口"></a>服务端还要额外配置5个端口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改</span></span><br><span class="line">vim /etc/sysconfig/nfs</span><br><span class="line"><span class="comment"># 追加以下内容</span></span><br><span class="line">MOUNTD_PORT=4001 <span class="comment">#必须 （挂载端口。也可以不在配置文件上追加，而是全文搜索该配置项，在原先的上面直接修改。或者不改，直接用默认的配置端口892，但是后续关于4001的管理都需要替换为该默认的端口）</span></span><br><span class="line">STATD_PORT=4002 <span class="comment"># 可选 （不知道干啥的）</span></span><br><span class="line">LOCKD_TCPPORT=4003 <span class="comment"># 可选（管理锁状态）</span></span><br><span class="line">LOCKD_UDPPORT=4003 <span class="comment"># 可选（管理锁状态）</span></span><br><span class="line">RQUOTAD_PORT=4004 <span class="comment"># 可选 （不知道干啥的）</span></span><br></pre></td></tr></table></figure><h3 id="服务端配置了导出路径（上面的博客里有）"><a href="#服务端配置了导出路径（上面的博客里有）" class="headerlink" title="服务端配置了导出路径（上面的博客里有）"></a>服务端配置了导出路径（上面的博客里有）</h3><p><a href="http://t.csdnimg.cn/VERoB">Centos7 NFS服务的安装以及使用</a></p><h3 id="服务端，客户端开启nfs"><a href="#服务端，客户端开启nfs" class="headerlink" title="服务端，客户端开启nfs"></a>服务端，客户端开启nfs</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> rpcbind.service</span><br><span class="line">systemctl <span class="built_in">enable</span> nfs-server.service</span><br><span class="line">systemctl start rpcbind.service</span><br><span class="line">systemctl start nfs-server.service</span><br></pre></td></tr></table></figure><h3 id="服务端的堡垒机配置开放端口"><a href="#服务端的堡垒机配置开放端口" class="headerlink" title="服务端的堡垒机配置开放端口"></a>服务端的堡垒机配置开放端口</h3><ul><li>PortMap 111(tcp,udp)</li><li>业务监听端口2049(tcp,udp)</li><li>挂载的监听端口2050(tcp,udp)</li><li>挂载端口4001（tcp,udp）</li><li>上面额外配置剩下的4个建议也都开了</li></ul><h3 id="客户端检查rpc状态"><a href="#客户端检查rpc状态" class="headerlink" title="客户端检查rpc状态"></a>客户端检查rpc状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpcinfo -p 10.10.52.140</span><br></pre></td></tr></table></figure><p>出现以下结果证明没问题</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">program vers proto   port</span><br><span class="line">100000    4   tcp    111  rpcbind</span><br><span class="line">100000    3   tcp    111  rpcbind</span><br><span class="line">100000    2   tcp    111  rpcbind</span><br><span class="line">100000    4   udp    111  rpcbind</span><br><span class="line">100000    3   udp    111  rpcbind</span><br><span class="line">100000    2   udp    111  rpcbind</span><br><span class="line">100024    1   udp  33697  status</span><br><span class="line">100024    1   tcp  43215  status</span><br><span class="line">100003    4   tcp   2049  nfs</span><br><span class="line">100003    4   udp   2049  nfs</span><br><span class="line">100005    1   udp   4001  mountd</span><br><span class="line">100005    1   tcp   4001  mountd</span><br><span class="line">100005    2   udp   4001  mountd</span><br><span class="line">100005    2   tcp   4001  mountd</span><br><span class="line">100005    3   udp   4001  mountd</span><br><span class="line">100005    3   tcp   4001  mountd</span><br><span class="line">100003    3   tcp   2049  nfs</span><br><span class="line">100227    3   tcp   2049  nfs_acl</span><br><span class="line">100003    3   udp   2049  nfs</span><br><span class="line">100227    3   udp   2049  nfs_acl</span><br><span class="line">100021    1   udp  32769  nlockmgr</span><br><span class="line">100021    3   udp  32769  nlockmgr</span><br><span class="line">100021    4   udp  32769  nlockmgr</span><br><span class="line">100021    1   tcp  32803  nlockmgr</span><br><span class="line">100021    3   tcp  32803  nlockmgr</span><br><span class="line">100021    4   tcp  32803  nlockmgr</span><br></pre></td></tr></table></figure><h3 id="客户端检查目录共享状态"><a href="#客户端检查目录共享状态" class="headerlink" title="客户端检查目录共享状态"></a>客户端检查目录共享状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">showmount -e 10.10.52.140</span><br></pre></td></tr></table></figure><p>出现以下结果证明没问题</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Exports list on 10.10.52.140:</span><br><span class="line">/home/dxjc                          *</span><br><span class="line">/home/cgjc                          *</span><br><span class="line">/data/zdmt                          *</span><br><span class="line">/data/hdt3                          *</span><br><span class="line">/data/hdt2                          *</span><br><span class="line">/data/hdt                           *</span><br><span class="line">/data/gxjcx                         *</span><br><span class="line">/data/gxjcw                         *</span><br><span class="line">/data/gxgc1                         *</span><br><span class="line">/data/gxgc                          *</span><br><span class="line">/data/gwxj4                         *</span><br><span class="line">/data/gwxj2                         *</span><br><span class="line">/data/gwxj                          *</span><br><span class="line">/data/gwimage                       *</span><br><span class="line">/data/gsgc1                         *</span><br><span class="line">/data/gsgc                          *</span><br></pre></td></tr></table></figure><p>如果报错，那么就检查还有哪些端口未正确开放</p><h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /nfs/gwxj</span><br><span class="line"></span><br><span class="line">mount -t nfs -o nolock,vers=3 10.10.52.140:/data/hdt2 /nfs/gwxj</span><br></pre></td></tr></table></figure><p>成功，可以在客户端和服务端分别创建修改文件测试一下</p><h3 id="端口替换"><a href="#端口替换" class="headerlink" title="端口替换"></a>端口替换</h3><p>如果不想使用默认的端口2049，可以自己指定端口。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/nfs</span><br></pre></td></tr></table></figure><p>在最后追加一行</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">RPCNFSDARGS=&quot;-p 12049&quot;</span><br></pre></td></tr></table></figure><p>然后依次重启rpc和nfs</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart rpcbind.service</span><br><span class="line">systemctl restart nfs-server.service</span><br></pre></td></tr></table></figure><p>修改堡垒机的端口映射，注意，内网和公网端口必须一致，否则挂载不上<br>内网12049：公网12049</p><p>客户端挂载</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount -t nfs -o nolock,vers=3,port=12049 10.10.52.140:/data/hdt2 /data/hdt2 </span><br></pre></td></tr></table></figure><p>成功だぜ、(o゜▽゜)o☆[BINGO!]</p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> nfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysqldump定时备份</title>
      <link href="/posts/29320.html"/>
      <url>/posts/29320.html</url>
      
        <content type="html"><![CDATA[<h2 id="创建脚本"><a href="#创建脚本" class="headerlink" title="创建脚本"></a>创建脚本</h2><p>创建一个新的Shell脚本文件，比如backup_mysql.sh</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL数据库连接信息</span></span><br><span class="line">DB_USER=<span class="string">&quot;your_username&quot;</span></span><br><span class="line">DB_PASSWORD=<span class="string">&quot;your_password&quot;</span></span><br><span class="line">DB_NAME=<span class="string">&quot;your_database&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份保存路径</span></span><br><span class="line">BACKUP_DIR=<span class="string">&quot;/path/to/backup/directory&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建备份文件名，格式为：数据库名_年月日时分秒.sql</span></span><br><span class="line">BACKUP_FILE=<span class="string">&quot;<span class="variable">$BACKUP_DIR</span>/$DB_NAME_<span class="subst">$(date +%Y%m%d%H%M%S)</span>.sql&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用mysqldump命令备份数据库</span></span><br><span class="line">mysqldump -u<span class="variable">$DB_USER</span> -p<span class="variable">$DB_PASSWORD</span> <span class="variable">$DB_NAME</span> &gt; <span class="variable">$BACKUP_FILE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查备份是否成功</span></span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;MySQL backup completed successfully. Backup saved to: <span class="variable">$BACKUP_FILE</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Error: MySQL backup failed.&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>请注意以下事项：</p><ul><li><p>替换your_username、your_password和your_database为实际的MySQL用户名、密码和数据库名。</p></li><li><p>修改/path/to/backup/directory为实际用于保存备份文件的目录路径。</p></li></ul><h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><p>保存脚本文件后，给予执行权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x backup_mysql.sh</span><br></pre></td></tr></table></figure><h2 id="手动执行测试"><a href="#手动执行测试" class="headerlink" title="手动执行测试"></a>手动执行测试</h2><p>手动运行该脚本手动执行备份</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh backup_mysql.sh</span><br></pre></td></tr></table></figure><h2 id="自动备份"><a href="#自动备份" class="headerlink" title="自动备份"></a>自动备份</h2><p>为了实现自动备份，你可以将脚本添加到定时任务（cron job）中。</p><p>打开定时任务编辑器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>然后添加一行，例如每天凌晨3点执行备份</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0 3 * * * /path/to/backup_mysql.sh</span><br></pre></td></tr></table></figure><p>保存并退出编辑器。现在，脚本将每天在指定的时间执行，自动备份你的MySQL数据库。</p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> MySql </tag>
            
            <tag> mysqldump定时备份 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js获取当前页面的地址</title>
      <link href="/posts/15931.html"/>
      <url>/posts/15931.html</url>
      
        <content type="html"><![CDATA[<p>例1</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 地址：http://www.php230.com/fisker/post/0703/window.location.html?ver=1.0&amp;id=6#imhere</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">host</span> <span class="comment">// URL 的主机部分:www.php230.com，如果没有域名会返回192.168.0.1:8080</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">protocol</span><span class="comment">// URL 的协议部分:http:</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">pathname</span><span class="comment">// URL 的路径部分(就是文件地址):/fisker/post/0703/window.location.html</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span><span class="comment">// 查询(参数)部分:?ver=1.0&amp;id=6</span></span><br></pre></td></tr></table></figure><p>例2</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>     → <span class="string">&#x27;https://www.jianshu.com/search?q=JS#comments&#x27;</span></span><br><span class="line">               .<span class="property">origin</span>   → <span class="string">&#x27;https://www.jianshu.com&#x27;</span></span><br><span class="line">               .<span class="property">protocol</span> → <span class="string">&#x27;https:&#x27;</span></span><br><span class="line">               .<span class="property">host</span>     → <span class="string">&#x27;www.jianshu.com&#x27;</span></span><br><span class="line">               .<span class="property">hostname</span> → <span class="string">&#x27;www.jianshu.com&#x27;</span></span><br><span class="line">               .<span class="property">port</span>     → <span class="string">&#x27;&#x27;</span></span><br><span class="line">               .<span class="property">pathname</span> → <span class="string">&#x27;/search/&#x27;</span></span><br><span class="line">               .<span class="property">search</span>   → <span class="string">&#x27;?q=JS&#x27;</span></span><br><span class="line">               .<span class="property">hash</span>     → <span class="string">&#x27;#comments&#x27;</span></span><br></pre></td></tr></table></figure><p>对于常用的地址如：<code>http://192.168.10.235:8001/dev</code><br>可以用如下方法得到</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getCurrentUrl</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> protocol = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">protocol</span></span><br><span class="line">  <span class="keyword">let</span> host = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">host</span>;</span><br><span class="line">  <span class="keyword">let</span> url = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">pathname</span>;</span><br><span class="line">  <span class="keyword">let</span> webApp = url.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)[<span class="number">1</span>];<span class="comment">// 这里后台有context-path的话就组合，没有的可以不要；如果前台定义了，可以从环境变量里面取</span></span><br><span class="line">  <span class="keyword">let</span> urlPrefix = protocol +<span class="string">&quot;//&quot;</span> + host + <span class="string">&quot;/&quot;</span> + webApp;</span><br><span class="line">  <span class="keyword">return</span> urlPrefix;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/149523091">参考链接</a></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> JavaScript </tag>
            
            <tag> js获取当前页面的地址 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态sql常用总结</title>
      <link href="/posts/13227.html"/>
      <url>/posts/13227.html</url>
      
        <content type="html"><![CDATA[<p>动态 SQL 是 MyBatis 的强大特性之一。在 JDBC 或其它类似的框架中，开发人员通常需要手动拼接 SQL 语句。根据不同的条件拼接 SQL 语句是一件极其痛苦的工作。例如，拼接时要确保添加了必要的空格，还要注意去掉列表最后一个列名的逗号。而动态 SQL 恰好解决了这一问题，可以根据场景动态的构建查询。</p><p>动态SQL（code that is executed dynamically），它一般是根据用户输入或外部条件动态组合的SQL语句块。动态SQL能灵活的发挥SQL强大的功能、方便的解决一些其它方法难以解决的问题。相信使用过动态SQL的人都能体会到它带来的便利，然而动态SQL有时候在执行性能 (效率)上面不如静态SQL，而且使用不恰当，往往会在安全方面存在隐患 (SQL 注入式攻击)。</p><h2 id="MyBatis动态-sql-的特性"><a href="#MyBatis动态-sql-的特性" class="headerlink" title="MyBatis动态 sql 的特性"></a>MyBatis动态 sql 的特性</h2><h3 id="Mybatis-动态-sql-是做什么的"><a href="#Mybatis-动态-sql-是做什么的" class="headerlink" title="Mybatis 动态 sql 是做什么的?"></a>Mybatis 动态 sql 是做什么的?</h3><p>Mybatis 动态 sql 可以让我们在 Xml 映射文件内，以标签的形式编写动态 sql，完成逻辑判断和动态拼接 sql 的功能。</p><h3 id="Mybatis-的-9-种-动-态-sql-标-签有哪些？"><a href="#Mybatis-的-9-种-动-态-sql-标-签有哪些？" class="headerlink" title="Mybatis 的 9 种 动 态 sql 标 签有哪些？"></a>Mybatis 的 9 种 动 态 sql 标 签有哪些？</h3><p><img src="https://s2.loli.net/2023/09/20/o4BALtpPHOEdhTl.png" alt="image.png"></p><h3 id="动态-sql-的执行原理？"><a href="#动态-sql-的执行原理？" class="headerlink" title="动态 sql 的执行原理？"></a>动态 sql 的执行原理？</h3><p>原理为：使用 OGNL 从 sql 参数对象中计算表达式的值，根据表达式的值动态拼接 sql，以此来完成动态 sql 的功能。</p><h2 id="MyBatis标签"><a href="#MyBatis标签" class="headerlink" title="MyBatis标签"></a>MyBatis标签</h2><h3 id="if标签：条件判断"><a href="#if标签：条件判断" class="headerlink" title="if标签：条件判断"></a>if标签：条件判断</h3><p>MyBatis if 类似于 Java 中的 if 语句，是 MyBatis 中最常用的判断语句。使用 if 标签可以节省许多拼接 SQL 的工作，把精力集中在 XML 的维护上。</p><p>if 语句使用方法简单，常常与 test 属性联合使用。语法如下:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;判断条件&quot;</span>&gt;</span>    SQL语句<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="不使用动态sql"><a href="#不使用动态sql" class="headerlink" title="不使用动态sql"></a>不使用动态sql</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserByUsernameAndSex&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.ys.po.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里和普通的sql 查询语句差不多，对于只有一个参数，后面的 #&#123;id&#125;表示占位符，里面          不一定要写id,</span></span><br><span class="line"><span class="comment">         写啥都可以，但是不要空着，如果有多个参数则必须写pojo类里面的属性 --&gt;</span></span><br><span class="line">    select * from user where username=#&#123;username&#125; and sex=#&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用动态sql"><a href="#使用动态sql" class="headerlink" title="使用动态sql"></a>使用动态sql</h4><p>上面的查询语句，我们可以发现，如果 #{username} 为空，那么查询结果也是空，如何解决这个问题呢？使用 if 来判断，可多个 if 语句同时使用。</p><p>以下语句表示为可以按照网站名称（name）或者网址（url）进行模糊查询。如果您不输入名称或网址，则返回所有的网站记录。但是，如果你传递了任意一个参数，它就会返回与给定参数相匹配的记录。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllWebsite&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;myResult&quot;</span>&gt;</span>  </span><br><span class="line">    select id,name,url from website </span><br><span class="line">    where 1=1    </span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span>        </span><br><span class="line">       AND name like #&#123;name&#125;   </span><br><span class="line">   <span class="tag">&lt;/<span class="name">if</span>&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;url!= null&quot;</span>&gt;</span>        </span><br><span class="line">       AND url like #&#123;url&#125;    </span><br><span class="line">   <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="where-if标签"><a href="#where-if标签" class="headerlink" title="where+if标签"></a>where+if标签</h3><p>where、if同时使用可以进行查询、模糊查询</p><p>注意，<code>&lt;if&gt;</code>失败后， <code>&lt;where&gt;</code> 关键字只会去掉库表字段赋值前面的and，不会去掉语句后面的and关键字，即注意，<code>&lt;where&gt;</code> 只会去掉<code>&lt;if&gt;</code> 语句中的最开始的and关键字。所以下面的形式是不可取的</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findQuery&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectvp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sacc != null&quot;</span>&gt;</span></span><br><span class="line">            sacc like concat(&#x27;%&#x27; #&#123;sacc&#125; &#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sname != null&quot;</span>&gt;</span></span><br><span class="line">            AND sname like concat(&#x27;%&#x27; #&#123;sname&#125; &#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null&quot;</span>&gt;</span></span><br><span class="line">            AND sex=#&#123;sex&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;phone != null&quot;</span>&gt;</span></span><br><span class="line">            AND phone=#&#123;phone&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个“where”标签会知道如果它包含的标签中有返回值的话，它就插入一个‘where’。此外，如果标签返回的内容是以AND 或OR 开头的，则它会剔除掉。</p><h3 id="set标签"><a href="#set标签" class="headerlink" title="set标签"></a>set标签</h3><p>set可以用来修改</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;upd&quot;</span>&gt;</span></span><br><span class="line">    update student</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sname != null&quot;</span>&gt;</span>sname=#&#123;sname&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;spwd != null&quot;</span>&gt;</span>spwd=#&#123;spwd&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null&quot;</span>&gt;</span>sex=#&#123;sex&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;phone != null&quot;</span>&gt;</span>phone=#&#123;phone&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where sid=#&#123;sid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="choose-when-otherwise-语句"><a href="#choose-when-otherwise-语句" class="headerlink" title="choose(when,otherwise) 语句"></a>choose(when,otherwise) 语句</h3><p>有时候，我们不想用到所有的查询条件，只想选择其中的一个，查询条件有一个满足即可，使用 choose 标签可以解决此类问题，类似于 Java 的 switch 语句</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.ys.po.User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.ys.po.User&quot;</span>&gt;</span></span><br><span class="line">      select * from user</span><br><span class="line">      <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;id !=&#x27;&#x27; and id != null&quot;</span>&gt;</span></span><br><span class="line">                  id=#&#123;id&#125;</span><br><span class="line">              <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;username !=&#x27;&#x27; and username != null&quot;</span>&gt;</span></span><br><span class="line">                  and username=#&#123;username&#125;</span><br><span class="line">              <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                  and sex=#&#123;sex&#125;</span><br><span class="line">              <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也就是说，这里我们有三个条件，id、username、sex，只能选择一个作为查询条件</p><ul><li>如果 id 不为空，那么查询语句为：select * from user where id=?</li><li>如果 id 为空，那么看username 是否为空，如果不为空，那么语句为 select * from user where username=?;</li><li>如果 username 为空，那么查询语句为 select * from user where sex=?</li></ul><h3 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h3><p>trim标记是一个格式化的标记，可以完成set或者是where标记的功能</p><h4 id="用-trim-改写上面第二点的-if-where-语句"><a href="#用-trim-改写上面第二点的-if-where-语句" class="headerlink" title="用 trim 改写上面第二点的 if+where 语句"></a>用 trim 改写上面第二点的 if+where 语句</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserByUsernameAndSex&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.ys.po.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="comment">&lt;!-- &lt;where&gt;</span></span><br><span class="line"><span class="comment">        &lt;if test=&quot;username != null&quot;&gt;</span></span><br><span class="line"><span class="comment">           username=#&#123;username&#125;</span></span><br><span class="line"><span class="comment">        &lt;/if&gt;</span></span><br><span class="line"><span class="comment">         </span></span><br><span class="line"><span class="comment">        &lt;if test=&quot;username != null&quot;&gt;</span></span><br><span class="line"><span class="comment">           and sex=#&#123;sex&#125;</span></span><br><span class="line"><span class="comment">        &lt;/if&gt;</span></span><br><span class="line"><span class="comment">    &lt;/where&gt;  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;and | or&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null&quot;</span>&gt;</span></span><br><span class="line">           and username=#&#123;username&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null&quot;</span>&gt;</span></span><br><span class="line">           and sex=#&#123;sex&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>prefix：前缀</li><li>prefixoverride：去掉第一个and或者是or</li></ul><h4 id="用-trim-改写上面第三点的-if-set-语句"><a href="#用-trim-改写上面第三点的-if-set-语句" class="headerlink" title="用 trim 改写上面第三点的 if+set 语句"></a>用 trim 改写上面第三点的 if+set 语句</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据 id 更新 user 表的数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.ys.po.User&quot;</span>&gt;</span></span><br><span class="line">    update user u</span><br><span class="line">        <span class="comment">&lt;!-- &lt;set&gt;</span></span><br><span class="line"><span class="comment">            &lt;if test=&quot;username != null and username != &#x27;&#x27;&quot;&gt;</span></span><br><span class="line"><span class="comment">                u.username = #&#123;username&#125;,</span></span><br><span class="line"><span class="comment">            &lt;/if&gt;</span></span><br><span class="line"><span class="comment">            &lt;if test=&quot;sex != null and sex != &#x27;&#x27;&quot;&gt;</span></span><br><span class="line"><span class="comment">                u.sex = #&#123;sex&#125;</span></span><br><span class="line"><span class="comment">            &lt;/if&gt;</span></span><br><span class="line"><span class="comment">        &lt;/set&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;set&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null and username != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                u.username = #&#123;username&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                u.sex = #&#123;sex&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">     where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>suffix：后缀</li><li>suffixoverride：去掉最后一个逗号（也可以是其他的标记，就像是上面前缀中的and一样）</li></ul><h4 id="trim-if同时使用可以实现插入功能"><a href="#trim-if同时使用可以实现插入功能" class="headerlink" title="trim+if同时使用可以实现插入功能"></a>trim+if同时使用可以实现插入功能</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">    insert  into student</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;(&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;)&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sname != null&quot;</span>&gt;</span>sname,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;spwd != null&quot;</span>&gt;</span>spwd,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null&quot;</span>&gt;</span>sex,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;phone != null&quot;</span>&gt;</span>phone,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;values (&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;)&quot;</span>  <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sname != null&quot;</span>&gt;</span>#&#123;sname&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;spwd != null&quot;</span>&gt;</span>#&#123;spwd&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null&quot;</span>&gt;</span>#&#123;sex&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;phone != null&quot;</span>&gt;</span>#&#123;phone&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>foreach是用来对集合的遍历，这个和Java中的功能很类似。通常处理SQL中的in语句。</p><p>foreach 元素的功能非常强大，它允许你指定一个集合，声明可以在元素体内使用的集合项（item）和索引（index）变量。它也允许你指定开头与结尾的字符串以及集合项迭代之间的分隔符。这个元素也不会错误地添加多余的分隔符</p><p>你可以将任何可迭代对象（如 List、Set 等）、Map 对象或者数组对象作为集合参数传递给 foreach。当使用可迭代对象或者数组时，index 是当前迭代的序号，item 的值是本次迭代获取到的元素。当使用 Map 对象（或者 Map.Entry 对象的集合）时，index 是键，item 是值。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//批量查询</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Integer&quot;</span>&gt;</span></span><br><span class="line">    select  *  from  student WHERE sid in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span>  <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;ids&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">//批量删除</span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;del&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;Integer&quot;</span>&gt;</span></span><br><span class="line">    delete  from  student  where  sid in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span>  <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;ids&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h3><p>在实际开发中会遇到许多相同的SQL，比如根据某个条件筛选，这个筛选很多地方都能用到，我们可以将其抽取出来成为一个公用的部分，这样修改也方便，一旦出现了错误，只需要改这一处便能处处生效了，此时就用到了<code>&lt;sql&gt;</code>这个标签了。</p><p>当多种类型的查询语句的查询字段或者查询条件相同时，可以将其定义为常量，方便调用。为求<code>&lt;select&gt;</code>结构清晰也可将 sql 语句分解。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;selectvp&quot;</span>&gt;</span></span><br><span class="line">    select  *  from  student</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><p>这个标签和<code>&lt;sql&gt;</code>是天仙配，是共生的，include用于引用sql标签定义的常量。比如引用上面sql标签定义的常量</p><p>refid这个属性就是指定<code>&lt;sql&gt;</code>标签中的id值（唯一标识）</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findbyid&quot;</span>  <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectvp&quot;</span>/&gt;</span></span><br><span class="line">    WHERE 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sid != null&quot;</span>&gt;</span></span><br><span class="line">        AND sid like #&#123;sid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="引用其他XML中的SQL片段"><a href="#引用其他XML中的SQL片段" class="headerlink" title="引用其他XML中的SQL片段"></a>引用其他XML中的SQL片段</h3><p>比如你在com.xxx.dao.xxMapper这个Mapper的XML中定义了一个SQL片段如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;Base_Column_List&quot;</span>&gt;</span> ID,MAJOR,BIRTHDAY,AGE,NAME,HOBBY<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时我在com.xxx.dao.PatinetMapper中的XML文件中需要引用，如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;com.xxx.dao.xxMapper.Base_Column_List&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="整合案例"><a href="#整合案例" class="headerlink" title="整合案例"></a>整合案例</h3><p>xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.yzx.mapper.StuMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;selectvp&quot;</span>&gt;</span></span><br><span class="line">        select  *  from  student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;find&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectvp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findbyid&quot;</span>  <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectvp&quot;</span>/&gt;</span></span><br><span class="line">        WHERE 1=1</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sid != null&quot;</span>&gt;</span></span><br><span class="line">            AND sid like #&#123;sid&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findQuery&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectvp&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sacc != null&quot;</span>&gt;</span></span><br><span class="line">                    sacc like concat(&#x27;%&#x27; #&#123;sacc&#125; &#x27;%&#x27;)</span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sname != null&quot;</span>&gt;</span></span><br><span class="line">                    AND sname like concat(&#x27;%&#x27; #&#123;sname&#125; &#x27;%&#x27;)</span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null&quot;</span>&gt;</span></span><br><span class="line">                    AND sex=#&#123;sex&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;phone != null&quot;</span>&gt;</span></span><br><span class="line">                    AND phone=#&#123;phone&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;upd&quot;</span>&gt;</span></span><br><span class="line">        update student</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sname != null&quot;</span>&gt;</span>sname=#&#123;sname&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;spwd != null&quot;</span>&gt;</span>spwd=#&#123;spwd&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null&quot;</span>&gt;</span>sex=#&#123;sex&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;phone != null&quot;</span>&gt;</span>phone=#&#123;phone&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        sid=#&#123;sid&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where sid=#&#123;sid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">        insert  into student</span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;(&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;)&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sname != null&quot;</span>&gt;</span>sname,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;spwd != null&quot;</span>&gt;</span>spwd,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null&quot;</span>&gt;</span>sex,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;phone != null&quot;</span>&gt;</span>phone,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;values (&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;)&quot;</span>  <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sname != null&quot;</span>&gt;</span>#&#123;sname&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;spwd != null&quot;</span>&gt;</span>#&#123;spwd&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null&quot;</span>&gt;</span>#&#123;sex&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;phone != null&quot;</span>&gt;</span>#&#123;phone&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Integer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectvp&quot;</span>/&gt;</span> WHERE sid in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span>  <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">            #&#123;ids&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;del&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;Integer&quot;</span>&gt;</span></span><br><span class="line">        delete  from  student  where  sid in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span>  <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">            #&#123;ids&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yzx.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yzx.entity.Student;</span><br><span class="line"><span class="keyword">import</span> com.yzx.mapper.StuMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StuTest</span> &#123;</span><br><span class="line">    SqlSession sqlSession=<span class="literal">null</span>;</span><br><span class="line">    InputStream is=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span>   <span class="keyword">void</span>  <span class="title function_">before</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1.读取核心配置文件</span></span><br><span class="line">        is= Resources.getResourceAsStream(<span class="string">&quot;sqlMapperConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2.拿到工厂构建类</span></span><br><span class="line">        SqlSessionFactoryBuilder sqlSessionFactoryBuilder=<span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="comment">//3.拿到具体工厂</span></span><br><span class="line">        SqlSessionFactory build=sqlSessionFactoryBuilder.build(is);</span><br><span class="line">        <span class="comment">//4.拿到session</span></span><br><span class="line">        sqlSession = build.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//7，提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">//8.关闭资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">if</span>(is!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                is.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">find</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//5.获取具体的mapper接口</span></span><br><span class="line">        StuMapper mapper=sqlSession.getMapper(StuMapper.class);</span><br><span class="line">        <span class="comment">//6.调用执行</span></span><br><span class="line">        List&lt;Student&gt; list=mapper.find();</span><br><span class="line">        list.forEach(a-&gt; System.out.println(a));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询单个</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">findbyid</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        StuMapper mapper=sqlSession.getMapper(StuMapper.class);</span><br><span class="line">        List&lt;Student&gt; list=mapper.findbyid(<span class="number">2</span>);</span><br><span class="line">        list.forEach(a-&gt; System.out.println(a));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//模糊查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">findQuery</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        StuMapper mapper=sqlSession.getMapper(StuMapper.class);</span><br><span class="line"></span><br><span class="line">        Student  stu=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        stu.setSname(<span class="string">&quot;小&quot;</span>);</span><br><span class="line">        stu.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        List&lt;Student&gt; list=mapper.findQuery(stu);</span><br><span class="line">        list.forEach(a-&gt; System.out.println(a));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">upd</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        StuMapper mapper=sqlSession.getMapper(StuMapper.class);</span><br><span class="line"></span><br><span class="line">        Student  stu=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        stu.setSid(<span class="number">3</span>);</span><br><span class="line">        stu.setSname(<span class="string">&quot;小若&quot;</span>);</span><br><span class="line">        stu.setSex(<span class="string">&quot;人妖&quot;</span>);</span><br><span class="line">        <span class="type">int</span> i=mapper.upd(stu);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改了&quot;</span>+i+<span class="string">&quot;条数据&quot;</span>+<span class="string">&quot;  &quot;</span>+stu.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        StuMapper mapper=sqlSession.getMapper(StuMapper.class);</span><br><span class="line"></span><br><span class="line">        Student  stu=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        stu.setSname(<span class="string">&quot;小贺&quot;</span>);</span><br><span class="line">        stu.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        stu.setPhone(<span class="string">&quot;99999999&quot;</span>);</span><br><span class="line">        <span class="type">int</span> i=mapper.add(stu);</span><br><span class="line">        System.out.println(<span class="string">&quot;添加了&quot;</span>+i+<span class="string">&quot;条数据&quot;</span>+<span class="string">&quot;  &quot;</span>+stu.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//批量操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">findAll</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        StuMapper mapper=sqlSession.getMapper(StuMapper.class);</span><br><span class="line">        Integer[] i=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        List&lt;Student&gt; list=mapper.findAll(i);</span><br><span class="line">        list.forEach(a-&gt; System.out.println(a));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//批量操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//批量删除</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">del</span><span class="params">()</span>&#123;</span><br><span class="line">        StuMapper mapper=sqlSession.getMapper(StuMapper.class);</span><br><span class="line">        Integer[] i=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="type">int</span> i1=mapper.del(i);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除了&quot;</span>+i1+<span class="string">&quot;条数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis关联查询"><a href="#MyBatis关联查询" class="headerlink" title="MyBatis关联查询"></a>MyBatis关联查询</h2><h3 id="MyBatis一对多关联查询"><a href="#MyBatis一对多关联查询" class="headerlink" title="MyBatis一对多关联查询"></a>MyBatis一对多关联查询</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--一对多--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;myStudent1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;student1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sage&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sage&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tage&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tage&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--一对多--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;find1&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;myStudent1&quot;</span>&gt;</span></span><br><span class="line">    select  *  from  student1  s  left  join  teacher  t  on s.sid=t.sid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="MyBatis一对一关联查询"><a href="#MyBatis一对一关联查询" class="headerlink" title="MyBatis一对一关联查询"></a>MyBatis一对一关联查询</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--一对一--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;myTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tage&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tage&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;student1&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Student1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sage&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sage&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--一对一--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;find2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;myTeacher&quot;</span>&gt;</span></span><br><span class="line">select  *  from  teacher  t right join student1 s on  t.sid=s.sid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="MyBatis多对多关联查询"><a href="#MyBatis多对多关联查询" class="headerlink" title="MyBatis多对多关联查询"></a>MyBatis多对多关联查询</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--多对多 以谁为主表查询的时候，主表约等于1的一方,另一方相当于多的一方--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;find3&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;myStudent1&quot;</span>&gt;</span></span><br><span class="line">    select  *  from  student1 s  left join relevance r on  s.sid=r.sid  left join teacher t on  r.tid=t.tid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mybatis </tag>
            
            <tag> 动态sql常用总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>event.path过期</title>
      <link href="/posts/65131.html"/>
      <url>/posts/65131.html</url>
      
        <content type="html"><![CDATA[<p>起因是 chromium 开发团队认为 Event.path 属于非标准 API，会导致 Firefox 等其他浏览器的兼容性问题，于是他们决定将其删除。<br>目前这个变更在 chrome 108 属于灰度阶段，在chrome 109 上会全面应用，webview 则是从 109 版本开始逐步禁用</p><p>在chrome浏览器中，event.path表示触发Dom事件的元素一路冒泡到window的所有元素<br>但是在在Firefox、Safari、以及Chrome dev浏览器中，event中并没有path这个属性。在Firefox、Safari、以及Chrome dev浏览器中可以通过<code>event.composedpath()</code>获取</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 旧的写法</span></span><br><span class="line"><span class="keyword">let</span> evt = event || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line"><span class="keyword">let</span> path = evt.<span class="property">path</span> <span class="comment">// 此时path为undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新的写法(兼容所有主流浏览器)</span></span><br><span class="line"><span class="keyword">var</span> evt = event || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line"><span class="keyword">let</span> path = evt.<span class="property">path</span> || (evt.<span class="property">composedPath</span> &amp;&amp; evt.<span class="title function_">composedPath</span>())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> browseAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> browseAPI </tag>
            
            <tag> event.path过期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GROUP_CONCAT()函数的说明</title>
      <link href="/posts/4112.html"/>
      <url>/posts/4112.html</url>
      
        <content type="html"><![CDATA[<p>首先我们来建立一个测试的表和数据，代码如下</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">per</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `pname` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `page` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `psex` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `paddr` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">13</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">per</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;王小华&#x27;</span>, <span class="string">&#x27;30&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">per</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;张文军&#x27;</span>, <span class="string">&#x27;24&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">per</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;罗敏&#x27;</span>, <span class="string">&#x27;19&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;重庆&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">per</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;张建新&#x27;</span>, <span class="string">&#x27;32&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;重庆&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">per</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;刘婷&#x27;</span>, <span class="string">&#x27;26&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;成都&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">per</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;刘小亚&#x27;</span>, <span class="string">&#x27;22&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;重庆&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">per</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;王建军&#x27;</span>, <span class="string">&#x27;22&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;贵州&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">per</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;谢涛&#x27;</span>, <span class="string">&#x27;28&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;海南&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">per</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;张良&#x27;</span>, <span class="string">&#x27;26&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">per</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;黎记&#x27;</span>, <span class="string">&#x27;17&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;贵阳&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">per</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;赵小丽&#x27;</span>, <span class="string">&#x27;26&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">per</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;12&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="concat-函数"><a href="#concat-函数" class="headerlink" title="concat()函数"></a>concat()函数</h2><p>首先我们先学一个函数叫concat()函数, 这个函数非常简单</p><p>功能：就是将多个字符串连接成一个字符串</p><p>语法：concat(字符串1, 字符串2,…)    字符串参数用逗号隔开!</p><p>返回值: 结果为连接参数产生的字符串，如果有任何一个参数为null，则返回值为null。</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>这有一张表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----+-----------+------+------+--------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> pname     <span class="operator">|</span> page <span class="operator">|</span> psex <span class="operator">|</span> paddr  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+------+------+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 王小华    <span class="operator">|</span>   <span class="number">30</span> <span class="operator">|</span> 男   <span class="operator">|</span> 北京   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 张文军    <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span> 男   <span class="operator">|</span> 上海   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 罗敏      <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span> 女   <span class="operator">|</span> 重庆   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 张建新    <span class="operator">|</span>   <span class="number">32</span> <span class="operator">|</span> 男   <span class="operator">|</span> 重庆   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> 刘婷      <span class="operator">|</span>   <span class="number">26</span> <span class="operator">|</span> 女   <span class="operator">|</span> 成都   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> 刘小亚    <span class="operator">|</span>   <span class="number">22</span> <span class="operator">|</span> 女   <span class="operator">|</span> 重庆   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> 王建军    <span class="operator">|</span>   <span class="number">22</span> <span class="operator">|</span> 男   <span class="operator">|</span> 贵州   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> 谢涛      <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span> 男   <span class="operator">|</span> 海南   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">9</span> <span class="operator">|</span> 张良      <span class="operator">|</span>   <span class="number">26</span> <span class="operator">|</span> 男   <span class="operator">|</span> 上海   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span> 黎记      <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span> 男   <span class="operator">|</span> 贵阳   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">11</span> <span class="operator">|</span> 赵小丽    <span class="operator">|</span>   <span class="number">26</span> <span class="operator">|</span> 女   <span class="operator">|</span> 上海   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">12</span> <span class="operator">|</span> 张三      <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> 女   <span class="operator">|</span> 北京   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+------+------+--------+</span></span><br></pre></td></tr></table></figure><p>执行如下语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> concat(pname,page,psex) <span class="keyword">from</span> <span class="keyword">per</span>;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> concat(pname,page,psex) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> 王小华<span class="number">30</span>男              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 张文军<span class="number">24</span>男              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 罗敏<span class="number">19</span>女                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 张建新<span class="number">32</span>男              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 刘婷<span class="number">26</span>女                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 刘小亚<span class="number">22</span>女              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 王建军<span class="number">22</span>男              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 谢涛<span class="number">28</span>男                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 张良<span class="number">26</span>男                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 黎记<span class="number">17</span>男                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 赵小丽<span class="number">26</span>女              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>                    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br></pre></td></tr></table></figure><p> 为什么会有一条是NULL呢?  </p><p> 那是因为第12条数据中的page字段为空，根据有一个字段为空结果就为NULL的理论推导出 查询出的最后一条记录为NULL!</p><p> 结果虽然连在一起显示了 但是彼此没有分隔符，因此衍生出来的 <code>concat_ws()</code>函数</p><h2 id="concat-ws-函数"><a href="#concat-ws-函数" class="headerlink" title="concat_ws()函数"></a>concat_ws()函数</h2><p>功能：concat_ws()函数 和 concat()函数一样，也是将多个字符串连接成一个字符串，但是可以指定分隔符!</p><p>语法：concat_ws(separator, str1, str2, …) 第一个参数指定分隔符, 后面依旧是字符串</p><p>separator就是分隔符字符!</p><p>需要注意的是分隔符不能为null，如果为null，则返回结果为null。</p><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> concat_ws(<span class="string">&#x27;,&#x27;</span>,pname,page,psex) <span class="keyword">from</span> <span class="keyword">per</span>;  </span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">以逗号分割 结果如下</span><br><span class="line"></span><br><span class="line">```<span class="keyword">sql</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> concat_ws(<span class="string">&#x27;,&#x27;</span>,pname,page,psex) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> 王小华,<span class="number">30</span>,男                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 张文军,<span class="number">24</span>,男                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 罗敏,<span class="number">19</span>,女                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 张建新,<span class="number">32</span>,男                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 刘婷,<span class="number">26</span>,女                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 刘小亚,<span class="number">22</span>,女                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 王建军,<span class="number">22</span>,男                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 谢涛,<span class="number">28</span>,男                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 张良,<span class="number">26</span>,男                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 黎记,<span class="number">17</span>,男                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 赵小丽,<span class="number">26</span>,女                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 张三,女                        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br></pre></td></tr></table></figure><p>把分隔符指定为null，结果全部变成了null</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> concat_ws(<span class="keyword">null</span>,pname,page,psex) <span class="keyword">from</span> <span class="keyword">per</span>;   #<span class="comment">--错误的</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> concat_ws(<span class="keyword">null</span>,pname,page,psex) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>                            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br></pre></td></tr></table></figure><h2 id="group-concat-函数"><a href="#group-concat-函数" class="headerlink" title="group_concat()函数"></a>group_concat()函数</h2><p>功能：将group by产生的同一个分组中的值连接起来，返回一个字符串结果。</p><p>语法：group_concat( [distinct] 要连接的字段 [order by 排序字段 asc/desc  ] [separator ‘分隔符’] )</p><p>注意: 中括号[]中的内容是可选的</p><p>分析:  通过使用distinct可以排除重复值；如果希望对结果中的值进行排序，可以使用order by子句；separator是一个字符串值，缺省为一个逗号。</p><p><strong>重点注意</strong></p><ol><li><p>group_concat只有与group by语句同时使用才能产生效果 所以使用 GROUP_CONCAT（）函数必须对源数据进行分组，否则所有数据会被合并成一行</p></li><li><p>需要将拼接的结果去重的话，可与DISTINCT结合使用即可</p></li></ol><h3 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h3><p>需求: 要查在重庆的有哪些人? 并且把这些人的名字用 ‘-‘ 字符分隔开 然后显示出来, SQL语句如下</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="comment">--这里就用到了 : 取出重复、显示排序、 定义分隔字符</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"> paddr,</span><br><span class="line"> group_concat(<span class="keyword">distinct</span> pname <span class="keyword">order</span> <span class="keyword">by</span> pname <span class="keyword">desc</span> separator <span class="string">&#x27;-&#x27;</span>) <span class="keyword">as</span> <span class="string">&#x27;人&#x27;</span></span><br><span class="line"><span class="keyword">from</span> <span class="keyword">per</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> paddr;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="comment">--结果为:</span></span><br><span class="line"> <span class="operator">+</span><span class="comment">--------+----------------------------+</span></span><br><span class="line"> <span class="operator">|</span> paddr  <span class="operator">|</span> 人                         <span class="operator">|</span></span><br><span class="line"> <span class="operator">+</span><span class="comment">--------+----------------------------+</span></span><br><span class="line"> <span class="operator">|</span> 上海   <span class="operator">|</span> 赵小丽<span class="operator">-</span>张良<span class="operator">-</span>张文军         <span class="operator">|</span></span><br><span class="line"> <span class="operator">|</span> 北京   <span class="operator">|</span> 王小华<span class="operator">-</span>张三                <span class="operator">|</span></span><br><span class="line"> <span class="operator">|</span> 成都   <span class="operator">|</span> 刘婷                       <span class="operator">|</span></span><br><span class="line"> <span class="operator">|</span> 海南   <span class="operator">|</span> 谢涛                       <span class="operator">|</span></span><br><span class="line"> <span class="operator">|</span> 贵州   <span class="operator">|</span> 王建军                     <span class="operator">|</span></span><br><span class="line"> <span class="operator">|</span> 贵阳   <span class="operator">|</span> 黎记                       <span class="operator">|</span></span><br><span class="line"> <span class="operator">|</span> 重庆   <span class="operator">|</span> 罗敏<span class="operator">-</span>张建新<span class="operator">-</span>刘小亚         <span class="operator">|</span></span><br><span class="line"> <span class="operator">+</span><span class="comment">--------+----------------------------+</span></span><br><span class="line">#<span class="comment">--有多个的自然会被用字符分隔连接起来，只有一个人的就没有什么变化!直接显示</span></span><br></pre></td></tr></table></figure><h3 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h3><p>需求：要查在重庆的有哪些人? 并且把这些人的名字用逗号隔开</p><p>以上需求跟上面的案例1 差不多 所以加一个效果, 也就是显示出来的名字前面把id号也加上</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> #<span class="comment">--显示出来每一个名字所对应的id号  这里我们结合了group_concat()函数 和 concat_ws()函数,</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  paddr,</span><br><span class="line">  group_concat(concat_ws(<span class="string">&#x27;-&#x27;</span>,id,pname) <span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">asc</span>) <span class="keyword">as</span> <span class="string">&#x27;人&#x27;</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">  <span class="keyword">per</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> paddr;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="comment">--显示结果</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------------------------------+</span></span><br><span class="line"><span class="operator">|</span> paddr  <span class="operator">|</span> 人                                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------------------------------+</span></span><br><span class="line"><span class="operator">|</span> 上海   <span class="operator">|</span> <span class="number">2</span><span class="operator">-</span>张文军,<span class="number">9</span><span class="operator">-</span>张良,<span class="number">11</span><span class="operator">-</span>赵小丽         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 北京   <span class="operator">|</span> <span class="number">1</span><span class="operator">-</span>王小华,<span class="number">12</span><span class="operator">-</span>张三                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 成都   <span class="operator">|</span> <span class="number">5</span><span class="operator">-</span>刘婷                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 海南   <span class="operator">|</span> <span class="number">8</span><span class="operator">-</span>谢涛                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 贵州   <span class="operator">|</span> <span class="number">7</span><span class="operator">-</span>王建军                          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 贵阳   <span class="operator">|</span> <span class="number">10</span><span class="operator">-</span>黎记                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 重庆   <span class="operator">|</span> <span class="number">3</span><span class="operator">-</span>罗敏,<span class="number">4</span><span class="operator">-</span>张建新,<span class="number">6</span><span class="operator">-</span>刘小亚          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------------------------------+</span></span><br></pre></td></tr></table></figure><p>** 注意：</p><ol><li><p>MySQL中函数是可以嵌套使用的</p></li><li><p>一般使用group_concat()函数,必须是存在group by 分组的情况下 才能使用这个函数</p></li></ol><h3 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h3><p>准备以下测试数据</p><p>准备一个student学生表、MySQL代码如下</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="comment">-- student</span></span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">   `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,   #<span class="comment">--id</span></span><br><span class="line">   `stuName` <span class="type">varchar</span>(<span class="number">22</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,   #<span class="comment">--学生姓名</span></span><br><span class="line">   `course` <span class="type">varchar</span>(<span class="number">22</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,   #<span class="comment">--学习科目</span></span><br><span class="line">   `score` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,        #<span class="comment">--学分</span></span><br><span class="line">   <span class="keyword">PRIMARY</span> KEY (`id`)       #<span class="comment">--设置主键</span></span><br><span class="line"> ) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">10</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;  #<span class="comment">--设置表引擎  自动递增起始值 默认编码格式</span></span><br></pre></td></tr></table></figure><p>插入以下数据</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(stuName,course,score) <span class="keyword">VALUES</span> (<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;语文&#x27;</span>, <span class="string">&#x27;91&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(stuName,course,score) <span class="keyword">VALUES</span> (<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="string">&#x27;90&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(stuName,course,score) <span class="keyword">VALUES</span> (<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>, <span class="string">&#x27;87&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(stuName,course,score) <span class="keyword">VALUES</span> (<span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;语文&#x27;</span>, <span class="string">&#x27;79&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(stuName,course,score) <span class="keyword">VALUES</span> (<span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="string">&#x27;95&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(stuName,course,score) <span class="keyword">VALUES</span> (<span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>, <span class="string">&#x27;80&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(stuName,course,score) <span class="keyword">VALUES</span> (<span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;语文&#x27;</span>, <span class="string">&#x27;77&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(stuName,course,score) <span class="keyword">VALUES</span> (<span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="string">&#x27;81&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(stuName,course,score) <span class="keyword">VALUES</span> (<span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>, <span class="string">&#x27;89&#x27;</span>);</span><br></pre></td></tr></table></figure><p>建立好之后 数据如下显示:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> stuName <span class="operator">|</span> course <span class="operator">|</span> score <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span> 张三    <span class="operator">|</span> 语文   <span class="operator">|</span>    <span class="number">91</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">11</span> <span class="operator">|</span> 张三    <span class="operator">|</span> 数学   <span class="operator">|</span>    <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">12</span> <span class="operator">|</span> 张三    <span class="operator">|</span> 英语   <span class="operator">|</span>    <span class="number">87</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">13</span> <span class="operator">|</span> 李四    <span class="operator">|</span> 语文   <span class="operator">|</span>    <span class="number">79</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">14</span> <span class="operator">|</span> 李四    <span class="operator">|</span> 数学   <span class="operator">|</span>    <span class="number">95</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">15</span> <span class="operator">|</span> 李四    <span class="operator">|</span> 英语   <span class="operator">|</span>    <span class="number">80</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">16</span> <span class="operator">|</span> 王五    <span class="operator">|</span> 语文   <span class="operator">|</span>    <span class="number">77</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">17</span> <span class="operator">|</span> 王五    <span class="operator">|</span> 数学   <span class="operator">|</span>    <span class="number">81</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">18</span> <span class="operator">|</span> 王五    <span class="operator">|</span> 英语   <span class="operator">|</span>    <span class="number">89</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br></pre></td></tr></table></figure><p>继续使用group_concat()函数  加深印象</p><h4 id="需求1"><a href="#需求1" class="headerlink" title="需求1"></a>需求1</h4><p>以stuName学生名称分组，把得分数score字段的值打印在一行，逗号分隔(默认)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> stuName, GROUP_CONCAT(score) <span class="keyword">as</span> <span class="string">&#x27;当前这个学生的得分数&#x27;</span> <span class="keyword">from</span> student <span class="keyword">GROUP</span> <span class="keyword">BY</span> stuName;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">---------+--------------------------------+</span></span><br><span class="line"> <span class="operator">|</span> stuName <span class="operator">|</span> 当前这个学生的得分数           <span class="operator">|</span></span><br><span class="line"> <span class="operator">+</span><span class="comment">---------+--------------------------------+</span></span><br><span class="line"> <span class="operator">|</span> 张三    <span class="operator">|</span> <span class="number">91</span>,<span class="number">90</span>,<span class="number">87</span>                       <span class="operator">|</span></span><br><span class="line"> <span class="operator">|</span> 李四    <span class="operator">|</span> <span class="number">79</span>,<span class="number">95</span>,<span class="number">80</span>                       <span class="operator">|</span></span><br><span class="line"> <span class="operator">|</span> 王五    <span class="operator">|</span> <span class="number">77</span>,<span class="number">81</span>,<span class="number">89</span>                       <span class="operator">|</span></span><br><span class="line"> <span class="operator">+</span><span class="comment">---------+--------------------------------+</span></span><br></pre></td></tr></table></figure><h4 id="需求2"><a href="#需求2" class="headerlink" title="需求2"></a>需求2</h4><p>根据需求1，分数是出来了 但是不知道是什么科目分数  所以还要把科目也连起来显示,并且分数还是从小到大,SQL如下</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> stuName, GROUP_CONCAT(concat_ws(<span class="string">&#x27;=&#x27;</span>,course,score) <span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">asc</span>) <span class="keyword">as</span> <span class="string">&#x27;当前这个学生的得分数&#x27;</span> <span class="keyword">from</span> student <span class="keyword">GROUP</span> <span class="keyword">BY</span> stuName;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">---------+--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> stuName <span class="operator">|</span> 当前这个学生的得分数           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> 张三    <span class="operator">|</span> 英语<span class="operator">=</span><span class="number">87</span>,数学<span class="operator">=</span><span class="number">90</span>,语文<span class="operator">=</span><span class="number">91</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 李四    <span class="operator">|</span> 语文<span class="operator">=</span><span class="number">79</span>,英语<span class="operator">=</span><span class="number">80</span>,数学<span class="operator">=</span><span class="number">95</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 王五    <span class="operator">|</span> 语文<span class="operator">=</span><span class="number">77</span>,数学<span class="operator">=</span><span class="number">81</span>,英语<span class="operator">=</span><span class="number">89</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------------------------------+</span></span><br></pre></td></tr></table></figure><h4 id="需求3"><a href="#需求3" class="headerlink" title="需求3"></a>需求3</h4><p>查询出 语文、数学、外语 三门课的最低分，还有哪个学生考的？</p><p>简单的说 先连接好分数字段中的得分默认用逗号 再从分数连接字符中提取第一个出来</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="comment">--首先我们要得到每一个科目中最小的分数 我们可以分析出如下SQL,  </span></span><br><span class="line">#<span class="comment">--这里的分组条件还是以科目进行分组, 分组之后还是GROUP_CONCAT()函数用逗号连接起相对应的所有分数,然后用SUBSTRING_INDEX()函数提取连接字符中的第一个字符作为结果</span></span><br><span class="line"><span class="keyword">SELECT</span> course,SUBSTRING_INDEX(GROUP_CONCAT(score <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">ASC</span>),<span class="string">&#x27;,&#x27;</span>,<span class="number">1</span>) <span class="keyword">AS</span> score <span class="keyword">FROM</span> student <span class="keyword">GROUP</span> <span class="keyword">BY</span> course;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="comment">--结果如下</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------+</span></span><br><span class="line"><span class="operator">|</span> course <span class="operator">|</span> score <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------+</span></span><br><span class="line"><span class="operator">|</span> 数学   <span class="operator">|</span> <span class="number">81</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 英语   <span class="operator">|</span> <span class="number">80</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 语文   <span class="operator">|</span> <span class="number">77</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------+</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="comment">--我们可以把这个结果 想象成一张虚拟表取一个别名 t, 现在t这个是一个临时的表，我们要查询id,科目,分数,姓名, 就在前面加上需要的字段,注意别名</span></span><br><span class="line">#<span class="comment">--然后再使用左连接筛选出 对应的结果</span></span><br><span class="line"><span class="keyword">SELECT</span>  g.`id`,g.`course`,g.`score`,g.`stuName`<span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> course,SUBSTRING_INDEX(GROUP_CONCAT(score <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">ASC</span>),<span class="string">&#x27;,&#x27;</span>,<span class="number">1</span>) <span class="keyword">AS</span> score <span class="keyword">FROM</span> student <span class="keyword">GROUP</span> <span class="keyword">BY</span> course) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student <span class="keyword">AS</span> g <span class="keyword">ON</span> (t.course <span class="operator">=</span> g.`course` <span class="keyword">AND</span> t.score <span class="operator">=</span> g.`score`) </span><br><span class="line">#<span class="comment">--left join 来显示出符合条件的结果 也就是用上面查询出来的结果来对应条件</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="comment">--结果如下</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> course <span class="operator">|</span> score <span class="operator">|</span> stuName <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span> 英语   <span class="operator">|</span>    <span class="number">80</span> <span class="operator">|</span> 李四    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span> 语文   <span class="operator">|</span>    <span class="number">77</span> <span class="operator">|</span> 王五    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span> 数学   <span class="operator">|</span>    <span class="number">81</span> <span class="operator">|</span> 王五    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+-------+---------+</span></span><br></pre></td></tr></table></figure><h3 id="案例4"><a href="#案例4" class="headerlink" title="案例4"></a>案例4</h3><p>准备一个商品表, 代码如下</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="comment">-- goods</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `goods` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,   #<span class="comment">--id</span></span><br><span class="line">  `price` <span class="type">varchar</span>(<span class="number">22</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,       #<span class="comment">--商品价格</span></span><br><span class="line">  `goods_name` <span class="type">varchar</span>(<span class="number">22</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,  #<span class="comment">--商品名称</span></span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)       </span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;  #<span class="comment">--设置表引擎  自动递增起始值 默认编码格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- 插入以下数据</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `goods`(price,goods_name) <span class="keyword">VALUES</span> (<span class="number">10.00</span>, <span class="string">&#x27;皮包&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `goods`(price,goods_name) <span class="keyword">VALUES</span> (<span class="number">20.00</span>, <span class="string">&#x27;围巾&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `goods`(price,goods_name) <span class="keyword">VALUES</span> (<span class="number">30.00</span>, <span class="string">&#x27;围巾&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `goods`(price,goods_name) <span class="keyword">VALUES</span> (<span class="number">40.00</span>, <span class="string">&#x27;游戏机&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `goods`(price,goods_name) <span class="keyword">VALUES</span> (<span class="number">60.00</span>, <span class="string">&#x27;皮包&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `goods`(price,goods_name) <span class="keyword">VALUES</span> (<span class="number">80.00</span>, <span class="string">&#x27;游戏机&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `goods`(price,goods_name) <span class="keyword">VALUES</span> (<span class="number">220.00</span>, <span class="string">&#x27;游戏机&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `goods`(price,goods_name) <span class="keyword">VALUES</span> (<span class="number">780.00</span>, <span class="string">&#x27;围巾&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `goods`(price,goods_name) <span class="keyword">VALUES</span> (<span class="number">560.00</span>, <span class="string">&#x27;游戏机&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `goods`(price,goods_name) <span class="keyword">VALUES</span> (<span class="number">30.00</span>, <span class="string">&#x27;皮包&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="需求1-1"><a href="#需求1-1" class="headerlink" title="需求1"></a>需求1</h4><p>以商品名称分组，把price字段的值在一行打印出来，分号分隔</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> goods_name,group_concat(price) <span class="keyword">from</span> goods <span class="keyword">group</span> <span class="keyword">by</span> goods_name;</span><br></pre></td></tr></table></figure><h4 id="需求2-1"><a href="#需求2-1" class="headerlink" title="需求2"></a>需求2</h4><p>以商品名称分组，把price字段的值在一行打印出来，分号分隔  并且去除重复冗余的价格字段的值</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> goods_name,group_concat(<span class="keyword">distinct</span> price) <span class="keyword">from</span> goods <span class="keyword">group</span> <span class="keyword">by</span> goods_name;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="需求3-1"><a href="#需求3-1" class="headerlink" title="需求3"></a>需求3</h4><p>以商品名称分组，把price字段的值在一行打印出来，分号分隔  去除重复冗余的价格字段的值  并且排序 从小到大</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> goods_name,group_concat(<span class="keyword">distinct</span> price <span class="keyword">order</span> <span class="keyword">by</span> price <span class="keyword">desc</span>) <span class="keyword">from</span> goods <span class="keyword">group</span> <span class="keyword">by</span> goods_name;  #<span class="comment">--错误的</span></span><br><span class="line"><span class="keyword">select</span> goods_name,group_concat(<span class="keyword">distinct</span> price <span class="keyword">order</span> <span class="keyword">by</span> price<span class="operator">+</span><span class="number">1</span> <span class="keyword">desc</span>) <span class="keyword">from</span> goods <span class="keyword">group</span> <span class="keyword">by</span> goods_name; #<span class="comment">--正确的</span></span><br><span class="line">#<span class="comment">--注意以上存在隐式数据类型转换 如果不这样转换排序出来的结果是错误的   , 因为我保存price价格的字段是varchar类型的</span></span><br></pre></td></tr></table></figure><h3 id="案例5"><a href="#案例5" class="headerlink" title="案例5"></a>案例5</h3><p>使用group_concat()函数来做一个多表查询</p><p>准备三张 测试数据表: 用户表[user]、水果表[fruit]、用户喜欢哪些水果的表[user_like]</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="comment">-- user</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,   #<span class="comment">--id</span></span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">22</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,   #<span class="comment">--用户名</span></span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)       </span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;  #<span class="comment">--设置表引擎  自动递增起始值 默认编码格式</span></span><br><span class="line"></span><br><span class="line">#<span class="comment">--插入测试数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>`(username) <span class="keyword">VALUES</span> (<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>`(username) <span class="keyword">VALUES</span> (<span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>`(username) <span class="keyword">VALUES</span> (<span class="string">&#x27;王文玉&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="comment">-- fruit</span></span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `fruit` (</span><br><span class="line">   `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,   #<span class="comment">--id</span></span><br><span class="line">   `fruitname` <span class="type">varchar</span>(<span class="number">22</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,   #<span class="comment">--水果名称</span></span><br><span class="line">   <span class="keyword">PRIMARY</span> KEY (`id`)       </span><br><span class="line"> ) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;  #<span class="comment">--设置表引擎  自动递增起始值 默认编码格式</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> #<span class="comment">--插入测试数据</span></span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `fruit`(fruitname) <span class="keyword">VALUES</span> (<span class="string">&#x27;西瓜&#x27;</span>);</span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `fruit`(fruitname) <span class="keyword">VALUES</span> (<span class="string">&#x27;苹果&#x27;</span>);</span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `fruit`(fruitname) <span class="keyword">VALUES</span> (<span class="string">&#x27;芒果&#x27;</span>);</span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `fruit`(fruitname) <span class="keyword">VALUES</span> (<span class="string">&#x27;梨&#x27;</span>);</span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `fruit`(fruitname) <span class="keyword">VALUES</span> (<span class="string">&#x27;葡萄&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="comment">-- user_like</span></span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_like` (</span><br><span class="line">   `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,   #<span class="comment">--id</span></span><br><span class="line">   `user_id` <span class="type">int</span>,             #<span class="comment">--用户的id号</span></span><br><span class="line">   `fruit_id` <span class="type">int</span>,             #<span class="comment">--水果的id号</span></span><br><span class="line">   <span class="keyword">CONSTRAINT</span> user_like <span class="keyword">PRIMARY</span> KEY (id,user_id,fruit_id)  #<span class="comment">--定义联合主键  让每一条记录唯一</span></span><br><span class="line"> ) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;  #<span class="comment">--设置表引擎  自动递增起始值 默认编码格式</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> #<span class="comment">--测试数据</span></span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_like`(user_id,fruit_id) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">1</span>);  #<span class="comment">--这就代表用户表中id号为1的用户  喜欢fruit表中id号为1的水果</span></span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_like`(user_id,fruit_id) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">2</span>);  #<span class="comment">--这就代表用户表中id号为1的用户  喜欢fruit表中id号为2的水果</span></span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_like`(user_id,fruit_id) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">3</span>);  #<span class="comment">--这就代表用户表中id号为1的用户  喜欢fruit表中id号为3的水果</span></span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_like`(user_id,fruit_id) <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="number">3</span>);  #<span class="comment">--这就代表用户表中id号为2的用户  喜欢fruit表中id号为3的水果</span></span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_like`(user_id,fruit_id) <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="number">4</span>);  #<span class="comment">--这就代表用户表中id号为2的用户  喜欢fruit表中id号为4的水果</span></span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_like`(user_id,fruit_id) <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="number">5</span>);  #<span class="comment">--这就代表用户表中id号为2的用户  喜欢fruit表中id号为5的水果</span></span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_like`(user_id,fruit_id) <span class="keyword">VALUES</span> (<span class="number">3</span>,<span class="number">5</span>);  #<span class="comment">--这就代表用户表中id号为3的用户  喜欢fruit表中id号为5的水果</span></span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_like`(user_id,fruit_id) <span class="keyword">VALUES</span> (<span class="number">3</span>,<span class="number">1</span>);  #<span class="comment">--这就代表用户表中id号为3的用户  喜欢fruit表中id号为1的水果</span></span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_like`(user_id,fruit_id) <span class="keyword">VALUES</span> (<span class="number">3</span>,<span class="number">2</span>);  #<span class="comment">--这就代表用户表中id号为3的用户  喜欢fruit表中id号为2的水果</span></span><br></pre></td></tr></table></figure><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>查出每个用户喜欢的水果都有哪些</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="comment">--查询SQL如下</span></span><br><span class="line"><span class="keyword">select</span> u.username,group_concat(f.fruitname) <span class="keyword">from</span> user_like <span class="keyword">as</span> c <span class="keyword">inner</span> <span class="keyword">join</span> <span class="keyword">user</span> <span class="keyword">as</span> u <span class="keyword">on</span> c.user_id<span class="operator">=</span>u.id <span class="keyword">inner</span> <span class="keyword">join</span>  fruit <span class="keyword">as</span> f <span class="keyword">on</span> c.fruit_id<span class="operator">=</span>f.id <span class="keyword">group</span> <span class="keyword">by</span> c.user_id;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="comment">--结果如下</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------------------------+</span></span><br><span class="line"><span class="operator">|</span> username  <span class="operator">|</span> group_concat(f.fruitname) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------------------------+</span></span><br><span class="line"><span class="operator">|</span> 张三      <span class="operator">|</span> 芒果,苹果                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 李四      <span class="operator">|</span> 梨,芒果,葡萄              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 王文玉    <span class="operator">|</span> 西瓜,葡萄,苹果            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------------------------+</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> GROUP_CONCAT() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery选择器赋值与取值</title>
      <link href="/posts/13486.html"/>
      <url>/posts/13486.html</url>
      
        <content type="html"><![CDATA[<h2 id="单选框radio"><a href="#单选框radio" class="headerlink" title="单选框radio"></a>单选框radio</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;jclx&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">title</span>=<span class="string">&quot;当前期次&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;jclx&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">title</span>=<span class="string">&quot;当前月份&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取radio选中的值</span></span><br><span class="line">$(<span class="string">&quot;input[name=&#x27;jclx&#x27;]:checked&quot;</span>).<span class="title function_">val</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置radio选中的值</span></span><br><span class="line">$(<span class="string">&quot;input[name=&#x27;jclx&#x27;][value=&#x27;1&#x27;]&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;checked&quot;</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">$(<span class="string">&quot;input[name=jclx]&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;checked&quot;</span>,<span class="string">&#x27;2&#x27;</span>);<span class="comment">// 设置value=2的项目为当前选中项 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是layui表单里渲染的radio，还需要让radio重新渲染一下</span></span><br><span class="line">form.<span class="title function_">render</span>(<span class="string">&#x27;radio&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="下拉框select"><a href="#下拉框select" class="headerlink" title="下拉框select"></a>下拉框select</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;selector&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="赋值和取值"><a href="#赋值和取值" class="headerlink" title="赋值和取值"></a>赋值和取值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置value为pxx的项选中</span></span><br><span class="line">$(<span class="string">&quot;.selector&quot;</span>).<span class="title function_">val</span>(<span class="string">&quot;pxx&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置text为pxx的项选中</span></span><br><span class="line"> $(<span class="string">&quot;.selector&quot;</span>).<span class="title function_">find</span>(<span class="string">&quot;option:contains(&#x27;pxx&#x27;)&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;selected&quot;</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 注意：之前$(&quot;.selector&quot;).find(&quot;option[text=&#x27;pxx&#x27;]&quot;).attr(&quot;selected&quot;,true);这种写法是错误的，目前证实input支持这种获取属性值的写法：&quot;input[text=&#x27;pxx&#x27;]&quot;，select中需要&quot;option:contains(&#x27;pxx&#x27;)&quot;这样获取。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前选中项的value</span></span><br><span class="line">$(<span class="string">&quot;.selector&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前选中项的text</span></span><br><span class="line">$(<span class="string">&quot;.selector&quot;</span>).<span class="title function_">find</span>(<span class="string">&quot;option:selected&quot;</span>).<span class="title function_">text</span>();</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">$(<span class="string">&quot;select[name=items] option[selected]&quot;</span>).<span class="title function_">text</span>();</span><br></pre></td></tr></table></figure><h3 id="select级联"><a href="#select级联" class="headerlink" title="select级联"></a>select级联</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.selector1&quot;</span>).<span class="title function_">change</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 先清空第二个</span></span><br><span class="line"></span><br><span class="line">      $(<span class="string">&quot;.selector2&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 实际的应用中，这里的option一般都是用循环生成多个了</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> option = $(<span class="string">&quot;&lt;option&gt;&quot;</span>).<span class="title function_">val</span>(<span class="number">1</span>).<span class="title function_">text</span>(<span class="string">&quot;pxx&quot;</span>);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&quot;.selector2&quot;</span>).<span class="title function_">append</span>(option);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="文本框"><a href="#文本框" class="headerlink" title="文本框"></a>文本框</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#txt&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;value&quot;</span>,<span class="string">&#x27;&#x27;</span>)<span class="comment">// 清空内容 </span></span><br><span class="line">$(<span class="string">&quot;#txt&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;value&quot;</span>,<span class="string">&#x27;11&#x27;</span>)<span class="comment">// 填充内容 </span></span><br><span class="line">$(<span class="string">&quot;#txt&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;value&quot;</span>)<span class="comment">// 获取内容</span></span><br></pre></td></tr></table></figure><h2 id="多选框"><a href="#多选框" class="headerlink" title="多选框"></a>多选框</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#checkbox_id&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;value&quot;</span>)<span class="comment">// 获取值</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;#chk1&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;checked&quot;</span>,<span class="string">&#x27;&#x27;</span>);<span class="comment">// 不勾选id为chk1点多选框</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;#chk2&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;checked&quot;</span>,<span class="literal">true</span>);<span class="comment">// 勾选id为chk2点多选框 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($(<span class="string">&quot;#chk1&quot;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;checked&#x27;</span>))&#123;</span><br><span class="line">  <span class="comment">// 判断是否已经勾选</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有选中的多选框的值</span></span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;myName&quot;</span> value=<span class="string">&quot;1&quot;</span> checked&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;myName&quot; value=&quot;2&quot; checked&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;myName&quot; value=&quot;3&quot;&gt;</span><br><span class="line">const arr = [];</span><br><span class="line">$(&#x27;input[type=checkbox][name=myName]:checked&#x27;).each(function () &#123;</span><br><span class="line">    arr.push($(this).val());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
            <tag> jQuery选择器赋值与取值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>table动态纵向合并单元格</title>
      <link href="/posts/14116.html"/>
      <url>/posts/14116.html</url>
      
        <content type="html"><![CDATA[<p>需求：点击layui动态表格的某一行，给这行添加一个背景颜色，用来标识行已被点击</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.table-tr-selected-bg</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#6189a7</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#FFF</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;table1&quot;</span> <span class="attr">lay-filter</span>=<span class="string">&quot;table1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 渲染表格</span></span><br><span class="line">table.<span class="title function_">render</span>(&#123;</span><br><span class="line">    <span class="attr">elem</span>: <span class="string">&#x27;#table1&#x27;</span></span><br><span class="line">    , <span class="attr">height</span>: <span class="number">415</span></span><br><span class="line">    , <span class="attr">page</span>: <span class="literal">false</span></span><br><span class="line">    , <span class="attr">url</span>: <span class="title class_">Hussar</span>.<span class="property">ctxPath</span> + <span class="string">&quot;/getData&quot;</span></span><br><span class="line">    , <span class="attr">cols</span>: [[ </span><br><span class="line">        &#123;<span class="attr">field</span>: <span class="string">&#x27;field0&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;字段0&#x27;</span>, <span class="attr">align</span>: <span class="string">&quot;center&quot;</span>,&#125;,</span><br><span class="line">        , &#123;<span class="attr">field</span>: <span class="string">&#x27;field1&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;字段1&#x27;</span>,  <span class="attr">align</span>: <span class="string">&quot;center&quot;</span>&#125;</span><br><span class="line">        , &#123;<span class="attr">field</span>: <span class="string">&#x27;field2&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;字段2&#x27;</span>, <span class="attr">align</span>: <span class="string">&quot;center&quot;</span>,&#125;</span><br><span class="line">    ]]</span><br><span class="line">    , <span class="title function_">done</span>(<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="comment">// 表格加载完之后给第一行添加一个背景颜色，即默认第一行被选中</span></span><br><span class="line">        $(<span class="string">&quot;div[lay-id=&#x27;table1&#x27;] div.layui-table-box div.layui-table-body tr:eq(0)&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;table-tr-selected-bg&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给表格添加行点击事件</span></span><br><span class="line">table.<span class="title function_">on</span>(<span class="string">&#x27;row(table1)&#x27;</span>, <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;.table-tr-selected-bg&#x27;</span>).<span class="title function_">removeClass</span>(<span class="string">&#x27;table-tr-selected-bg&#x27;</span>);</span><br><span class="line">    $(obj.<span class="property">tr</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;table-tr-selected-bg&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> layui </tag>
            
            <tag> table动态纵向合并单元格 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql的递归查询</title>
      <link href="/posts/669.html"/>
      <url>/posts/669.html</url>
      
        <content type="html"><![CDATA[<p>本篇博客的目的旨在不用写存储过程，不用建数据库函数，一段sql实现递归查询功能</p><h2 id="查询某个父节点下的所有层级的子节点"><a href="#查询某个父节点下的所有层级的子节点" class="headerlink" title="查询某个父节点下的所有层级的子节点"></a>查询某个父节点下的所有层级的子节点</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  ID.temp_level,</span><br><span class="line">  DATA.<span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  (</span><br><span class="line">  <span class="keyword">SELECT</span></span><br><span class="line">    <span class="variable">@ids</span> <span class="keyword">AS</span> _ids,</span><br><span class="line">    ( <span class="keyword">SELECT</span> <span class="variable">@ids</span> :<span class="operator">=</span> GROUP_CONCAT( region_id ) <span class="keyword">FROM</span> region <span class="keyword">WHERE</span> FIND_IN_SET( parent_id, <span class="variable">@ids</span> ) ) <span class="keyword">AS</span> cids,</span><br><span class="line">    <span class="variable">@l</span> :<span class="operator">=</span> <span class="variable">@l</span> <span class="operator">+</span> <span class="number">1</span> <span class="keyword">AS</span> temp_level </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    region,</span><br><span class="line">    ( <span class="keyword">SELECT</span> <span class="variable">@ids</span> :<span class="operator">=</span> <span class="number">3</span>, <span class="variable">@l</span> :<span class="operator">=</span> <span class="number">0</span> ) b </span><br><span class="line">  <span class="keyword">WHERE</span></span><br><span class="line">    <span class="variable">@ids</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> </span><br><span class="line">  ) ID,</span><br><span class="line">  region DATA </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  FIND_IN_SET( DATA.region_id, ID._ids ) </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">temp_level</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>上面sql的两个region要替换为自己表名</li><li>上面sql的两个region_id要替换为自己的主键id</li><li>上面sql的一个parent_id要替换为当前表的父级id所代表的字段</li><li>上面sql的三个temp_level代表每个节点所属的层级，从1开始</li><li>@ids := 3代表从id为3的这个节点向下递归，包括当前节点。如果id为3的节点不存在，那么不会报错，会列出所有的子节点</li></ul><p><img src="https://s2.loli.net/2023/08/16/aDiBOZ7K8rUtNdb.png" alt="修改为自己能用的sql所要做的改动示意图"></p><p>测试：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--创建测试环境</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_test(</span><br><span class="line"></span><br><span class="line">    id <span class="type">int</span> <span class="keyword">PRIMARY</span> key,</span><br><span class="line"></span><br><span class="line">    parent_id <span class="type">int</span>,</span><br><span class="line"></span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> t_test <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="keyword">null</span>,&quot;中国&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> t_test <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">1</span>,&quot;华北&quot;); </span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> t_test <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="number">2</span>,&quot;山西省&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> t_test <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="number">2</span>,&quot;北京&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> t_test <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="number">3</span>,&quot;临汾市&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> t_test <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="number">4</span>,&quot;北京市&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> t_test <span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="number">5</span>,&quot;尧都区&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> t_test <span class="keyword">VALUES</span>(<span class="number">8</span>,<span class="number">6</span>,&quot;朝阳区&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> t_test <span class="keyword">VALUES</span>(<span class="number">9</span>,<span class="number">7</span>,&quot;解放西路&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> t_test <span class="keyword">VALUES</span>(<span class="number">10</span>,<span class="number">8</span>,&quot;朝阳北路&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_test;</span><br></pre></td></tr></table></figure><p>测试数据展示：</p><p><img src="https://s2.loli.net/2023/08/16/hnu5xS9NXEsLCTz.png" alt="测试数据展示"></p><p>id=1，查询中国下边有哪些地方</p><p><img src="https://s2.loli.net/2023/08/16/AJWkKSm4j8vgZ5r.png" alt="中国下边有哪些地方"></p><p>id=3，查询山西下边有哪些地方</p><p><img src="https://s2.loli.net/2023/08/16/ur6axEiWXwMgty1.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> 递归查询demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux上停止mysql报错的解决办法</title>
      <link href="/posts/8695.html"/>
      <url>/posts/8695.html</url>
      
        <content type="html"><![CDATA[<p>linux上停止mysql报错，解决办法有：1、检查错误消息，根据信息提示解决问题；2、查看日志文件，找到导致停止失败的具体错误并解决；3、使用强制停止命令，终止所有与MySQL相关的进程；4、使用kill命令手动杀死MySQL进程；5、确保MySQL相关文件和目录的权限设置正确；6、尝试重启服务器来强制停止MySQL进程。</p><p>在 Linux 上停止 MySQL 时遇到错误，可以尝试以下步骤来解决问题：</p><ol><li><p>检查错误消息：当你运行 sudo systemctl stop mysql 或 sudo service mysql stop 命令时，如果遇到错误，系统通常会输出相应的错误消息。请检查错误消息以获取更多信息，这可能有助于确定问题的原因。</p></li><li><p>查看日志文件：MySQL 通常会将错误和警告消息记录在日志文件中。你可以查看 MySQL 的错误日志文件，通常在 /var/log/mysql 目录下，比如 error.log。通过查看日志文件，你可以找到导致停止失败的具体错误。</p></li><li><p>使用强制停止命令：如果 MySQL 无法正常停止，你可以尝试使用强制停止命令。首先，使用管理员权限打开终端，并执行以下命令：</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop mysql.service --kill</span><br></pre></td></tr></table></figure><p> 或者</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl kill --kill-who=all mysql.service</span><br></pre></td></tr></table></figure><p> 这将强制终止所有与 MySQL 相关的进程。</p></li><li><p>杀死进程：如果强制停止命令也无法正常停止 MySQL，你可以使用 kill 命令手动杀死 MySQL 进程。首先，使用以下命令查找 MySQL 进程的 PID：</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps aux | grep mysql</span><br></pre></td></tr></table></figure><p> 然后，使用以下命令杀死该进程（将 <PID> 替换为实际的进程 ID）：</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo kill &lt;PID&gt;</span><br></pre></td></tr></table></figure></li><li><p>检查文件权限：确保 MySQL 相关文件和目录的权限设置正确，MySQL 进程能够读取和写入必要的文件。通常，MySQL 数据目录位于 /var/lib/mysql，确保该目录及其文件的所有者为 mysql 用户或 mysql 组，并且具有适当的权限。</p></li><li><p>重启服务器：如果以上步骤都无法解决问题，你可以尝试重启服务器来强制停止 MySQL 进程。请注意，这将导致服务器上其他正在运行的服务也被中断，谨慎操作。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> MySql </tag>
            
            <tag> linux上停止mysql报错的解决办法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux的常用脚本</title>
      <link href="/posts/20615.html"/>
      <url>/posts/20615.html</url>
      
        <content type="html"><![CDATA[<h2 id="检测两台服务器指定目录下的文件一致性"><a href="#检测两台服务器指定目录下的文件一致性" class="headerlink" title="检测两台服务器指定目录下的文件一致性"></a>检测两台服务器指定目录下的文件一致性</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#####################################</span></span>  </span><br><span class="line">检测两台服务器指定目录下的文件一致性  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">####################################</span></span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过对比两台服务器上文件的md5值，达到检测一致性的目的</span>  </span><br><span class="line">dir=/data/web  </span><br><span class="line">b_ip=192.168.88.10  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将指定目录下的文件全部遍历出来并作为<span class="built_in">md5sum</span>命令的参数，进而得到所有文件的md5值，并写入到指定文件中</span>  </span><br><span class="line">find $dir -type f|xargs md5sum &gt; /tmp/md5_a.txt  </span><br><span class="line">ssh $b_ip &quot;find $dir -type f|xargs md5sum &gt; /tmp/md5_b.txt&quot;  </span><br><span class="line">scp $b_ip:/tmp/md5_b.txt /tmp  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将文件名作为遍历对象进行一一比对</span>  </span><br><span class="line">for f in `awk &#x27;&#123;print 2&#125; /tmp/md5_a.txt&#x27;`do  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">以a机器为标准，当b机器不存在遍历对象中的文件时直接输出不存在的结果</span>  </span><br><span class="line">if grep -qw &quot;$f&quot; /tmp/md5_b.txt  </span><br><span class="line">then  </span><br><span class="line">md5_a=`grep -w &quot;$f&quot; /tmp/md5_a.txt|awk &#x27;&#123;print 1&#125;&#x27;`  </span><br><span class="line">md5_b=`grep -w &quot;$f&quot; /tmp/md5_b.txt|awk &#x27;&#123;print 1&#125;&#x27;`  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">当文件存在时，如果md5值不一致则输出文件改变的结果</span>  </span><br><span class="line">if [ $md5_a != $md5_b ]then  </span><br><span class="line">echo &quot;$f changed.&quot;  </span><br><span class="line">fi  </span><br><span class="line">else  </span><br><span class="line">echo &quot;$f deleted.&quot;  </span><br><span class="line">fi  </span><br><span class="line">done  </span><br></pre></td></tr></table></figure><h2 id="定时清空文件内容，定时记录文件大小"><a href="#定时清空文件内容，定时记录文件大小" class="headerlink" title="定时清空文件内容，定时记录文件大小"></a>定时清空文件内容，定时记录文件大小</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################################################</span></span>  </span><br><span class="line">每小时执行一次脚本（任务计划），当时间为0点或12点时，将目标目录下的所有文件内#容清空，但不删除文件，其他时间则只统计各个文件的大小，一个文件一行，输出到以时#间和日期命名的文件中，需要考虑目标目录下二级、三级等子目录的文件  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###############################################################</span></span>  </span><br><span class="line">logfile=/tmp/`date +%H-%F`.log  </span><br><span class="line">n=`date +%H`  </span><br><span class="line">if [ $n -eq 00 ] || [ $n -eq 12 ]  </span><br><span class="line">then  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过<span class="keyword">for</span>循环，以find命令作为遍历条件，将目标目录下的所有文件进行遍历并做相应操作</span>  </span><br><span class="line">for i in `find /data/log/ -type f`  </span><br><span class="line">do  </span><br><span class="line">true &gt; $i  </span><br><span class="line">done  </span><br><span class="line">else  </span><br><span class="line">for i in `find /data/log/ -type f`  </span><br><span class="line">do  </span><br><span class="line">du -sh $i &gt;&gt; $logfile  </span><br><span class="line">done  </span><br><span class="line">fi  </span><br></pre></td></tr></table></figure><h2 id="检测网卡流量，并按规定格式记录在日志中"><a href="#检测网卡流量，并按规定格式记录在日志中" class="headerlink" title="检测网卡流量，并按规定格式记录在日志中"></a>检测网卡流量，并按规定格式记录在日志中</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">######################################################</span></span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检测网卡流量，并按规定格式记录在日志中<span class="comment">#规定一分钟记录一次</span></span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">日志格式如下所示:</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2019-08-12 20:40</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ens33 input: 1234bps</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ens33 output: 1235bps</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#####################################################3</span></span>  </span><br><span class="line">while :  </span><br><span class="line">do  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置语言为英文，保障输出结果是英文，否则会出现bug</span>  </span><br><span class="line">LANG=en  </span><br><span class="line">logfile=/tmp/`date +%d`.log  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将下面执行的命令结果输出重定向到logfile日志中</span>  </span><br><span class="line">exec &gt;&gt; $logfile  </span><br><span class="line">date +&quot;%F %H:%M&quot;  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">sar命令统计的流量单位为kb/s，日志格式为bps，因此要*1000*8</span>  </span><br><span class="line">sar -n DEV 1 59|grep Average|grep ens33|awk &#x27;&#123;print $2,&quot;\t&quot;,&quot;input:&quot;,&quot;\t&quot;,$5*1000*8,&quot;bps&quot;,&quot;\n&quot;,$2,&quot;\t&quot;,&quot;output:&quot;,&quot;\t&quot;,$6*1000*8,&quot;bps&quot;&#125;&#x27;  </span><br><span class="line">echo &quot;####################&quot;  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">因为执行sar命令需要59秒，因此不需要<span class="built_in">sleep</span></span>  </span><br><span class="line">done  </span><br></pre></td></tr></table></figure><h2 id="计算文档每行出现的数字个数，并计算整个文档的数字总数"><a href="#计算文档每行出现的数字个数，并计算整个文档的数字总数" class="headerlink" title="计算文档每行出现的数字个数，并计算整个文档的数字总数"></a>计算文档每行出现的数字个数，并计算整个文档的数字总数</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">########################################################</span></span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">计算文档每行出现的数字个数，并计算整个文档的数字总数</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#######################################################</span></span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用awk只输出文档行数（截取第一段）</span>  </span><br><span class="line">n=`wc -l a.txt|awk &#x27;&#123;print $1&#125;&#x27;`  </span><br><span class="line">sum=0  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">文档中每一行可能存在空格，因此不能直接用文档内容进行遍历</span>  </span><br><span class="line">for i in `seq 1 $n`do  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出的行用变量表示时，需要用双引号</span>  </span><br><span class="line">line=`sed -n &quot;$i&quot;p a.txt`#wc -L选项，统计最长行的长度  </span><br><span class="line">n_n=`echo $line|sed s&#x27;/[^0-9]//&#x27;g|wc -L`  </span><br><span class="line">echo $n_nsum=$[$sum+$n_n]  </span><br><span class="line">done  </span><br><span class="line">echo &quot;sum:$sum&quot;  </span><br></pre></td></tr></table></figure><p>杀死所有脚本</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###############################################################</span></span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">有一些脚本加入到了cron之中，存在脚本尚未运行完毕又有新任务需要执行的情况，</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">导致系统负载升高，因此可通过编写脚本，筛选出影响负载的进程一次性全部杀死。</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###############################################################</span></span>  </span><br><span class="line">ps aux|grep 指定进程名|grep -v grep|awk &#x27;&#123;print $2&#125;&#x27;|xargs kill -9  </span><br></pre></td></tr></table></figure><h2 id="从-FTP-服务器下载文件"><a href="#从-FTP-服务器下载文件" class="headerlink" title="从 FTP 服务器下载文件"></a>从 FTP 服务器下载文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line">if [ $# -ne 1 ]; then  </span><br><span class="line">    echo &quot;Usage: $0 filename&quot;  </span><br><span class="line">fi  </span><br><span class="line">dir=$(dirname $1)  </span><br><span class="line">file=$(basename $1)  </span><br><span class="line">ftp -n -v &lt;&lt; EOF   # -n 自动登录  </span><br><span class="line">open 192.168.1.10  # ftp服务器  </span><br><span class="line">user admin password  </span><br><span class="line">binary   # 设置ftp传输模式为二进制，避免MD5值不同或.tar.gz压缩包格式错误  </span><br><span class="line">cd $dir  </span><br><span class="line">get &quot;$file&quot;  </span><br><span class="line">EOF  </span><br></pre></td></tr></table></figure><h2 id="连续输入5个100以内的数字，统计和、最小和最大"><a href="#连续输入5个100以内的数字，统计和、最小和最大" class="headerlink" title="连续输入5个100以内的数字，统计和、最小和最大"></a>连续输入5个100以内的数字，统计和、最小和最大</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line">COUNT=1  </span><br><span class="line">SUM=0  </span><br><span class="line">MIN=0  </span><br><span class="line">MAX=100  </span><br><span class="line">while [ $COUNT -le 5 ]; do  </span><br><span class="line">    read -p &quot;请输入1-10个整数：&quot; INT      </span><br><span class="line">    if [[ ! $INT =~ ^[0-9]+$ ]]; then  </span><br><span class="line">        echo &quot;输入必须是整数！&quot;  </span><br><span class="line">        exit 1  </span><br><span class="line">    elif [[ $INT -gt 100 ]]; then  </span><br><span class="line">        echo &quot;输入必须是100以内！&quot;  </span><br><span class="line">        exit 1  </span><br><span class="line">    fi  </span><br><span class="line">    SUM=$(($SUM+$INT))  </span><br><span class="line">    [ $MIN -lt $INT ] &amp;&amp; MIN=$INT  </span><br><span class="line">    [ $MAX -gt $INT ] &amp;&amp; MAX=$INT  </span><br><span class="line">    let COUNT++  </span><br><span class="line">    done  </span><br><span class="line">echo &quot;SUM: $SUM&quot;  </span><br><span class="line">echo &quot;MIN: $MIN&quot;  </span><br><span class="line">echo &quot;MAX: $MAX  </span><br></pre></td></tr></table></figure><p>用户猜数字</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash  <span class="comment"># 脚本生成一个 100 以内的随机数,提示用户猜数字,根据用户的输入,提示用户猜对了,</span></span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">猜小了或猜大了,直至用户猜对脚本结束。</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">RANDOM 为系统自带的系统变量,值为 0‐32767的随机数</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用取余算法将随机数变为 1‐100 的随机数num=$[RANDOM%100+1]<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$num</span>&quot;</span></span>   </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 <span class="built_in">read</span> 提示用户猜数字</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 <span class="keyword">if</span> 判断用户猜数字的大小关系:‐eq(等于),‐ne(不等于),‐gt(大于),‐ge(大于等于),</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">‐lt(小于),‐le(小于等于)</span>  </span><br><span class="line">  </span><br><span class="line">while :  </span><br><span class="line">  do       </span><br><span class="line">    read -p &quot;计算机生成了一个 1‐100 的随机数,你猜: &quot; cai      </span><br><span class="line">    if [ $cai -eq $num ]      </span><br><span class="line">    then          </span><br><span class="line">        echo &quot;恭喜,猜对了&quot;             </span><br><span class="line">        exit          </span><br><span class="line">    elif [ $cai -gt $num ]         </span><br><span class="line">    then              </span><br><span class="line">        echo &quot;Oops,猜大了&quot;           </span><br><span class="line">    else              </span><br><span class="line">        echo &quot;Oops,猜小了&quot;       </span><br><span class="line">    fi  </span><br><span class="line">  done  </span><br></pre></td></tr></table></figure><h2 id="监测-Nginx-访问日志-502-情况，并做相应动作"><a href="#监测-Nginx-访问日志-502-情况，并做相应动作" class="headerlink" title="监测 Nginx 访问日志 502 情况，并做相应动作"></a>监测 Nginx 访问日志 502 情况，并做相应动作</h2><p>假设服务器环境为 lnmp，近期访问经常出现 502 现象，且 502 错误在重启 php-fpm 服务后消失，因此需要编写监控脚本，一旦出现 502，则自动重启 php-fpm 服务。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">场景：</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.访问日志文件的路径：/data/log/access.log</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2.脚本死循环，每10秒检测一次，10秒的日志条数为300条，出现502的比例不低于10%（30条）则需要重启php-fpm服务</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3.重启命令为：/etc/init.d/php-fpm restart</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################################################</span></span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">监测Nginx访问日志502情况，并做相应动作</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################################################</span></span>  </span><br><span class="line">log=/data/log/access.log  </span><br><span class="line">N=30 #设定阈值  </span><br><span class="line">while :do  </span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">查看访问日志的最新300条，并统计502的次数</span>  </span><br><span class="line">    err=`tail -n 300 $log |grep -c &#x27;502&quot; &#x27;`   </span><br><span class="line">if [ $err -ge $N ]   </span><br><span class="line">then  </span><br><span class="line">/etc/init.d/php-fpm restart 2&gt; /dev/null   </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设定60s延迟防止脚本bug导致无限重启php-fpm服务</span>  </span><br><span class="line">     sleep 60  </span><br><span class="line"> fi  </span><br><span class="line"> sleep 10  </span><br><span class="line"> done  </span><br></pre></td></tr></table></figure><h2 id="将结果分别赋值给变量"><a href="#将结果分别赋值给变量" class="headerlink" title="将结果分别赋值给变量"></a>将结果分别赋值给变量</h2><p>应用场景：希望将执行结果或者位置参数赋值给变量，以便后续使用。</p><p>方法1:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for i in $(echo &quot;4 5 6&quot;); do  </span><br><span class="line">   eval a$i=$idone  </span><br><span class="line">echo $a4 $a5 $a6  </span><br></pre></td></tr></table></figure><p>方法2：将位置参数192.168.1.1{1,2}拆分为到每个变量</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">num=0  </span><br><span class="line">for i in $(eval echo $*);do   #eval将&#123;1,2&#125;分解为1 2  </span><br><span class="line">   let num+=1  </span><br><span class="line">   eval node$&#123;num&#125;=&quot;$i&quot;  </span><br><span class="line">done  </span><br><span class="line">echo $node1 $node2 $node3  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">bash a.sh 192.168.1.1&#123;1,2&#125;</span>  </span><br><span class="line">192.168.1.11 192.168.1.12  </span><br><span class="line">  </span><br><span class="line">方法3：arr=(4 5 6)  </span><br><span class="line">INDEX1=$(echo $&#123;arr[0]&#125;)  </span><br><span class="line">INDEX2=$(echo $&#123;arr[1]&#125;)  </span><br><span class="line">INDEX3=$(echo $&#123;arr[2]&#125;)  </span><br></pre></td></tr></table></figure><h2 id="批量修改文件名"><a href="#批量修改文件名" class="headerlink" title="批量修改文件名"></a>批量修改文件名</h2><p>示例：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">touch</span> article_&#123;1..3&#125;.html</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">lsarticle_1.html  article_2.html  article_3.html</span>  </span><br><span class="line">目的：把article改为bbs  </span><br></pre></td></tr></table></figure><p>方法1：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for file in $(ls *html); do  </span><br><span class="line">    mv $file bbs_$&#123;file#*_&#125;  </span><br><span class="line">    # mv $file $(echo $file |sed -r &#x27;s/.*(_.*)/bbs\1/&#x27;)  </span><br><span class="line">    # mv $file $(echo $file |echo bbs_$(cut -d_ -f2)  </span><br></pre></td></tr></table></figure><p>方法2：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for file in $(find . -maxdepth 1 -name &quot;*html&quot;); do  </span><br><span class="line">     mv $file bbs_$&#123;file#*_&#125;done  </span><br></pre></td></tr></table></figure><p>方法3：</p><p>把一个文档前五行中包含字母的行删掉，同时删除6到10行包含的所有字母  </p><p>1）准备测试文件，文件名为2.txt  </p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">第1行1234567不包含字母  </span><br><span class="line">第2行56789BBBBBB  </span><br><span class="line">第3行67890CCCCCCCC  </span><br><span class="line">第4行78asdfDDDDDDDDD  </span><br><span class="line">第5行123456EEEEEEEE  </span><br><span class="line">第6行1234567ASDF  </span><br><span class="line">第7行56789ASDF  </span><br><span class="line">第8行67890ASDF  </span><br><span class="line">第9行78asdfADSF  </span><br><span class="line">第10行123456AAAA  </span><br><span class="line">第11行67890ASDF  </span><br><span class="line">第12行78asdfADSF  </span><br><span class="line">第13行123456AAAA  </span><br></pre></td></tr></table></figure><p>2） 脚本如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##############################################################</span></span>  </span><br><span class="line">把一个文档前五行中包含字母的行删掉，同时删除6到10行包含的所有字母  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#############################################################</span></span>  </span><br><span class="line">sed -n &#x27;1,5&#x27;p 2.txt |sed &#x27;/[a-zA-Z]/&#x27;d  </span><br><span class="line">sed -n &#x27;6,10&#x27;p 2.txt |sed s&#x27;/[a-zA-Z]//&#x27;g  </span><br><span class="line">sed -n &#x27;11,$&#x27;p 2.txt  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">最终结果只是在屏幕上打印结果，如果想直接更改文件，可将输出结果写入临时文件中，再替换2.txt或者使用-i选项</span>  </span><br></pre></td></tr></table></figure><h2 id="扫描主机端口状态"><a href="#扫描主机端口状态" class="headerlink" title="扫描主机端口状态"></a>扫描主机端口状态</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line">HOST=$1  </span><br><span class="line">PORT=&quot;22 25 80 8080&quot;  </span><br><span class="line">for PORT in $PORT; do  </span><br><span class="line">    if echo &amp;&gt;/dev/null &gt; /dev/tcp/$HOST/$PORT; then  </span><br><span class="line">        echo &quot;$PORT open&quot;  </span><br><span class="line">    else  </span><br><span class="line">        echo &quot;$PORT close&quot;  </span><br><span class="line">    fi  </span><br><span class="line">done  </span><br><span class="line">用 shell 打印示例语句中字母数小于6的单词  </span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">示例语句：</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Bash also interprets a number of multi-character options.</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#############################################################</span></span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">shell打印示例语句中字母数小于6的单词</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#############################################################</span></span>  </span><br><span class="line">for s in Bash also interprets a number of multi-character options.  </span><br><span class="line">do  </span><br><span class="line"> n=`echo $s|wc -c`   </span><br><span class="line"> if [ $n -lt 6 ]   </span><br><span class="line"> then  </span><br><span class="line"> echo $s  </span><br><span class="line"> fi  </span><br><span class="line">done  </span><br></pre></td></tr></table></figure><h2 id="统计当前目录中以-html结尾的文件总大"><a href="#统计当前目录中以-html结尾的文件总大" class="headerlink" title="统计当前目录中以.html结尾的文件总大"></a>统计当前目录中以.html结尾的文件总大</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">find . -name <span class="string">&quot;*.html&quot;</span> -<span class="built_in">exec</span> <span class="built_in">du</span> -k &#123;&#125; \; |awk <span class="string">&#x27;&#123;sum+=$1&#125;END&#123;print sum&#125;&#x27;</span></span>  </span><br><span class="line">  </span><br><span class="line">方法2：  </span><br><span class="line">```bash  </span><br><span class="line">for size in $(ls -l *.html |awk &#x27;&#123;print $5&#125;&#x27;); do  </span><br><span class="line">    sum=$(($sum+$size))  </span><br><span class="line">done  </span><br><span class="line">echo $sum  </span><br><span class="line">```shell</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 扫描主机端口状态</span></span></span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line">HOST=$1  </span><br><span class="line">PORT=&quot;22 25 80 8080&quot;  </span><br><span class="line">for PORT in $PORT; do  </span><br><span class="line">    if echo &amp;&gt;/dev/null &gt; /dev/tcp/$HOST/$PORT; then  </span><br><span class="line">        echo &quot;$PORT open&quot;  </span><br><span class="line">    else  </span><br><span class="line">        echo &quot;$PORT close&quot;  </span><br><span class="line">    fi  </span><br><span class="line">done  </span><br><span class="line">用 shell 打印示例语句中字母数小于6的单词  </span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">示例语句：</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Bash also interprets a number of multi-character options.</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#############################################################</span></span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">shell打印示例语句中字母数小于6的单词</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#############################################################</span></span>  </span><br><span class="line">for s in Bash also interprets a number of multi-character options.  </span><br><span class="line">do  </span><br><span class="line"> n=`echo $s|wc -c`   </span><br><span class="line"> if [ $n -lt 6 ]   </span><br><span class="line"> then  </span><br><span class="line"> echo $s  </span><br><span class="line"> fi  </span><br><span class="line">done  </span><br></pre></td></tr></table></figure><h2 id="输入数字运行相应命令"><a href="#输入数字运行相应命令" class="headerlink" title="输入数字运行相应命令"></a>输入数字运行相应命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#############################################################</span></span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输入数字运行相应命令</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#############################################################</span></span>  </span><br><span class="line">echo &quot;*cmd menu* 1-date 2-ls 3-who 4-pwd 0-exit &quot;  </span><br><span class="line">while :  </span><br><span class="line">do  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">捕获用户键入值</span>  </span><br><span class="line"> read -p &quot;please input number :&quot; n  </span><br><span class="line"> n1=`echo $n|sed s&#x27;/[0-9]//&#x27;g`  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">空输入检测</span>   </span><br><span class="line"> if [ -z &quot;$n&quot; ]  </span><br><span class="line"> then  </span><br><span class="line"> continue  </span><br><span class="line"> fi  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">非数字输入检测</span>   </span><br><span class="line"> if [ -n &quot;$n1&quot; ]  </span><br><span class="line"> then  </span><br><span class="line"> exit 0  </span><br><span class="line"> fi  </span><br><span class="line"> break  </span><br><span class="line">done  </span><br><span class="line">case $n in  </span><br><span class="line"> 1)  </span><br><span class="line"> date  </span><br><span class="line"> ;;  </span><br><span class="line"> 2)  </span><br><span class="line"> ls  </span><br><span class="line"> ;;  </span><br><span class="line"> 3)  </span><br><span class="line"> who  </span><br><span class="line"> ;;  </span><br><span class="line"> 4)  </span><br><span class="line"> pwd  </span><br><span class="line"> ;;  </span><br><span class="line"> 0)  </span><br><span class="line"> break  </span><br><span class="line"> ;;  </span><br><span class="line">    #输入数字非1-4的提示  </span><br><span class="line"> *)  </span><br><span class="line"> echo &quot;please input number is [1-4]&quot;  </span><br><span class="line">esac  </span><br></pre></td></tr></table></figure><h2 id="Expect-实现-SSH-免交互执行命令"><a href="#Expect-实现-SSH-免交互执行命令" class="headerlink" title="Expect 实现 SSH 免交互执行命令"></a>Expect 实现 SSH 免交互执行命令</h2><p>Expect是一个自动交互式应用程序的工具，如telnet，ftp，passwd等。</p><p>需先安装expect软件包。</p><p>方法1：EOF标准输出作为expect标准输入</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line">USER=root  </span><br><span class="line">PASS=123.com  </span><br><span class="line">IP=192.168.1.120  </span><br><span class="line">expect &lt;&lt; EOFset timeout 30spawn ssh $USER@$IP   expect &#123;    &quot;(yes/no)&quot; &#123;send &quot;yes\r&quot;; exp_continue&#125;    &quot;password:&quot; &#123;send &quot;$PASS\r&quot;&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">expect &quot;$USER@*&quot;  &#123;send &quot;$1\r&quot;&#125;  </span><br><span class="line">expect &quot;$USER@*&quot;  &#123;send &quot;exit\r&quot;&#125;  </span><br><span class="line">expect eof  </span><br><span class="line">EOF  </span><br></pre></td></tr></table></figure><p>方法2：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line">USER=root  </span><br><span class="line">PASS=123.com  </span><br><span class="line">IP=192.168.1.120  </span><br><span class="line">expect -c &quot;  </span><br><span class="line">    spawn ssh $USER@$IP  </span><br><span class="line">    expect &#123;  </span><br><span class="line">        \&quot;(yes/no)\&quot; &#123;send \&quot;yes\r\&quot;; exp_continue&#125;  </span><br><span class="line">        \&quot;password:\&quot; &#123;send \&quot;$PASS\r\&quot;; exp_continue&#125;  </span><br><span class="line">        \&quot;$USER@*\&quot; &#123;send \&quot;df -h\r exit\r\&quot;; exp_continue&#125;  </span><br><span class="line">    &#125;&quot;  </span><br></pre></td></tr></table></figure><p>方法3：将expect脚本独立出来</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">登录脚本：  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> login.exp</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/expect</span>  </span><br><span class="line">set ip [lindex $argv 0]  </span><br><span class="line">set user [lindex $argv 1]  </span><br><span class="line">set passwd [lindex $argv 2]  </span><br><span class="line">set cmd [lindex $argv 3]  </span><br><span class="line">if &#123; $argc != 4 &#125; &#123;  </span><br><span class="line">puts &quot;Usage: expect login.exp ip user passwd&quot;  </span><br><span class="line">exit 1  </span><br><span class="line">&#125;  </span><br><span class="line">set timeout 30  </span><br><span class="line">spawn ssh $user@$ip  </span><br><span class="line">expect &#123;      </span><br><span class="line">    &quot;(yes/no)&quot; &#123;send &quot;yes\r&quot;; exp_continue&#125;  </span><br><span class="line">    &quot;password:&quot; &#123;send &quot;$passwd\r&quot;&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">expect &quot;$user@*&quot;  &#123;send &quot;$cmd\r&quot;&#125;  </span><br><span class="line">expect &quot;$user@*&quot;  &#123;send &quot;exit\r&quot;&#125;  </span><br><span class="line">expect eof  </span><br></pre></td></tr></table></figure><p>执行命令脚本：写个循环可以批量操作多台服务器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line">HOST_INFO=user_info.txt  </span><br><span class="line">for ip in $(awk &#x27;&#123;print $1&#125;&#x27; $HOST_INFO)  </span><br><span class="line">do  </span><br><span class="line">    user=$(awk -v I=&quot;$ip&quot; &#x27;I==$1&#123;print $2&#125;&#x27; $HOST_INFO)  </span><br><span class="line">    pass=$(awk -v I=&quot;$ip&quot; &#x27;I==$1&#123;print $3&#125;&#x27; $HOST_INFO)  </span><br><span class="line">    expect login.exp $ip $user $pass $1  </span><br><span class="line">done  </span><br><span class="line">Linux主机SSH连接信息：  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> user_info.txt</span>  </span><br><span class="line">192.168.1.120 root 123456  </span><br><span class="line">创建10个用户，并分别设置密码，密码要求10位且包含大小写字母以及数字，最后需要把每个用户的密码存在指定文件中  </span><br><span class="line">```bash  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#############################################################</span></span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建10个用户，并分别设置密码，密码要求10位且包含大小写字母以及数字</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">最后需要把每个用户的密码存在指定文件中<span class="comment">#前提条件：安装mkpasswd命令</span></span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#############################################################</span></span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">生成10个用户的序列（00-09）</span>  </span><br><span class="line">for u in `seq -w 0 09`do  </span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">创建用户</span>  </span><br><span class="line"> useradd user_$u  </span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">生成密码</span>  </span><br><span class="line"> p=`mkpasswd -s 0 -l 10`   </span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">从标准输入中读取密码进行修改（不安全）</span>  </span><br><span class="line"> echo $p|passwd --stdin user_$u  </span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">常规修改密码</span>  </span><br><span class="line"> echo -e &quot;$p\n$p&quot;|passwd user_$u  </span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">将创建的用户及对应的密码记录到日志文件中</span>  </span><br><span class="line"> echo &quot;user_$u $p&quot; &gt;&gt; /tmp/userpassworddone  </span><br></pre></td></tr></table></figure><h2 id="监控-httpd-的进程数，根据监控情况做相应处理"><a href="#监控-httpd-的进程数，根据监控情况做相应处理" class="headerlink" title="监控 httpd 的进程数，根据监控情况做相应处理"></a>监控 httpd 的进程数，根据监控情况做相应处理</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##############################################################################################################################</span></span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">需求：</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.每隔10s监控httpd的进程数，若进程数大于等于500，则自动重启Apache服务，并检测服务是否重启成功</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2.若未成功则需要再次启动，若重启5次依旧没有成功，则向管理员发送告警邮件，并退出检测</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3.如果启动成功，则等待1分钟后再次检测httpd进程数，若进程数正常，则恢复正常检测（10s一次），否则放弃重启并向管理员发送告警邮件，并退出检测</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##############################################################################################################################</span></span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">计数器函数</span>  </span><br><span class="line">check_service()  </span><br><span class="line">&#123;  </span><br><span class="line"> j=0  </span><br><span class="line"> for i in `seq 1 5`   </span><br><span class="line"> do  </span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">重启Apache的命令</span>  </span><br><span class="line"> /usr/local/apache2/bin/apachectl restart 2&gt; /var/log/httpderr.log      </span><br><span class="line">    #判断服务是否重启成功  </span><br><span class="line"> if [ $? -eq 0 ] then  </span><br><span class="line"> break  </span><br><span class="line"> else  </span><br><span class="line"> j=$[$j+1] fi  </span><br><span class="line">    #判断服务是否已尝试重启5次  </span><br><span class="line"> if [ $j -eq 5 ] then  </span><br><span class="line"> mail.py exit  </span><br><span class="line"> fi  </span><br><span class="line"> done &#125;while :do  </span><br><span class="line"> n=`pgrep -l httpd|wc -l`   </span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">判断httpd服务进程数是否超过500</span>  </span><br><span class="line"> if [ $n -gt 500 ] then  </span><br><span class="line"> /usr/local/apache2/bin/apachectl restart   </span><br><span class="line"> if [ $? -ne 0 ]   </span><br><span class="line"> then  </span><br><span class="line"> check_service   </span><br><span class="line"> else  </span><br><span class="line"> sleep 60  </span><br><span class="line"> n2=`pgrep -l httpd|wc -l`   </span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">判断重启后是否依旧超过500</span>  </span><br><span class="line">             if [ $n2 -gt 500 ]   </span><br><span class="line"> then   </span><br><span class="line"> mail.py exit  </span><br><span class="line"> fi  </span><br><span class="line"> fi  </span><br><span class="line"> fi  </span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">每隔10s检测一次</span>  </span><br><span class="line"> sleep 10done  </span><br></pre></td></tr></table></figure><h2 id="批量修改服务器用户密码"><a href="#批量修改服务器用户密码" class="headerlink" title="批量修改服务器用户密码"></a>批量修改服务器用户密码</h2><p> Linux主机SSH连接信息：旧密码</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> old_pass.txt</span>   </span><br><span class="line">192.168.18.217  root    123456     22  </span><br><span class="line">192.168.18.218  root    123456     22  </span><br><span class="line">内容格式：IP User Password Port  </span><br><span class="line">  </span><br><span class="line">SSH远程修改密码脚本：新密码随机生成  </span><br><span class="line">https://www.linuxprobe.com/books  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line">OLD_INFO=old_pass.txt  </span><br><span class="line">NEW_INFO=new_pass.txt  </span><br><span class="line">for IP in $(awk &#x27;/^[^#]/&#123;print $1&#125;&#x27; $OLD_INFO); do  </span><br><span class="line">    USER=$(awk -v I=$IP &#x27;I==$1&#123;print $2&#125;&#x27; $OLD_INFO)  </span><br><span class="line">    PASS=$(awk -v I=$IP &#x27;I==$1&#123;print $3&#125;&#x27; $OLD_INFO)  </span><br><span class="line">    PORT=$(awk -v I=$IP &#x27;I==$1&#123;print $4&#125;&#x27; $OLD_INFO)  </span><br><span class="line">    NEW_PASS=$(mkpasswd -l 8)  # 随机密码  </span><br><span class="line">    echo &quot;$IP   $USER   $NEW_PASS   $PORT&quot; &gt;&gt; $NEW_INFO  </span><br><span class="line">    expect -c &quot;  </span><br><span class="line">    spawn ssh -p$PORT $USER@$IP  </span><br><span class="line">    set timeout 2  </span><br><span class="line">    expect &#123;  </span><br><span class="line">        \&quot;(yes/no)\&quot; &#123;send \&quot;yes\r\&quot;;exp_continue&#125;  </span><br><span class="line">        \&quot;password:\&quot; &#123;send \&quot;$PASS\r\&quot;;exp_continue&#125;  </span><br><span class="line">        \&quot;$USER@*\&quot; &#123;send \&quot;echo \&#x27;$NEW_PASS\&#x27; |passwd --stdin $USER\r exit\r\&quot;;exp_continue&#125;  </span><br><span class="line">    &#125;&quot;  </span><br><span class="line">done  </span><br><span class="line">生成新密码文件：  </span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> new_pass.txt</span>   </span><br><span class="line">192.168.18.217  root    n8wX3mU%      22  </span><br><span class="line">192.168.18.218  root    c87;ZnnL      22  </span><br></pre></td></tr></table></figure><h2 id="iptables-自动屏蔽访问网站频繁的IP"><a href="#iptables-自动屏蔽访问网站频繁的IP" class="headerlink" title="iptables 自动屏蔽访问网站频繁的IP"></a>iptables 自动屏蔽访问网站频繁的IP</h2><p>场景：恶意访问,安全防范</p><p>1）屏蔽每分钟访问超过200的IP</p><p>方法1：根据访问日志（Nginx为例）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line">DATE=$(date +%d/%b/%Y:%H:%M)  </span><br><span class="line">ABNORMAL_IP=$(tail -n5000 access.log |grep $DATE |awk &#x27;&#123;a[$1]++&#125;END&#123;for(i in a)if(a[i]&gt;100)print i&#125;&#x27;)  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">先<span class="built_in">tail</span>防止文件过大，读取慢，数字可调整每分钟最大的访问量。awk不能直接过滤日志，因为包含特殊字符。</span>  </span><br><span class="line">for IP in $ABNORMAL_IP; do  </span><br><span class="line">    if [ $(iptables -vnL |grep -c &quot;$IP&quot;) -eq 0 ]; then  </span><br><span class="line">        iptables -I INPUT -s $IP -j DROP    fidone  </span><br></pre></td></tr></table></figure><p>方法2：通过TCP建立的连接</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line">ABNORMAL_IP=$(netstat -an |awk &#x27;$4~/:80$/ &amp;&amp; $6~/ESTABLISHED/&#123;gsub(/:[0-9]+/,&quot;&quot;,$5);&#123;a[$5]++&#125;&#125;END&#123;for(i in a)if(a[i]&gt;100)print i&#125;&#x27;)  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">gsub是将第五列（客户端IP）的冒号和端口去掉</span>  </span><br><span class="line">for IP in $ABNORMAL_IP; do  </span><br><span class="line">    if [ $(iptables -vnL |grep -c &quot;$IP&quot;) -eq 0 ]; then  </span><br><span class="line">        iptables -I INPUT -s $IP -j DROP      </span><br><span class="line">        fi  </span><br><span class="line">done  </span><br></pre></td></tr></table></figure><p>2）屏蔽每分钟SSH尝试登录超过10次的IP</p><p>方法1：通过lastb获取登录状态:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line">DATE=$(date +&quot;%a %b %e %H:%M&quot;) #星期月天时分  %e单数字时显示7，而%d显示07  </span><br><span class="line">ABNORMAL_IP=$(lastb |grep &quot;$DATE&quot; |awk &#x27;&#123;a[$3]++&#125;END&#123;for(i in a)if(a[i]&gt;10)print i&#125;&#x27;)for IP in $ABNORMAL_IP; do  </span><br><span class="line">    if [ $(iptables -vnL |grep -c &quot;$IP&quot;) -eq 0 ]; then  </span><br><span class="line">        iptables -I INPUT -s $IP -j DROP    fidone  </span><br></pre></td></tr></table></figure><p>方法2：通过日志获取登录状态</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line">DATE=$(date +&quot;%b %d %H&quot;)  </span><br><span class="line">ABNORMAL_IP=&quot;$(tail -n10000 /var/log/auth.log |grep &quot;$DATE&quot; |awk &#x27;/Failed/&#123;a[$(NF-3)]++&#125;END&#123;for(i in a)if(a[i]&gt;5)print i&#125;&#x27;)&quot;  </span><br><span class="line">for IP in $ABNORMAL_IP; do  </span><br><span class="line">    if [ $(iptables -vnL |grep -c &quot;$IP&quot;) -eq 0 ]; then  </span><br><span class="line">        iptables -A INPUT -s $IP -j DROP          </span><br><span class="line">        echo &quot;$(date +&quot;%F %T&quot;) - iptables -A INPUT -s $IP -j DROP&quot; &gt;&gt;~/ssh-login-limit.log      </span><br><span class="line">    fi  </span><br><span class="line">done  </span><br></pre></td></tr></table></figure><h2 id="根据web访问日志，封禁请求量异常的IP，如IP在半小时后恢复正常，则解除封禁"><a href="#根据web访问日志，封禁请求量异常的IP，如IP在半小时后恢复正常，则解除封禁" class="headerlink" title="根据web访问日志，封禁请求量异常的IP，如IP在半小时后恢复正常，则解除封禁"></a>根据web访问日志，封禁请求量异常的IP，如IP在半小时后恢复正常，则解除封禁</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###################################################################################</span></span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">根据web访问日志，封禁请求量异常的IP，如IP在半小时后恢复正常，则解除封禁</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###################################################################################</span></span>  </span><br><span class="line">logfile=/data/log/access.log  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">显示一分钟前的小时和分钟</span>  </span><br><span class="line">d1=`date -d &quot;-1 minute&quot; +%H%M`  </span><br><span class="line">d2=`date +%M`  </span><br><span class="line">ipt=/sbin/iptables  </span><br><span class="line">ips=/tmp/ips.txt  </span><br><span class="line">block()  </span><br><span class="line">&#123;   </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将一分钟前的日志全部过滤出来并提取IP以及统计访问次数</span>  </span><br><span class="line"> grep &#x27;$d1:&#x27; $logfile|awk &#x27;&#123;print $1&#125;&#x27;|sort -n|uniq -c|sort -n &gt; $ips  </span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">利用<span class="keyword">for</span>循环将次数超过100的IP依次遍历出来并予以封禁</span>  </span><br><span class="line"> for i in `awk &#x27;$1&gt;100 &#123;print $2&#125;&#x27; $ips`   </span><br><span class="line"> do  </span><br><span class="line"><span class="meta prompt_"> $</span><span class="language-bash">ipt -I INPUT -p tcp --dport 80 -s <span class="variable">$i</span> -j REJECT</span>   </span><br><span class="line"> echo &quot;`date +%F-%T` $i&quot; &gt;&gt; /tmp/badip.log   </span><br><span class="line"> done  </span><br><span class="line">&#125;  </span><br><span class="line">unblock()  </span><br><span class="line">&#123;   </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将封禁后所产生的pkts数量小于10的IP依次遍历予以解封</span>  </span><br><span class="line"> for a in `$ipt -nvL INPUT --line-numbers |grep &#x27;0.0.0.0/0&#x27;|awk &#x27;$2&lt;10 &#123;print $1&#125;&#x27;|sort -nr`   </span><br><span class="line"> do   </span><br><span class="line"><span class="meta prompt_"> $</span><span class="language-bash">ipt -D INPUT <span class="variable">$a</span></span>  </span><br><span class="line"> done  </span><br><span class="line"><span class="meta prompt_"> $</span><span class="language-bash">ipt -Z</span>  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">当时间在00分以及30分时执行解封函数</span>  </span><br><span class="line">if [ $d2 -eq &quot;00&quot; ] || [ $d2 -eq &quot;30&quot; ]   </span><br><span class="line"> then  </span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">要先解再封，因为刚刚封禁时产生的pkts数量很少</span>  </span><br><span class="line"> unblock  </span><br><span class="line"> block   </span><br><span class="line"> else  </span><br><span class="line"> block  </span><br><span class="line">fi  </span><br></pre></td></tr></table></figure><h2 id="判断用户输入的是否为IP地址"><a href="#判断用户输入的是否为IP地址" class="headerlink" title="判断用户输入的是否为IP地址"></a>判断用户输入的是否为IP地址</h2><p>方法1:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line">function check_ip()&#123;  </span><br><span class="line">    IP=$1  </span><br><span class="line">    VALID_CHECK=$(echo $IP|awk -F. &#x27;$1&lt; =255&amp;&amp;$2&lt;=255&amp;&amp;$3&lt;=255&amp;&amp;$4&lt;=255&#123;print &quot;yes&quot;&#125;&#x27;)  </span><br><span class="line">    if echo $IP|grep -E &quot;^[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;$&quot;&gt;/dev/null; then  </span><br><span class="line">        if [ $VALID_CHECK == &quot;yes&quot; ]; then  </span><br><span class="line">            echo &quot;$IP available.&quot;  </span><br><span class="line">        else  </span><br><span class="line">            echo &quot;$IP not available!&quot;  </span><br><span class="line">        fi  </span><br><span class="line">    else  </span><br><span class="line">        echo &quot;Format error!&quot;  </span><br><span class="line">    fi  </span><br><span class="line">&#125;  </span><br><span class="line">check_ip 192.168.1.1  </span><br><span class="line">check_ip 256.1.1.1  </span><br></pre></td></tr></table></figure><p>方法2：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line">function check_ip()&#123;  </span><br><span class="line">    IP=$1  </span><br><span class="line">    if [[ $IP =~ ^[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;$ ]]; then  </span><br><span class="line">        FIELD1=$(echo $IP|cut -d. -f1)  </span><br><span class="line">        FIELD2=$(echo $IP|cut -d. -f2)  </span><br><span class="line">        FIELD3=$(echo $IP|cut -d. -f3)  </span><br><span class="line">        FIELD4=$(echo $IP|cut -d. -f4)  </span><br><span class="line">        if [ $FIELD1 -le 255 -a $FIELD2 -le 255 -a $FIELD3 -le 255 -a $FIELD4 -le 255 ]; then  </span><br><span class="line">            echo &quot;$IP available.&quot;  </span><br><span class="line">        else  </span><br><span class="line">            echo &quot;$IP not available!&quot;  </span><br><span class="line">        fi  </span><br><span class="line">    else  </span><br><span class="line">        echo &quot;Format error!&quot;  </span><br><span class="line">    fi  </span><br><span class="line">&#125;  </span><br><span class="line">check_ip 192.168.1.1  </span><br><span class="line">check_ip 256.1.1.1  </span><br></pre></td></tr></table></figure><p>增加版：</p><p>加个死循环，如果IP可用就退出，不可用提示继续输入，并使用awk判断。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line">function check_ip()&#123;  </span><br><span class="line">    local IP=$1  </span><br><span class="line">    VALID_CHECK=$(echo $IP|awk -F. &#x27;$1&lt; =255&amp;&amp;$2&lt;=255&amp;&amp;$3&lt;=255&amp;&amp;$4&lt;=255&#123;print &quot;yes&quot;&#125;&#x27;)  </span><br><span class="line">    if echo $IP|grep -E &quot;^[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;$&quot; &gt;/dev/null; then  </span><br><span class="line">        if [ $VALID_CHECK == &quot;yes&quot; ]; then  </span><br><span class="line">            return 0  </span><br><span class="line">        else  </span><br><span class="line">            echo &quot;$IP not available!&quot;  </span><br><span class="line">            return 1  </span><br><span class="line">        fi  </span><br><span class="line">    else  </span><br><span class="line">        echo &quot;Format error! Please input again.&quot;  </span><br><span class="line">        return 1  </span><br><span class="line">    fi  </span><br><span class="line">&#125;  </span><br><span class="line">while true; do  </span><br><span class="line">    read -p &quot;Please enter IP: &quot; IP  </span><br><span class="line">    check_ip $IP  </span><br><span class="line">    [ $? -eq 0 ] &amp;&amp; break || continue  </span><br><span class="line">done  </span><br></pre></td></tr></table></figure><p>转载自<br><a href="https://mp.weixin.qq.com/s/FrVj5bZfMYsxoQxgQAMJ_A">18个一线工作中常用 Shell 脚本, 太好用啦~</a></p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> general </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> general </tag>
            
            <tag> linux </tag>
            
            <tag> 常用脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arrays.asList() 的坑</title>
      <link href="/posts/58200.html"/>
      <url>/posts/58200.html</url>
      
        <content type="html"><![CDATA[<p>在Java中，我们经常需要将数组转换为List来方便地进行操作。Arrays.asList()方法是一种常见的方式，但是它存在一个不太常见但需要注意的坑。</p><h2 id="Arrays-asList-方法介绍"><a href="#Arrays-asList-方法介绍" class="headerlink" title="Arrays.asList()方法介绍"></a>Arrays.asList()方法介绍</h2><p>Arrays.asList()方法是将数组转换为List的方法，它返回一个List对象，但这个List对象并不是java.util.ArrayList对象，而是Arrays内部的ArrayList对象。</p><p>Arrays.ArrayList类继承自AbstractList，实现了List接口。它重写了add()、remove()等修改List结构的方法，并将它们直接抛出UnsupportedOperationException异常，从而禁止了对List结构的修改。</p><p>具体来说，Arrays.asList()方法返回的是Arrays类中的一个私有静态内部类ArrayList，它继承自AbstractList类，实现了List接口。</p><p>Arrays.asList()方法的使用非常简单，只需要将一个数组作为参数传递给该方法即可。例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] arr = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">List&lt;String&gt; list = Arrays.asList(arr);</span><br></pre></td></tr></table></figure><h2 id="Arrays-asList-方法的坑"><a href="#Arrays-asList-方法的坑" class="headerlink" title="Arrays.asList()方法的坑"></a>Arrays.asList()方法的坑</h2><p>尽管Arrays.asList()方法很方便，但也存在一些坑，其中最常见的一个是：在使用Arrays.asList()方法时，如果对返回的List对象进行修改（例如增加、删除元素），将会抛出”UnsupportedOperationException”异常。</p><p>为什么会出现这个异常呢？这是因为Arrays.asList()方法返回的List对象，是一个固定大小的List，不能进行结构上的修改，否则会抛出异常。</p><p>下面的代码演示了这个问题：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] arr = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">List&lt;String&gt; list = Arrays.asList(arr);</span><br><span class="line">list.add(<span class="string">&quot;d&quot;</span>); <span class="comment">// 抛出 UnsupportedOperationException 异常</span></span><br></pre></td></tr></table></figure><p>上述代码中，我们尝试向List对象中添加一个新的元素”d”，结果会抛出”UnsupportedOperationException”异常。</p><h2 id="解决Arrays-asList-方法的坑"><a href="#解决Arrays-asList-方法的坑" class="headerlink" title="解决Arrays.asList()方法的坑"></a>解决Arrays.asList()方法的坑</h2><p>要解决Arrays.asList()方法的坑，我们需要将返回的List对象转换为一个可修改的List对象。有几种方法可以实现这个目标：</p><h3 id="使用java-util-ArrayList类"><a href="#使用java-util-ArrayList类" class="headerlink" title="使用java.util.ArrayList类"></a>使用java.util.ArrayList类</h3><p>我们可以使用java.util.ArrayList类，将Arrays.asList()方法返回的List对象转换为一个java.util.ArrayList对象，示例如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] arr = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(arr));</span><br><span class="line">list.add(<span class="string">&quot;d&quot;</span>); <span class="comment">// 正常运行</span></span><br></pre></td></tr></table></figure><p>上述代码中，我们首先使用Arrays.asList()方法将一个数组转换为一个List对象，然后使用ArrayList的构造方法，将这个List对象转换为一个java.util.ArrayList对象，最后可以向这个ArrayList对象中添加元素。</p><h3 id="使用Collections类"><a href="#使用Collections类" class="headerlink" title="使用Collections类"></a>使用Collections类</h3><p>我们也可以使用Collections类提供的静态方法，将Arrays.asList()方法返回的List对象转换为一个可修改的List对象，示例如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] arr = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(arr));</span><br><span class="line">Collections.addAll(list, <span class="string">&quot;d&quot;</span>); <span class="comment">// 正常运行</span></span><br></pre></td></tr></table></figure><p>通过Collections.addAll()方法，我们可以将数组中的元素逐个添加到一个新的ArrayList对象中，从而实现了可修改性。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在使用Arrays.asList()方法时，需要注意返回的List对象是一个固定大小的List，不支持结构上的修改操作。为了避免这个陷阱，我们可以使用java.util.ArrayList或Collections类提供的方法将返回的List对象转换为可修改的List。通过了解这个陷阱并采取相应的解决方案，我们可以安全地将数组转换为List，并避免潜在的异常情况。</p><p>不要让Arrays.asList()的陷阱坑了你的代码！</p><p>在Java中，我们经常需要将数组转换为List来方便地进行操作。Arrays.asList()方法是一种常见的方式，但是它存在一个不太常见但需要注意的坑。本文将深入探讨Arrays.asList()的使用，揭示其中的陷阱，并提供解决方案。</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> Arrays.asList() 的坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot扫码登录</title>
      <link href="/posts/18184.html"/>
      <url>/posts/18184.html</url>
      
        <content type="html"><![CDATA[<h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><p>这张表就是记录一下谁扫码了。谁登录了。</p><p>User_Token表</p><p>字段如下：</p><ul><li>uuid : 用于确保唯一性</li><li>userId ：谁登录的</li><li>loginTime ：登录时间</li><li>createTime ：创建时间 用于判断是否过期</li><li>state：是否二维码失效 0有效 1失效</li></ul><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><p>扫码登录这个业务逻辑需要下面这些角色</p><ul><li>android端 or 微信Web端 ：扫码</li><li>PC端 ：被扫。登录</li><li>服务端：掌控全局，提供接口。</li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口有2个</p><ul><li>生成二维码接口：生成一个二维码。二维码中有UUID。</li><li>确认身份接口：确定身份以及判断是否二维码过期等</li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>要把大象装冰箱一共分几步？</p><ul><li>PC端打开。调用生成二维码接口 并与 服务端建立链接。链接使用uuid进行绑定</li><li>微信Web端进行扫码。获取二维码中的uuid。</li><li>微信Web端拿到uuid以后。显示是否登录页面。点击确定后 调用 确认身份接口。</li><li>确认身份接口通过以后。服务端给PC端发送信息。完成登录。此时链接断开。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="二维码获取接口"><a href="#二维码获取接口" class="headerlink" title="二维码获取接口"></a>二维码获取接口</h3><p>首先需要获取二维码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取登录二维码、放入Token  </span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/getLoginQr&quot; ,method = RequestMethod.GET)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createCodeImg</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>&#123;  </span><br><span class="line">    response.setHeader(<span class="string">&quot;Pragma&quot;</span>, <span class="string">&quot;No-cache&quot;</span>);  </span><br><span class="line">    response.setHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">    response.setDateHeader(<span class="string">&quot;Expires&quot;</span>, <span class="number">0</span>);  </span><br><span class="line">    response.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="comment">//这里没啥操作 就是生成一个UUID插入 数据库的表里  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> userService.createQrImg();  </span><br><span class="line">        response.setHeader(<span class="string">&quot;uuid&quot;</span>, uuid);  </span><br><span class="line">        <span class="comment">// 这里是开源工具类 hutool里的QrCodeUtil  </span></span><br><span class="line">        <span class="comment">// 网址：http://hutool.mydoc.io/  </span></span><br><span class="line">        QrCodeUtil.generate(uuid, <span class="number">300</span>, <span class="number">300</span>, <span class="string">&quot;jpg&quot;</span>,response.getOutputStream());  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h3><p>前端使用了xmlhttp进行处理</p><p>为什么？</p><p>因为后端返回的是一个流。那么流中。就是放置了二维码中的uuid。这个uuid作为一次会话的标识符使用。那么前端也需要拿到。跟后端进行webSocket链接。</p><p>这样有人扫码后。服务端才可以使用webSocket的方式通知前端。有人扫码成功了。你做你的业务吧。酱紫。</p><p>为了拿到请求中header中放置的uuid,所以通过xmlhttp进行处理</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;qrCodeImg-box&quot;</span> <span class="attr">id</span>=<span class="string">&quot;qrImgDiv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;  </span><br><span class="line">    <span class="title function_">initQrImg</span>();  </span><br><span class="line">&#125;);  </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">initQrImg</span>(<span class="params"></span>)&#123;  </span><br><span class="line">    $(<span class="string">&quot;#qrImgDiv&quot;</span>).<span class="title function_">empty</span>();  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">var</span> xmlhttp;  </span><br><span class="line">    xmlhttp=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();  </span><br><span class="line">    xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,getQrPath,<span class="literal">true</span>);  </span><br><span class="line">    xmlhttp.<span class="property">responseType</span> = <span class="string">&quot;blob&quot;</span>;  </span><br><span class="line">    xmlhttp.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;  </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  </span><br><span class="line">        uuid = <span class="variable language_">this</span>.<span class="title function_">getResponseHeader</span>(<span class="string">&quot;uuid&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;  </span><br><span class="line">            <span class="keyword">var</span> blob = <span class="variable language_">this</span>.<span class="property">response</span>;  </span><br><span class="line">            <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);  </span><br><span class="line">            img.<span class="property">className</span> = <span class="string">&#x27;qrCodeBox-img&#x27;</span>;  </span><br><span class="line">            img.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;  </span><br><span class="line">                <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(img.<span class="property">src</span>);  </span><br><span class="line">            &#125;;  </span><br><span class="line">            img.<span class="property">src</span> = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob);  </span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;qrImgDiv&quot;</span>).<span class="title function_">appendChild</span>(img);  </span><br><span class="line">  </span><br><span class="line">            <span class="title function_">initWebSocket</span>();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    xmlhttp.<span class="title function_">send</span>();  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> path = <span class="string">&quot;://localhost:8085&quot;</span>;  </span><br><span class="line"><span class="keyword">var</span> getQrPath = <span class="string">&quot;http&quot;</span> \+ path + <span class="string">&quot;/user/getLoginQr&quot;</span>;  </span><br><span class="line"><span class="keyword">var</span> wsPath = <span class="string">&quot;ws&quot;</span> \+ path + <span class="string">&quot;/websocket/&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initWebSocket</span>(<span class="params"></span>)&#123;  </span><br><span class="line">  </span><br><span class="line">   <span class="keyword">if</span>(<span class="title function_">typeof</span>(<span class="title class_">WebSocket</span>) == <span class="string">&quot;undefined&quot;</span>) &#123;  </span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;您的浏览器不支持WebSocket&quot;</span>);  </span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;您的浏览器支持WebSocket&quot;</span>);  </span><br><span class="line">       <span class="comment">//实现化WebSocket对象，指定要连接的服务器地址与端口 建立连接  </span></span><br><span class="line">       <span class="comment">//等同于socket = new WebSocket(&quot;ws://localhost:8083/checkcentersys/websocket/20&quot;);  </span></span><br><span class="line">       <span class="keyword">var</span> wsPathStr = wsPath+uuid;  </span><br><span class="line">       socket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(wsPathStr);  </span><br><span class="line">       <span class="comment">//打开事件  </span></span><br><span class="line">       socket.<span class="property">onopen</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Socket 已打开&quot;</span>);  </span><br><span class="line">           <span class="comment">//socket.send(&quot;这是来自客户端的消息&quot; + location.href + new Date());  </span></span><br><span class="line">       &#125;;  </span><br><span class="line">       <span class="comment">//获得消息事件  </span></span><br><span class="line">       socket.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">msg</span>) &#123;  </span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(msg.<span class="property">data</span>);  </span><br><span class="line">           <span class="keyword">var</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(msg.<span class="property">data</span>);  </span><br><span class="line">           <span class="keyword">if</span>(data.<span class="property">code</span> == <span class="number">200</span>)&#123;  </span><br><span class="line">               <span class="title function_">alert</span>(<span class="string">&quot;登录成功！&quot;</span>);  </span><br><span class="line">               <span class="comment">//这里存放自己业务需要的数据。怎么放自己看  </span></span><br><span class="line">               <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="property">uuid</span> = uuid;  </span><br><span class="line">               <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="property">userId</span> = data.<span class="property">userId</span>;  </span><br><span class="line">               <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="property">projId</span> = data.<span class="property">projId</span>;  </span><br><span class="line">  </span><br><span class="line">               <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;pages/upload.html&quot;</span>  </span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">               <span class="comment">//如果过期了，关闭连接、重置连接、刷新二维码  </span></span><br><span class="line">               socket.<span class="title function_">close</span>();  </span><br><span class="line">               <span class="title function_">initQrImg</span>();  </span><br><span class="line">           &#125;  </span><br><span class="line">           <span class="comment">//发现消息进入 开始处理前端触发逻辑  </span></span><br><span class="line">       &#125;;  </span><br><span class="line">       <span class="comment">//关闭事件  </span></span><br><span class="line">       socket.<span class="property">onclose</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Socket已关闭&quot;</span>);  </span><br><span class="line">       &#125;;  </span><br><span class="line">       <span class="comment">//发生了错误事件  </span></span><br><span class="line">       socket.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">           <span class="title function_">alert</span>(<span class="string">&quot;Socket发生了错误&quot;</span>);  </span><br><span class="line">           <span class="comment">//此时可以尝试刷新页面  </span></span><br><span class="line">       &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-Boot-中操作-WebSocket"><a href="#Spring-Boot-中操作-WebSocket" class="headerlink" title="Spring Boot 中操作 WebSocket"></a>Spring Boot 中操作 WebSocket</h3><h4 id="增加pom-xml"><a href="#增加pom-xml" class="headerlink" title="增加pom.xml"></a>增加pom.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="增加bean"><a href="#增加bean" class="headerlink" title="增加bean"></a>增加bean</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * WebSocket的支持  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Bean</span>  </span><br><span class="line"><span class="keyword">public</span> ServerEndpointExporter <span class="title function_">serverEndpointExporter</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServerEndpointExporter</span>();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义WebSocketServer"><a href="#定义WebSocketServer" class="headerlink" title="定义WebSocketServer"></a>定义WebSocketServer</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.stylefeng.guns.rest.modular.inve.websocket;  </span><br><span class="line">   </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> \* Created by jiangjiacheng on 2019/6/4.  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArraySet;  </span><br><span class="line">   </span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnClose;  </span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnError;  </span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnMessage;  </span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnOpen;  </span><br><span class="line"><span class="keyword">import</span> javax.websocket.Session;  </span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.PathParam;  </span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;  </span><br><span class="line"><span class="keyword">import</span> cn.hutool.log.Log;  </span><br><span class="line"><span class="keyword">import</span> cn.hutool.log.LogFactory;  </span><br><span class="line">   </span><br><span class="line"><span class="meta">@ServerEndpoint(&quot;/websocket/&#123;sid&#125;&quot;)</span>  </span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketServer</span> &#123;  </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">static</span> Log log=LogFactory.get(WebSocketServer.class);  </span><br><span class="line">   </span><br><span class="line">    <span class="comment">//静态变量，用来记录当前在线连接数。应该把它设计成线程安全的。  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">onlineCount</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">   </span><br><span class="line">    <span class="comment">//concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CopyOnWriteArraySet&lt;WebSocketServer&gt; webSocketSet = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArraySet</span>&lt;WebSocketServer&gt;();  </span><br><span class="line">   </span><br><span class="line">    <span class="comment">//与某个客户端的连接会话，需要通过它来给客户端发送数据  </span></span><br><span class="line">    <span class="keyword">private</span> Session session;  </span><br><span class="line">   </span><br><span class="line">    <span class="comment">//接收sid  </span></span><br><span class="line">    <span class="keyword">private</span> String sid=<span class="string">&quot;&quot;</span>;  </span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     \* 连接建立成功调用的方法*/</span>  </span><br><span class="line">    <span class="meta">@OnOpen</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOpen</span><span class="params">(Session session,<span class="meta">@PathParam(&quot;sid&quot;)</span> String sid)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.session = session;  </span><br><span class="line">        webSocketSet.add(<span class="built_in">this</span>); <span class="comment">//加入set中  </span></span><br><span class="line">        addOnlineCount(); <span class="comment">//在线数加1  </span></span><br><span class="line">        log.info(<span class="string">&quot;有新窗口开始监听:&quot;</span>+sid+<span class="string">&quot;,当前在线人数为&quot;</span> \+ getOnlineCount());  </span><br><span class="line">        <span class="built_in">this</span>.sid=sid;  </span><br><span class="line">        <span class="comment">/*try &#123;  </span></span><br><span class="line"><span class="comment">            sendMessage(&quot;连接成功&quot;);  </span></span><br><span class="line"><span class="comment">        &#125; catch (IOException e) &#123;  </span></span><br><span class="line"><span class="comment">            log.error(&quot;websocket IO异常&quot;);  </span></span><br><span class="line"><span class="comment">        &#125;*/</span>  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     \* 连接关闭调用的方法  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@OnClose</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClose</span><span class="params">()</span> &#123;  </span><br><span class="line">        webSocketSet.remove(<span class="built_in">this</span>); <span class="comment">//从set中删除  </span></span><br><span class="line">        subOnlineCount(); <span class="comment">//在线数减1  </span></span><br><span class="line">        log.info(<span class="string">&quot;有一连接关闭！当前在线人数为&quot;</span> \+ getOnlineCount());  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     \* 收到客户端消息后调用的方法  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 客户端发送过来的消息*/</span>  </span><br><span class="line">    <span class="meta">@OnMessage</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(String message, Session session)</span> &#123;  </span><br><span class="line">        log.info(<span class="string">&quot;收到来自窗口&quot;</span>+sid+<span class="string">&quot;的信息:&quot;</span>+message);  </span><br><span class="line">        <span class="comment">//群发消息  </span></span><br><span class="line">        <span class="keyword">for</span> (WebSocketServer item : webSocketSet) &#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                item.sendMessage(message);  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">                e.printStackTrace();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> error  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@OnError</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Session session, Throwable error)</span> &#123;  </span><br><span class="line">        log.error(<span class="string">&quot;发生错误&quot;</span>);  </span><br><span class="line">        error.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     \* 实现服务器主动推送  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="built_in">this</span>.session.getBasicRemote().sendText(message);  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     \* 群发自定义消息  </span></span><br><span class="line"><span class="comment">     \* */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendInfo</span><span class="params">(String message,<span class="meta">@PathParam(&quot;sid&quot;)</span> String sid)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        log.info(<span class="string">&quot;推送消息到窗口&quot;</span>+sid+<span class="string">&quot;，推送内容:&quot;</span>+message);  </span><br><span class="line">        <span class="keyword">for</span> (WebSocketServer item : webSocketSet) &#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                <span class="comment">//这里可以设定只推送给这个sid的，为null则全部推送  </span></span><br><span class="line">                <span class="keyword">if</span>(sid == <span class="literal">null</span>) &#123;  </span><br><span class="line">                    item.sendMessage(message);  </span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.sid.equals(sid))&#123;  </span><br><span class="line">                    item.sendMessage(message);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">                <span class="keyword">continue</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">getOnlineCount</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> onlineCount;  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">addOnlineCount</span><span class="params">()</span> &#123;  </span><br><span class="line">        WebSocketServer.onlineCount++;  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">subOnlineCount</span><span class="params">()</span> &#123;  </span><br><span class="line">        WebSocketServer.onlineCount--;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就增加了webSocket的支持啦。</p><ol><li><p>首先PC端调用接口展示出来了二维码。</p></li><li><p>请求二维码中的http请求。就有uuid在 header中。直接取到uuid 作为webSocket的标识sid进行连接。</p></li><li><p>然后手机端使用相机拿到二维码中的uuid。使用uuid + userid 请求 扫码成功接口。</p></li></ol><h3 id="扫码成功接口"><a href="#扫码成功接口" class="headerlink" title="扫码成功接口"></a>扫码成功接口</h3><p>Controller代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> \* 确认身份接口：确定身份以及判断是否二维码过期等  </span></span><br><span class="line"><span class="comment"> \* <span class="doctag">@param</span> token  </span></span><br><span class="line"><span class="comment"> \* <span class="doctag">@param</span> userId  </span></span><br><span class="line"><span class="comment"> \* <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/bindUserIdAndToken&quot; ,method = RequestMethod.GET)</span>  </span><br><span class="line"><span class="meta">@ResponseBody</span>  </span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">bindUserIdAndToken</span><span class="params">(<span class="meta">@RequestParam(&quot;token&quot;)</span> String token ,  </span></span><br><span class="line"><span class="params">                                 <span class="meta">@RequestParam(&quot;userId&quot;)</span> Integer userId,  </span></span><br><span class="line"><span class="params">                                 <span class="meta">@RequestParam(required = false,value = &quot;projId&quot;)</span> Integer projId)</span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SuccessTip</span>(userService.bindUserIdAndToken(userId,token,projId));  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ErrorTip</span>(<span class="number">500</span>,e.getMessage());  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">bindUserIdAndToken</span><span class="params">(Integer userId, String token,Integer projId)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">QrLoginToken</span> <span class="variable">qrLoginToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QrLoginToken</span>();  </span><br><span class="line">    qrLoginToken.setToken(token);  </span><br><span class="line">    qrLoginToken = qrLoginTokenMapper.selectOne(qrLoginToken);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">null</span> == qrLoginToken)&#123;  </span><br><span class="line">        <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;错误的请求！&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">Date</span> <span class="variable">createDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(qrLoginToken.getCreateTime().getTime() + (<span class="number">1000</span> * <span class="number">60</span> \* Constant.LOGIN\_VALIDATION\_TIME));  </span><br><span class="line">    <span class="type">Date</span> <span class="variable">nowDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();  </span><br><span class="line">    <span class="keyword">if</span>(nowDate.getTime() &gt; createDate.getTime())&#123;<span class="comment">//当前时间大于校验时间  </span></span><br><span class="line">  </span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();  </span><br><span class="line">        jsonObject.put(<span class="string">&quot;code&quot;</span>,<span class="number">500</span>);  </span><br><span class="line">        jsonObject.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;二维码失效！&quot;</span>);  </span><br><span class="line">        WebSocketServer.sendInfo(jsonObject.toJSONString(),token);  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;二维码失效！&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    qrLoginToken.setLoginTime(<span class="keyword">new</span> <span class="title class_">Date</span>());  </span><br><span class="line">    qrLoginToken.setUserId(userId);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> qrLoginTokenMapper.updateById(qrLoginToken);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();  </span><br><span class="line">    jsonObject.put(<span class="string">&quot;code&quot;</span>,<span class="number">200</span>);  </span><br><span class="line">    jsonObject.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;ok&quot;</span>);  </span><br><span class="line">    jsonObject.put(<span class="string">&quot;userId&quot;</span>,userId);  </span><br><span class="line">    <span class="keyword">if</span>(ToolUtil.isNotEmpty(projId))&#123;  </span><br><span class="line">        jsonObject.put(<span class="string">&quot;projId&quot;</span>,projId);  </span><br><span class="line">    &#125;  </span><br><span class="line">    WebSocketServer.sendInfo(jsonObject.toJSONString(),token);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span>(i &gt; <span class="number">0</span> )&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">        <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;服务器异常！&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑大概就是判断一下 token对不对。如果对的话。时间是否过期。如果没有过期进行业务逻辑操作</p><p>其中下面的这行代码比较关键</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这句话比较关键  </span></span><br><span class="line">WebSocketServer.sendInfo(jsonObject.toJSONString(),token);</span><br></pre></td></tr></table></figure><p>就是通知前端已经登录成功了。并且给他业务所需要的内容。然后前端代码接收到了。就进行业务逻辑操作就可以啦。</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> SpringBoot扫码登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随机图片api整理</title>
      <link href="/posts/41139.html"/>
      <url>/posts/41139.html</url>
      
        <content type="html"><![CDATA[<div class="flink"><div class="flink-name">随机图片api</div><div class="flink-desc">整理的博客收藏</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://blog.jixiaob.cn/?post=93" title="【持续更新】36个二次元、三次元随机图API接口分享及预览" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://blog.jixiaob.cn/content/uploadfile/202210/thum-fc6a1667066816.jpg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="【持续更新】36个二次元、三次元随机图API接口分享及预览" />              </div>              <div class="flink-item-name">【持续更新】36个二次元、三次元随机图API接口分享及预览</div>               <div class="flink-item-desc" title="赵苦瓜のblog">赵苦瓜のblog</div>            </a>          </div></div></div>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
          <category> 公共api </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> 公共api </tag>
            
            <tag> 随机图片api整理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot开启gzip</title>
      <link href="/posts/7152.html"/>
      <url>/posts/7152.html</url>
      
        <content type="html"><![CDATA[<h2 id="在-SpringBoot-中启用-GZIP-压缩"><a href="#在-SpringBoot-中启用-GZIP-压缩" class="headerlink" title="在 SpringBoot 中启用 GZIP 压缩"></a>在 SpringBoot 中启用 GZIP 压缩</h2><p>打开application.yml文件，添加如下配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">min-response-size:</span> <span class="number">1024</span> <span class="comment"># 当返回数据超过这个大小，对返回数据压缩，单位Byte</span></span><br><span class="line">    <span class="attr">mime-types:</span> <span class="string">application/javascript,text/css,application/json,application/xml,text/html,text/xml,text/plain</span></span><br></pre></td></tr></table></figure><h2 id="在tomcat中开启GZIP压缩"><a href="#在tomcat中开启GZIP压缩" class="headerlink" title="在tomcat中开启GZIP压缩"></a>在tomcat中开启GZIP压缩</h2><p>打开 Tomcat 的 server.xml，在 Connector 标签中加入下面属性</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">compression</span>=<span class="string">&quot;on&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">compressionMinSize</span>=<span class="string">&quot;2048&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">noCompressionUserAgents</span>=<span class="string">&quot;gozilla, traviata&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">compressableMimeType</span>=<span class="string">&quot;text/html,text/xml,text/javascript,application/javascript,text/css,text/plain,text/json&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> SpringBoot开启gzip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xml文件不在resource下时配置方法</title>
      <link href="/posts/59895.html"/>
      <url>/posts/59895.html</url>
      
        <content type="html"><![CDATA[<ol><li>在pom中添加build打包的配置</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目打包时会讲java目录中的*.xml文件也进行打包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/mapping/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>在application.properties文件中添加</li></ol><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置mapper xml文件寻找的路径</span></span><br><span class="line"><span class="comment">#此时xml必须在mapping文件夹下</span></span><br><span class="line"><span class="string">mybatis-plus.mapper-locations=classpath:com/study/**/mapping/*.xml</span>  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mybatisPlus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mybatisPlus </tag>
            
            <tag> xml文件不在resource下时配置方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis-plus无法使用BaseMapper的公用方法</title>
      <link href="/posts/14681.html"/>
      <url>/posts/14681.html</url>
      
        <content type="html"><![CDATA[<p>报错原因：<br>原本的mybatis里面再次引入mybatis-plus之后，使用公用的BaseMapper无法使用报错：也就是无法找到sql，但是可以使用自己编写的sql</p><p>解决办法：<br>只需要在你配置数据源的地方，换一个类即可：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SqlSessionFactoryBean</span> <span class="variable">sessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br></pre></td></tr></table></figure><p>更改为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">MybatisSqlSessionFactoryBean</span> <span class="variable">sessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisSqlSessionFactoryBean</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mybatisPlus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mybatisPlus </tag>
            
            <tag> mybatis-plus无法使用BaseMapper的公用方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot下最全的依赖注入方式</title>
      <link href="/posts/1170.html"/>
      <url>/posts/1170.html</url>
      
        <content type="html"><![CDATA[<h2 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h2><p>通过属性注入的方式非常常用，或者说是最常用的</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Wolf1Bean wolf1Bean;<span class="comment">//通过属性注入</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="setter-方法注入"><a href="#setter-方法注入" class="headerlink" title="setter 方法注入"></a>setter 方法注入</h2><p>除了通过属性注入，通过 setter 方法也可以实现注入：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Wolf3Bean wolf3Bean;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span>  <span class="comment">//通过setter方法实现注入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWolf3Bean</span><span class="params">(Wolf3Bean wolf3Bean)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.wolf3Bean = wolf3Bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h2><p>当两个类属于强关联时，我们也可以通过构造器的方式来实现注入：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> Wolf2Bean wolf2Bean;</span><br><span class="line">    </span><br><span class="line">     <span class="meta">@Autowired</span> <span class="comment">//通过构造器注入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(Wolf2Bean wolf2Bean)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.wolf2Bean = wolf2Bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口注入"><a href="#接口注入" class="headerlink" title="接口注入"></a>接口注入</h2><p>在上面的三种常规注入方式中，假如我们想要注入一个接口，而当前接口又有多个实现类，那么这时候就会报错，因为 Spring 无法知道到底应该注入哪一个实现类。</p><p>比如我们上面的三个类全部实现同一个接口 IWolf，那么这时候直接使用常规的，不带任何注解元数据的注入方式来注入接口 IWolf。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IWolf iWolf;</span><br></pre></td></tr></table></figure><p>此时启动服务就会报错。</p><p>本来应该注入一个类，但是 Spring 找到了三个，所以没法确认到底应该用哪一个。这个问题如何解决呢？</p><p>解决思路主要有以下 5 种。</p><h3 id="通过配置文件和-ConditionalOnProperty-注解实现"><a href="#通过配置文件和-ConditionalOnProperty-注解实现" class="headerlink" title="通过配置文件和 @ConditionalOnProperty 注解实现"></a>通过配置文件和 @ConditionalOnProperty 注解实现</h3><p>通过 <code>@ConditionalOnProperty</code> 注解可以结合配置文件来实现唯一注入。下面示例就是说如果配置文件中配置了 <code>lonely.wolf=test1</code>，那么就会将 <code>Wolf1Bean</code> 初始化到容器，此时因为其他实现类不满足条件，所以不会被初始化到 IOC 容器，所以就可以正常注入接口：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(name = &quot;lonely.wolf&quot;,havingValue = &quot;test1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Wolf1Bean</span> <span class="keyword">implements</span> <span class="title class_">IWolf</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，这种配置方式，编译器可能还是会提示有多个 Bean，但是只要我们确保每个实现类的条件不一致，就可以正常使用。</p><h3 id="通过其他-Condition-条件注解"><a href="#通过其他-Condition-条件注解" class="headerlink" title="通过其他 @Condition 条件注解"></a>通过其他 @Condition 条件注解</h3><p>除了上面的配置文件条件，还可以通过其他类似的条件注解，如：</p><ul><li>@ConditionalOnBean：当存在某一个 Bean 时，初始化此类到容器。</li><li>@ConditionalOnClass：当存在某一个类时，初始化此类的容器。</li><li>@ConditionalOnMissingBean：当不存在某一个 Bean 时，初始化此类到容器。</li><li>@ConditionalOnMissingClass：当不存在某一个类时，初始化此类到容器。<br>…</li></ul><p>类似这种实现方式也可以非常灵活的实现动态化配置。</p><p>不过上面介绍的这些方法似乎每次都只能固定注入一个实现类，那么如果我们就是想多个类同时注入，不同的场景可以动态切换而又不需要重启或者修改配置文件，又该如何实现呢？</p><h3 id="通过-Resource-注解动态获取"><a href="#通过-Resource-注解动态获取" class="headerlink" title="通过 @Resource 注解动态获取"></a>通过 @Resource 注解动态获取</h3><p>如果不想手动获取，我们也可以通过 @Resource 注解的形式动态指定 BeanName 来获取：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceInject</span> &#123;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;wolf1Bean&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> IWolf iWolf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上所示则只会注入 BeanName 为 wolf1Bean 的实现类。</p><h3 id="通过集合注入"><a href="#通过集合注入" class="headerlink" title="通过集合注入"></a>通过集合注入</h3><p>除了指定 Bean 的方式注入，我们也可以通过集合的方式一次性注入接口的所有实现类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceInject</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    List&lt;IWolf&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,IWolf&gt; map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的两种形式都会将 IWolf 中所有的实现类注入集合中。如果使用的是 List 集合，那么我们可以取出来再通过 instanceof 关键字来判定类型；而通过 Map 集合注入的话，Spring 会将 Bean 的名称（默认类名首字母小写）作为 key 来存储，这样我们就可以在需要的时候动态获取自己想要的实现类。</p><h3 id="Primary-注解实现默认注入"><a href="#Primary-注解实现默认注入" class="headerlink" title="@Primary 注解实现默认注入"></a>@Primary 注解实现默认注入</h3><p>除了上面的几种方式，我们还可以在其中某一个实现类上加上<code>@Primary</code>注解来表示当有多个 Bean 满足条件时，优先注入当前带有<code>@Primary</code>注解的 Bean：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Wolf1Bean</span> <span class="keyword">implements</span> <span class="title class_">IWolf</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这种方式，Spring 就会默认注入 wolf1Bean，而同时我们仍然可以通过上下文手动获取其他实现类，因为其他实现类也存在容器中。</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> SpringBoot下最全的依赖注入方式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis的一些查询示例</title>
      <link href="/posts/25161.html"/>
      <url>/posts/25161.html</url>
      
        <content type="html"><![CDATA[<h2 id="建表所需的必须字段"><a href="#建表所需的必须字段" class="headerlink" title="建表所需的必须字段"></a>建表所需的必须字段</h2><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p>CREATE_TIME  创建时间    DATETIME,<br>CREATE_BY   创建人    VARCHAR(100),<br>UPDATE_TIME  更新时间   DATETIME,<br>UPDATE_BY   更新人    VARCHAR(100),<br>DEL_FLAG    删除标志(0未删除，1已删除）   int(11)   default 0</p><h2 id="oracle"><a href="#oracle" class="headerlink" title="oracle"></a>oracle</h2><p>CREATE_TIME  创建时间    DATE,<br>CREATE_BY   创建人    VARCHAR2(100),<br>UPDATE_TIME  更新时间   DATE,<br>UPDATE_BY   更新人    VARCHAR2(100),<br>DEL_FLAG    删除标志(0未删除，1已删除）   NUMBER(1,0)   default 0</p><h2 id="like的写法"><a href="#like的写法" class="headerlink" title="like的写法"></a>like的写法</h2><h3 id="mysql-1"><a href="#mysql-1" class="headerlink" title="mysql"></a>mysql</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByName&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;YourEntityType&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM your_table</span><br><span class="line">    WHERE 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        AND name LIKE CONCAT(&#x27;%&#x27;, #&#123;name&#125;, &#x27;%&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="oracle-1"><a href="#oracle-1" class="headerlink" title="oracle"></a>oracle</h3><p>oracle没有mysql的concat()函数</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByName&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;YourEntityType&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM your_table</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">          AND name LIKE &#x27;%&#x27; || #&#123;name&#125; || &#x27;%&#x27;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果上面的报错，那么可以使用bind标签</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByName&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;YourEntityType&quot;</span>&gt;</span></span><br><span class="line">    SELECT </span><br><span class="line">      * </span><br><span class="line">    FROM </span><br><span class="line">      your_table</span><br><span class="line">    WHERE </span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;nameBind&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27; + name + &#x27;%&#x27;&quot;</span> /&gt;</span></span><br><span class="line">        name LIKE #&#123;nameBind&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="时间日期查询"><a href="#时间日期查询" class="headerlink" title="时间日期查询"></a>时间日期查询</h2><h3 id="mysql-2"><a href="#mysql-2" class="headerlink" title="mysql"></a>mysql</h3><h3 id="oracle-2"><a href="#oracle-2" class="headerlink" title="oracle"></a>oracle</h3><h4 id="数据库字段是字符串-2024-10-29-11-30-56-，java参数也是字符串-2024-10-29"><a href="#数据库字段是字符串-2024-10-29-11-30-56-，java参数也是字符串-2024-10-29" class="headerlink" title="数据库字段是字符串(2024-10-29 11:30:56)，java参数也是字符串(2024-10-29)"></a>数据库字段是字符串(2024-10-29 11:30:56)，java参数也是字符串(2024-10-29)</h4><p>要求，传入起始和终止日期。过滤出该区间内数据库里的数据。<br>比如传入<code>(2024-10-29,2024-10-29)</code>，那么过滤出来的就是<code>[2024-10-29 00:00:00,2024-10-30 00:00:00)</code>这段时间内的数据</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;NcsErBxzbDTOMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">          *</span><br><span class="line">        FROM</span><br><span class="line">            er_bxzb er_bxzb</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;query.startDate != null and query.startDate != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                AND TO_DATE(er_bxzb.DJRQ, &#x27;YYYY-MM-DD HH24:MI:SS&#x27;) <span class="symbol">&amp;gt;</span>= TO_DATE(#&#123;query.startDate&#125;, &#x27;YYYY-MM-DD&#x27;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;query.endDate != null and query.endDate != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                AND TO_DATE(er_bxzb.DJRQ, &#x27;YYYY-MM-DD HH24:MI:SS&#x27;) <span class="symbol">&amp;lt;</span> TO_DATE(#&#123;query.endDate&#125;, &#x27;YYYY-MM-DD&#x27;) + 1</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;query.djbh != null and query.djbh != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;djbhBind&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27;+query.djbh+&#x27;%&#x27;&quot;</span>/&gt;</span></span><br><span class="line">                AND er_bxzb.DJBH like #&#123;djbhBind&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="in查询传入list为null或者list的长度为0"><a href="#in查询传入list为null或者list的长度为0" class="headerlink" title="in查询传入list为null或者list的长度为0"></a>in查询传入list为null或者list的长度为0</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;BuyingRequisitionBills&gt; <span class="title function_">selectBuyingRequisitionBills</span><span class="params">(<span class="meta">@Param(&quot;pkOrg&quot;)</span> String pkOrg,</span></span><br><span class="line"><span class="params">                                                          <span class="meta">@Param(&quot;sourceCodeSet&quot;)</span> Set&lt;String&gt; sourceCode)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">  material.PK_MATERIAL materialPk,</span><br><span class="line">  pp.FBILLSTATUS billStatus,</span><br><span class="line">  FROM PO_PRAYBILL_B ppb</span><br><span class="line">        LEFT JOIN BD_MATERIAL_V material ON material.PK_MATERIAL = ppb.pk_material</span><br><span class="line">        LEFT JOIN PO_PRAYBILL pp ON pp.PK_PRAYBILL = ppb.PK_PRAYBILL</span><br><span class="line">  WHERE</span><br><span class="line">  pp.dr = 0 AND</span><br><span class="line">  ppb.dr = 0 AND</span><br><span class="line">  material.dr = 0 AND</span><br><span class="line">  pp.fpraysource = 9 AND</span><br><span class="line">  pp.PK_ORG = #&#123;pkOrg&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;sourceCodeSet !=null and sourceCodeSet.size()&gt;0&quot;</span>&gt;</span></span><br><span class="line">          AND ppb.VSOURCECODE in</span><br><span class="line">          <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;sourceCodeSet&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">              #&#123;item&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">          AND 0 = 1</span><br><span class="line">      <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mybatisPlus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mybatisPlus </tag>
            
            <tag> mybatis的一些查询示例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RedisTemplate工具类整合</title>
      <link href="/posts/57079.html"/>
      <url>/posts/57079.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedisUtils</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class="line">        RedisUtils.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断缓存是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存是否存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">hasKey</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 缓存值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key, Object value)</span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 缓存值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 缓存失效时间，单位：秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key, Object value, Long timeout)</span>&#123;</span><br><span class="line">        put(key, value, Duration.ofSeconds(timeout));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 缓存值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 缓存失效时间，单位：秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key, Object value, Duration timeout)</span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, timeout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存失效时间设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 失效时间 ,单位s</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">expire</span><span class="params">(String key, Long timeout)</span> &#123;</span><br><span class="line">        redisTemplate.expire(key, timeout, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存失效时间设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date 失效时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">expireAt</span><span class="params">(String key, Date date)</span> &#123;</span><br><span class="line">        redisTemplate.expireAt(key, date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否删除成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">delete</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 往hash中添加字段和值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field hash表中的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value hash表中的value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">hashSet</span><span class="params">(String key, String field, Object value)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, field, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hash中field字段的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field hash表中的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> hash表中的value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">hashGet</span><span class="params">(String key, String field)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, field);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hash表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Object, Object&gt; <span class="title function_">entries</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hash中所有的field</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Object&gt; <span class="title function_">hashKeys</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().keys(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hash中所有的value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Object&gt; <span class="title function_">hashValues</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().values(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该hash中是否存在field</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">hasKey</span><span class="params">(String key, String field)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, field);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hash key 中指定的field的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fieldList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List <span class="title function_">hashMultiGet</span><span class="params">(String key, Collection fieldList)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().multiGet(key, fieldList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 迭代hash 指定条件的field</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> options</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Cursor&lt;Map.Entry&lt;Object, Object&gt;&gt; hScan(String key, ScanOptions options)&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().scan(key, options);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除多个缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功删除数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">delete</span><span class="params">(List&lt;String&gt; keys)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(keys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash中field缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fields hash表的key列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功删除数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">hashDelete</span><span class="params">(String key, List&lt;String&gt; fields)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().delete(key, fields.toArray());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计数器加1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">increment</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计数器以指定步长递增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 计数器key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 自增步长</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">increment</span><span class="params">(String key, <span class="type">long</span> delta)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计数器以指定步长递增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 计数器key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 自增步长</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Double <span class="title function_">increment</span><span class="params">(String key, <span class="type">double</span> delta)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash中field对应计数器加值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">hashIncrement</span><span class="params">(String key, String field, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, field, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计数器减1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">decrement</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().decrement(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计数器以指定步长递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 计数器key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 递减步长</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">decrement</span><span class="params">(String key, <span class="type">long</span> delta)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().decrement(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从队列右边移除一个元素并返回该元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> zhanglihui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020-11-06 10:42</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.Object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">rightPop</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPop(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 往列表尾部插入一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">rightPush</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从队列尾部插入多个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values  插入元素列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 插入个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">rightPushAll</span><span class="params">(String key, Object... values)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPushAll(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除并获取列表头部第一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">leftPop</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().leftPop(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从队列左边插入一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> zhanglihui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020-11-06 10:42</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 插入元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 插入个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">leftPush</span><span class="params">(String key, Object value)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().leftPush(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从队列左边插入多个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values  插入元素列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 插入个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">leftPushAll</span><span class="params">(String key, Object... values)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().leftPushAll(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取列表长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> zhanglihui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020-11-06 10:46</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.Long</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">listSize</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取列表中的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> zhanglihui</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020-11-06 10:47</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start list开始下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end list结束下标，-1代表末尾</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.util.List&lt;java.lang.Object&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Object&gt; <span class="title function_">listRange</span><span class="params">(String key, <span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保留指定区间内元素，其余元素都将被删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key list key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end 结束下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">listTrim</span><span class="params">(String key, <span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">        redisTemplate.opsForList().trim(key,start,end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keys 查询主键列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Object&gt; <span class="title function_">multiGet</span><span class="params">(List&lt;String&gt; keys)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().multiGet(keys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将member元素添加到有序集key中，按score排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 有序集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> member 有续集的成员</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> score 有序集的排序值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否添加成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">zAdd</span><span class="params">(String key, Object member, <span class="type">double</span> score)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().add(key, member, score);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量添加元素到有序集key中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 有序集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tuples 元素列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 添加数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">zAdd</span><span class="params">(String key, Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; tuples)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().add(key, tuples);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回有序集 key 中，指定区间内的成员。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 有序集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 下标起始位置，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end 下标结束位置，-1表示最后一个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 有序集列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; zRange(String key, <span class="type">long</span> start, <span class="type">long</span> end)&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().rangeWithScores(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据设置的score获取区间值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 有序集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min score起始值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max score结束值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 有序区间值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; zRangeByScore(String key, <span class="type">double</span> min, <span class="type">double</span> max)&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().rangeByScoreWithScores(key, min, max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据设置的score获取区间值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 有序集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min score起始值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max score结束值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset 偏移值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 返回数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 有序区间值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; zRangeByScore(String key, <span class="type">double</span> min, <span class="type">double</span> max, <span class="type">int</span> offset, <span class="type">int</span> count)&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().rangeByScoreWithScores(key, min, max, offset, count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除有序集 key 中，所有 score 值介于 min 和 max 之间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 有序集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min score最小值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max score最大值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">removeByScore</span><span class="params">(String key, <span class="type">double</span> min, <span class="type">double</span> max)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().removeRangeByScore(key, min, max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除zset中的某个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 有序集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">zSetRemove</span><span class="params">(String key, Object... values)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().remove(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据score范围查询元素，倒序排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 有序集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min score最小值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max score最大值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset 偏移量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count  返回数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; zReverseRangeByScoreWithScores(String key, <span class="type">double</span> min, <span class="type">double</span> max, <span class="type">long</span> offset, <span class="type">long</span> count)&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRangeByScoreWithScores(key, min, max, offset, count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据score范围查询元素，倒序排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 有序集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min score最小值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max score最大值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; zReverseRangeByScoreWithScores(String key, <span class="type">double</span> min, <span class="type">double</span> max)&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRangeByScoreWithScores(key, min, max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * zset根据下标倒序查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end 结束下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; zReverseRangeByScore(String key, <span class="type">long</span> start, <span class="type">long</span> end)&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRangeWithScores(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取元素的分值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 有序集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Double <span class="title function_">score</span><span class="params">(String key, Object value)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().score(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定元素增加score</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 有序集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 增加值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> score</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Double <span class="title function_">incrementScore</span><span class="params">(String key, Object value, <span class="type">double</span> delta)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().incrementScore(key, value, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询zset大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 有序集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> zset元素数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">zSize</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().size(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据score范围查询数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 有序集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min score最小值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max score最大值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 统计数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">zCount</span><span class="params">(String key, <span class="type">double</span> min, <span class="type">double</span> max)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().count(key, min, max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据参数 count 的值，移除列表中与参数 delta 相等的元素。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count</span></span><br><span class="line"><span class="comment">     * count &gt; 0 : 从表头开始向表尾搜索，移除与 VALUE 相等的元素，数量为 COUNT 。</span></span><br><span class="line"><span class="comment">     * count &lt; 0 : 从表尾开始向表头搜索，移除与 VALUE 相等的元素，数量为 COUNT 的绝对值。</span></span><br><span class="line"><span class="comment">     * count = 0 : 移除表中所有与 VALUE 相等的值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">listRem</span> <span class="params">(String key, <span class="type">long</span> count, Object value)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除有序集中，指定排名(rank)区间内的所有成员。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 排名开始位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end 排名结束位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 被移除成员的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">zRemByRank</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().removeRange(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回哈希表中，所有的字段和值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 所有的字段和值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Object,Object&gt; <span class="title function_">hashAll</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> redis </category>
          
          <category> ResidTemplate </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> redis </tag>
            
            <tag> ResidTemplate </tag>
            
            <tag> RedisTemplate工具类整合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot调用外部http接口的三种方式</title>
      <link href="/posts/55495.html"/>
      <url>/posts/55495.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/Chelsea__/article/details/126689495">https://blog.csdn.net/Chelsea__/article/details/126689495</a></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Springboot调用外部http接口的三种方式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程事务回滚</title>
      <link href="/posts/9793.html"/>
      <url>/posts/9793.html</url>
      
        <content type="html"><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>项目需要 导入一批数据，对数据进行切割，用多线程跑。</p><h1 id="问题点"><a href="#问题点" class="headerlink" title="问题点"></a>问题点</h1><p>方法上增加@Transactional，对多线程无效，发生异常，子线程不会回滚，即使在子线程中增加@Transactional。<br>原因：线程不归spring容器管理，也就不指望通知回滚了。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="将大数据进行切割"><a href="#将大数据进行切割" class="headerlink" title="将大数据进行切割"></a>将大数据进行切割</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// apache自带切割api, num是对应想要切几段</span></span><br><span class="line">ListUtils.partition(list, num);</span><br></pre></td></tr></table></figure><h2 id="使用异常标志、发令枪控制各线程回滚"><a href="#使用异常标志、发令枪控制各线程回滚" class="headerlink" title="使用异常标志、发令枪控制各线程回滚"></a>使用异常标志、发令枪控制各线程回滚</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">dealData</span><span class="params">(<span class="type">int</span> sheetMergeCount)</span> &#123;</span><br><span class="line"><span class="comment">// todo 业务逻辑...</span></span><br><span class="line"><span class="comment">// 切割数据</span></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list = splitList(sheetMergeCount, <span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 异常标志，AtomicBoolean保证线程安全</span></span><br><span class="line">        <span class="type">AtomicBoolean</span> <span class="variable">isError</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicBoolean</span>(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 发令枪，长度是切割的子集合数量(线程的数量)</span></span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(list.size());</span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; integerList : list) &#123;</span><br><span class="line">        <span class="comment">// 将任务放进线程池</span></span><br><span class="line">            ThreadPoolUtil.exec(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 将事务操作放在新的类中，并开启事务</span></span><br><span class="line">                extraService.upload(integerList, isError, countDownLatch);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 等所有线程都跑完，判断异常标识，有异常，进行主线程内回滚</span></span><br><span class="line">            countDownLatch.await();</span><br><span class="line">            <span class="keyword">if</span> (isError.get()) &#123;</span><br><span class="line">            <span class="comment">// 手动回滚</span></span><br><span class="line">            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">                <span class="keyword">return</span> Result.fail(<span class="string">&quot;系统异常，稍后重试&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Result.success(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">            log.error(<span class="string">&quot;dealData发令枪异常&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;系统异常，稍后重试&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtraServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ExtraService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadData</span><span class="params">(List&lt;Integer&gt; integerList, AtomicBoolean isError, CountDownLatch countDownLatch)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// todo 业务逻辑</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;ExtraService.uploadData异常&quot;</span>, e);</span><br><span class="line">            <span class="comment">// 发生异常，进行标记</span></span><br><span class="line">            isError.set(<span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 发令枪倒计时</span></span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 等所有线程都跑完，判断异常标识，有异常，线程内进行回滚</span></span><br><span class="line">            countDownLatch.await();</span><br><span class="line">            <span class="keyword">if</span> (isError.get()) &#123;</span><br><span class="line">                <span class="comment">// 手动回滚</span></span><br><span class="line">                TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;ExtraService.uploadData发令枪异常&quot;</span>, e);</span><br><span class="line">            <span class="comment">// 手动回滚</span></span><br><span class="line">            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="引用博客"><a href="#引用博客" class="headerlink" title="引用博客"></a>引用博客</h1><p><a href="https://blog.csdn.net/gsc1456/article/details/124748943">https://blog.csdn.net/gsc1456/article/details/124748943</a></p><h1 id="其他参考"><a href="#其他参考" class="headerlink" title="其他参考"></a>其他参考</h1><p><a href="https://blog.csdn.net/u010978399/article/details/117771620">https://blog.csdn.net/u010978399/article/details/117771620</a></p><ul><li>这篇博客也是使用发令枪的方式实现子线程回滚，不同的是，该博客中每个子线程的事务是除了回滚是手动的外，提交也是手动的。</li><li>这篇博客声明了两个计数器，一个主线程的，一个子线程的。当主线程的计数器归零，子线程的发令枪才开枪，子线程才会执行事务判断的部分，实现效果和当前代码我认为是没有区别的</li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> JUC </tag>
            
            <tag> 多线程事务回滚 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OAuth 2.0 第三方登录</title>
      <link href="/posts/14380.html"/>
      <url>/posts/14380.html</url>
      
        <content type="html"><![CDATA[<h1 id="OAuth简介"><a href="#OAuth简介" class="headerlink" title="OAuth简介"></a>OAuth简介</h1><h2 id="OAuth2-0介绍"><a href="#OAuth2-0介绍" class="headerlink" title="OAuth2.0介绍"></a>OAuth2.0介绍</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>OAuth协议：<a href="https://www.rfc-editor.org/rfc/rfc6749">https://www.rfc-editor.org/rfc/rfc6749</a></p><p>OAuth（Open Authorization）是一个关于授权（authorization）的开放网络标准，允许用户授权第三方 应用访问他们存储在另外的服务提供者上的信息，而不需要将用户名和密码提供给第三方移动应用或分享他 们数据的所有内容。OAuth在全世界得到广泛应用，目前的版本是2.0版。</p><p>协议特点：</p><ul><li>简单： 不管是OAuth服务提供者还是应用开发者，都很易于理解与使用；</li><li>安全： 没有涉及到用户密钥等信息，更安全更灵活；</li><li>开放： 任何服务提供商都可以实现OAuth，任何软件开发商都可以使用OAuth；</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>原生app授权： app登录请求后台接口，为了安全认证，所有请求都带token信息，如果登录验证、 请求后台数据</li><li>前后端分离单页面应用： 前后端分离框架，前端请求后台数据，需要进行oauth2安全认证</li><li>第三方应用授权登录： 比如QQ，微博，微信的授权登录</li></ul><p><img src="https://s2.loli.net/2023/05/10/LVK6NaplUntM9Ss.png" alt="认证步骤"></p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>OAuth的作用就是让”客户端”安全可控地获取”用户”的授权，与”服务提供商”进行交互</p><ul><li>Resource owner（资源拥有者）：拥有该资源的最终用户，他有访问资源的账号密码；</li><li>Resource server（资源服务器）：受保护资源所在的服务器，如果请求包含正确的访问令牌，就可以访问受保护的资源；</li><li>Client（客户端）：请求访问资源的客户端，可以是浏览器、移动设备或者服务器，客户端会携带访问令牌访问资源服务器上的资源；</li><li>Authorization server（认证服务器）：负责认证客户端身份的服务器，如果客户端认证通过，会给客户端发放访问资源服务器的令牌。</li></ul><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点</p><ul><li>更安全，客户端不接触用户密码，服务器端更易集中保护</li><li>广泛传播并被持续采用</li><li>短寿命和封装的token</li><li>资源服务器和授权服务器解耦</li><li>集中式授权，简化客户端</li><li>HTTP/JSON友好，易于请求和传递token</li><li>考虑多种客户端架构场景</li><li>客户可以具有不同的信任级别</li></ul><p>缺点</p><ul><li>协议框架太宽泛，造成各种实现的兼容性和互操作性差</li><li>不是一个认证协议，本身并不能告诉你任何用户信息</li></ul><h2 id="OAuth授权模式"><a href="#OAuth授权模式" class="headerlink" title="OAuth授权模式"></a>OAuth授权模式</h2><h3 id="四种授权模式"><a href="#四种授权模式" class="headerlink" title="四种授权模式"></a>四种授权模式</h3><p>不管哪一种授权方式，第三方应用申请令牌之前，都必须先到系统备案，说明自己的身份，然后会拿到两个身份识别码：客户端 ID（client ID）和客户端密钥（client secret）。这是为了防止令牌被滥用，没有备案过的第三方应用，是不会拿到令牌的</p><ul><li>Authorization Code（授权码模式）：正宗的OAuth2的授权模式，客户端先将用户导向认证服务器，认证用户成功后获取授权码，然后进行授权，最后根据授权码获取访问令牌；</li><li>Implicit（隐藏式）：和授权码模式相比，取消了获取授权码的过程，直接获取访问令牌；</li><li>Password（密码模式）：客户端直接向用户获取用户名和密码，之后向认证服务器获取访问令牌；</li><li>Client Credentials（客户端凭证模式）：客户端直接通过客户端认证（比如client_id和client_secret）从认证服务器获取访问令牌。</li></ul><p>一般来说，授权码模式和密码模式是两种常用的授权模式</p><h3 id="授权码模式"><a href="#授权码模式" class="headerlink" title="授权码模式"></a>授权码模式</h3><p>指应用先申请一个授权码，然后再用这个授权码获取令牌</p><p>流程：</p><ul><li>客户端将用户导向认证服务器的授权页面;</li><li>用户在认证服务器页面登录并授权；</li><li>认证服务器返回授权码给客户端；</li><li>客户端将授权码传递给客户端所在的后端服务（也可以是自己的认证服务器），由后端服务在后端请求认证服务器获取令牌，并返回给客户端。</li></ul><h3 id="密码模式"><a href="#密码模式" class="headerlink" title="密码模式"></a>密码模式</h3><p>如果用户信任应用，应用可以直接携带用户的用户名和密码，直接申请令牌</p><p>流程：</p><ul><li>客户端要求用户提供用户名和密码；</li><li>客户端携带用户名和密码，访问授权服务器；</li><li>授权服务器验证用户身份之后，直接返回令牌。</li></ul><h1 id="二、三方授权登录"><a href="#二、三方授权登录" class="headerlink" title="二、三方授权登录"></a>二、三方授权登录</h1><h2 id="需求介绍"><a href="#需求介绍" class="headerlink" title="需求介绍"></a>需求介绍</h2><p>自研应用需要扩展时，绕不开的就是集成其他社交软件的三方登录，比如微信/QQ/微博/Github等等，而这用到的模式属于OAuth的授权码方式授权，下面我就介绍几种三方授权登录教程，同时给予数据库扩展设计思路</p><h2 id="第三方授权登录数据库设计"><a href="#第三方授权登录数据库设计" class="headerlink" title="第三方授权登录数据库设计"></a>第三方授权登录数据库设计</h2><p>第三方授权登录的时候，第三方的用户信息是存数据库原有的 user 表还是新建一张表呢 ？答案得看具体项目。三方授权登录之后，第三方用户信息一般都会返回用户唯一的标志 <code>openid</code> 或者 <code>unionid</code> 或者 id，具体是什么得看第三方，比如 github 的是 id</p><h3 id="直接通过注册的方式保存到数据库"><a href="#直接通过注册的方式保存到数据库" class="headerlink" title="直接通过注册的方式保存到数据库"></a>直接通过注册的方式保存到数据库</h3><p>如果网站没有注册功能的，直接通过第三方授权登录，授权成功之后，可以直接把第三的用户信息注册保存到自己数据库的 user 表里面。典型的例子就是微信公众号的授权登录。</p><p>如果网站有注册功能的，也可以通过第三方授权登录，授权成功之后，也可以直接把第三的用户信息注册保存到自己数据库的 user 表里面（但是密码是后端自动生成的，用户也不知道，只能用第三方授权登录），这样子的第三方的用户和原生注册的用户信息都在同一张表了，这种情况得看自己项目的具体情况。</p><h3 id="增加映射表"><a href="#增加映射表" class="headerlink" title="增加映射表"></a>增加映射表</h3><p>现实中很多网站都有多种账户登录方式，比如可以用网站的注册 id 登录，还可以用手机号登录，可以用 QQ 登录等等。数据库中都是有映射关系，QQ、手机号等都是映射在网站的注册 id 上。保证不管用什么方式登录，只要去查映射关系，发现是映射在网站注册的哪个 id 上，就让哪个 id 登录成功。</p><h3 id="建立一个-oauth-表"><a href="#建立一个-oauth-表" class="headerlink" title="建立一个 oauth 表"></a>建立一个 oauth 表</h3><p>建立一个 oauth 表，一个 id 列，记录对应的用户注册表的 id，然后你有多少个第三方登陆功能，你就建立多少列，记录第三方登陆接口返回的 openid；第三方登陆的时候，通过这个表的记录的 openid 获取 id 信息，如果存在通过 id 读取注册表然后用 session 记录相关信息。不存在就转向用户登陆/注册界面要用户输入本站注册的账户进行 openid 绑定或者新注册账户信息进行绑定。</p><h2 id="数据库实战举例"><a href="#数据库实战举例" class="headerlink" title="数据库实战举例"></a>数据库实战举例</h2><ul><li>用户表分为用户基础信息表 + 用户授权信息表；</li><li>所有和授权相关，都放在用户信息授权表，用户信息表和用户授权表是一对多的关系</li></ul><p>用户基础信息表</p><p><img src="https://s2.loli.net/2023/05/10/Mt3EAq9DB1JaHdZ.png" alt="用户基础信息表"></p><p>用户授权信息表</p><p><img src="https://s2.loli.net/2023/05/10/Fex7oUvMXwJRtzT.png" alt="用户授权信息表"></p><h1 id="GitHub-登录"><a href="#GitHub-登录" class="headerlink" title="GitHub 登录"></a>GitHub 登录</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>文档：<a href="https://docs.github.com/cn/developers/apps/building-oauth-apps/creating-an-oauth-app">https://docs.github.com/cn/developers/apps/building-oauth-apps/creating-an-oauth-app</a></p><p>Github的OAuth 授权原理大致如下</p><ul><li>A网站让用户跳转到 GitHub</li><li>GitHub 要求用户登录，然后询问”A 网站要求获得 xx 权限，你是否同意”</li><li>用户同意，GitHub 就会重定向回 A 网站，同时发回一个授权码</li><li>A 网站使用授权码，向 GitHub 请求令牌</li><li>GitHub 返回令牌</li><li>A 网站使用令牌，向 GitHub 请求用户数据</li></ul><p><img src="https://s2.loli.net/2023/05/10/R8gaobmxlfcrI73.png" alt="流程示意"></p><h2 id="应用登记"><a href="#应用登记" class="headerlink" title="应用登记"></a>应用登记</h2><p>一个应用要求 OAuth 授权，必须先到对方网站登记，让对方知道是谁在请求，所以要先去 GitHub 登记一下（免费）。GitHub的文档</p><p>首先访问Authorized OAuth App，填写登记表进行创建（进入 Github 的 Setting 页面，点击 Developer settings，选择OAuth Apps，选择new OAuth App）</p><p><img src="https://s2.loli.net/2023/05/10/iU6ZDjT7HPv5enV.png" alt="应用注册"></p><p>注意回调地址要与我们待会写的接口地址匹配，否则会报错，进入应用后就能看见我们应用了，secrets没有的话可以生成，注意保存</p><ul><li>Client ID</li><li>Client secrets</li></ul><h2 id="Github授权登录原理"><a href="#Github授权登录原理" class="headerlink" title="Github授权登录原理"></a>Github授权登录原理</h2><h3 id="请求用户的-GitHub-身份"><a href="#请求用户的-GitHub-身份" class="headerlink" title="请求用户的 GitHub 身份"></a>请求用户的 GitHub 身份</h3><p>它会提示用户使用他们可以用于登录和授权您的应用程序的特定帐户</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GET https://github.com/login/oauth/authorize</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/10/RgrleDdjsbPpfM9.png" alt="参数说明"></p><h3 id="用户被-GitHub-重定向回站点"><a href="#用户被-GitHub-重定向回站点" class="headerlink" title="用户被 GitHub 重定向回站点"></a>用户被 GitHub 重定向回站点</h3><p>如果用户接受您的请求，GitHub 将重定向回您的站点，其中包含一个临时code的代码参数以及您在上一步中提供的state参数状态。临时代码将在 10 分钟后过期。如果状态不匹配，则第三方创建了请求，您应该中止该过程。</p><p>也就是重回到我们的站点，也就是发送了<code>http://localhost:8080/oauth/githubCallback(自定义)</code>，并且携带了code将此交换code为访问令牌OAUTH-TOKEN</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">POST https://github.com/login/oauth/access_token</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/10/rhxk3RvTmH4aAKN.png" alt="参数说明"></p><h3 id="使用访问令牌访问API"><a href="#使用访问令牌访问API" class="headerlink" title="使用访问令牌访问API"></a>使用访问令牌访问API</h3><p>访问令牌允许代表用户向 API 发出请求，获取用户的基本信息</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Authorization: token OAUTH-TOKEN</span><br><span class="line">GET https://api.github.com/user</span><br></pre></td></tr></table></figure><h2 id="代码实战"><a href="#代码实战" class="headerlink" title="代码实战"></a>代码实战</h2><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置application.yml</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">github:</span></span><br><span class="line">  <span class="attr">clientId:</span> <span class="string">ab3d67630b13025715cf</span></span><br><span class="line">  <span class="attr">clientSecret:</span> <span class="string">29f8c274c7634aa988f42c6507692da4fe118be8</span></span><br><span class="line">  <span class="attr">directUrl:</span> <span class="string">http://localhost:8080/oauth/githubCallback</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><h3 id="配置bean类"><a href="#配置bean类" class="headerlink" title="配置bean类"></a>配置bean类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;github&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GitHubOAuthInfo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String clientId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String clientSecret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String directUrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置state工具类"><a href="#配置state工具类" class="headerlink" title="配置state工具类"></a>配置state工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OauthService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; stateSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成随机state字符串，这里可以存入Redis或者Set，返回时进行校验，不过要注意失效时间</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">genState</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">state</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        stateSet.add(state);</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验state，防止CSRF</span></span><br><span class="line"><span class="comment">     * 校验成功后删除</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkState</span><span class="params">(String state)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stateSet.contains(state))&#123;</span><br><span class="line">            stateSet.remove(state);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="认证与授权"><a href="#认证与授权" class="headerlink" title="认证与授权"></a>认证与授权</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/oauth&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GitHubOAuthInfo gitHubOAuthInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OauthService oauthService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Github认证令牌服务器地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCESS_TOKEN_URL</span> <span class="operator">=</span> <span class="string">&quot;https://github.com/login/oauth/access_token&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Github认证服务器地址</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AUTHORIZE_URL</span> <span class="operator">=</span> <span class="string">&quot;https://github.com/login/oauth/authorize&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Github资源服务器地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RESOURCE_URL</span> <span class="operator">=</span> <span class="string">&quot;https://api.github.com/user&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前端获取认证的URL，由后端拼接好返回前端进行请求</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/githubLogin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">githubLogin</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成并保存state，忽略该参数有可能导致CSRF攻击</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">state</span> <span class="operator">=</span> oauthService.genState();</span><br><span class="line">        <span class="comment">// 传递参数response_type、client_id、state、redirect_uri</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">param</span> <span class="operator">=</span> <span class="string">&quot;response_type=code&amp;&quot;</span> + <span class="string">&quot;client_id=&quot;</span> + gitHubOAuthInfo.getClientId() + <span class="string">&quot;&amp;state=&quot;</span> + state</span><br><span class="line">                + <span class="string">&quot;&amp;redirect_uri=&quot;</span> + gitHubOAuthInfo.getDirectUrl();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、请求Github认证服务器</span></span><br><span class="line">        response.sendRedirect(AUTHORIZE_URL + <span class="string">&quot;?&quot;</span> + param);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * GitHub回调方法</span></span><br><span class="line"><span class="comment">     *  code 授权码</span></span><br><span class="line"><span class="comment">     * state 应与发送时一致，防止CSRF攻击</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/githubCallback&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">githubCallback</span><span class="params">(String code, String state, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 验证state，如果不一致，可能被CSRF攻击</span></span><br><span class="line">        <span class="keyword">if</span>(!oauthService.checkState(state)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;State验证失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置JSONObject请求体</span></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        jsonObject.put(<span class="string">&quot;client_id&quot;</span>,gitHubOAuthInfo.getClientId());</span><br><span class="line">        jsonObject.put(<span class="string">&quot;client_secret&quot;</span>,gitHubOAuthInfo.getClientSecret());</span><br><span class="line">        jsonObject.put(<span class="string">&quot;code&quot;</span>,code);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">accessTokenRequestJson</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// 请求accessToken，成功获取到后进行下一步信息获取,这里第一次可能会超时</span></span><br><span class="line">            accessTokenRequestJson = HttpRequest.post(ACCESS_TOKEN_URL)</span><br><span class="line">                    .header(<span class="string">&quot;Accept&quot;</span>,<span class="string">&quot; application/json&quot;</span>)</span><br><span class="line">                    .body(jsonObject.toJSONString())</span><br><span class="line">                    .timeout(<span class="number">30000</span>)</span><br><span class="line">                    .execute().body();</span><br><span class="line">            log.info(<span class="string">&quot;请求令牌耗时：&#123;&#125;&quot;</span>,System.currentTimeMillis()-start);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.error(<span class="string">&quot;请求令牌API访问异常，异常原因：&quot;</span>,e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;获取到的accessToken为：&#123;&#125;&quot;</span>,accessTokenRequestJson);</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">accessTokenObject</span> <span class="operator">=</span> JSONObject.parseObject(accessTokenRequestJson);</span><br><span class="line">        <span class="comment">// 如果返回的数据包含error，表示失败，错误原因存储在error_description</span></span><br><span class="line">        <span class="keyword">if</span>(accessTokenObject.containsKey(<span class="string">&quot;error&quot;</span>)) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;错误，原因：&#123;&#125;&quot;</span>,accessTokenRequestJson);</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;error_description，令牌获取错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果返回结果中包含access_token，表示成功</span></span><br><span class="line">        <span class="keyword">if</span>(!accessTokenObject.containsKey(<span class="string">&quot;access_token&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;获取token失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到token和token_type</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">accessToken</span> <span class="operator">=</span> (String) accessTokenObject.get(<span class="string">&quot;access_token&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">tokenType</span> <span class="operator">=</span> (String) accessTokenObject.get(<span class="string">&quot;token_type&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">userInfo</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// 请求资源服务器获取个人信息</span></span><br><span class="line">            userInfo = HttpRequest.get(RESOURCE_URL)</span><br><span class="line">                    .header(<span class="string">&quot;Authorization&quot;</span>, tokenType + <span class="string">&quot; &quot;</span> + accessToken)</span><br><span class="line">                    .timeout(<span class="number">5000</span>)</span><br><span class="line">                    .execute().body();</span><br><span class="line">            log.info(<span class="string">&quot;请求令牌耗时：&#123;&#125;&quot;</span>,System.currentTimeMillis()-start);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.error(<span class="string">&quot;请求令牌API访问异常，异常原因：&quot;</span>,e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">userInfoJson</span> <span class="operator">=</span> JSONObject.parseObject(userInfo);</span><br><span class="line">        <span class="keyword">return</span> userInfoJson.toJSONString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后浏览器访问<a href="http://localhost:8080/oauth/githubLogin，即可进入用户授权状态，授权后会进行跳转，自动获取用户的基本信息，后面可以和数据库联动">http://localhost:8080/oauth/githubLogin，即可进入用户授权状态，授权后会进行跳转，自动获取用户的基本信息，后面可以和数据库联动</a></p><h1 id="QQ登录"><a href="#QQ登录" class="headerlink" title="QQ登录"></a>QQ登录</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>官方参考文档：<a href="https://wiki.connect.qq.com/oauth2-0简介">https://wiki.connect.qq.com/oauth2-0简介</a></p><p>大体和Github登录类似，QQ登录OAuth2.0总体处理流程如下</p><ul><li>申请接入，获取appid和apikey；</li><li>开发应用，并设置协作者帐号进行测试联调；</li><li>放置QQ登录按钮；</li><li>通过用户登录验证和授权，获取Access Token；</li><li>通过Access Token获取用户的OpenID；</li><li>调用OpenAPI，来请求访问或修改用户授权的资源。</li></ul><h2 id="应用创建"><a href="#应用创建" class="headerlink" title="应用创建"></a>应用创建</h2><p>首先没有注册的开发者需要先注册并实名，去开发者平台注册并实名，认证通过后进入QQ 互联管理中心，创建一个网站应用新应用（需要先审核个人身份），然后注册应用信息，和 GitHub 的步骤类似</p><p>注册后，可以看到应用的 APP ID、APP Key，以及被允许的接口，当然只有一个获取用户信息</p><h2 id="QQ授权登录原理"><a href="#QQ授权登录原理" class="headerlink" title="QQ授权登录原理"></a>QQ授权登录原理</h2><p>参考：<a href="https://wiki.connect.qq.com/准备工作_oauth2-0">https://wiki.connect.qq.com/准备工作_oauth2-0</a></p><p><img src="https://s2.loli.net/2023/05/10/LlNQYbG9DAStOky.png" alt="原理示意图"></p><h3 id="获取Authorization-Code"><a href="#获取Authorization-Code" class="headerlink" title="获取Authorization Code"></a>获取Authorization Code</h3><p>打开浏览器，访问如下地址（请将client_id，redirect_uri，scope等参数值替换为你自己的）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GET https://graph.qq.com/oauth2.0/authorize?response_type=code&amp;client_id=[YOUR_APPID]&amp;redirect_uri=[YOUR_REDIRECT_URI]&amp;scope=[THE_SCOPE]</span><br></pre></td></tr></table></figure><p>如果用户点击 “授权并登录”，则成功跳转到指定的redirect_uri，并跟上Authorization Code（注意此code会在10分钟内过期）</p><h3 id="通过Authorization-Code获取Access-Token"><a href="#通过Authorization-Code获取Access-Token" class="headerlink" title="通过Authorization Code获取Access Token"></a>通过Authorization Code获取Access Token</h3><p>获取到的access token具有30天有效期，用户再次登录时自动刷新，第三方网站可存储access token信息，以便后续调用OpenAPI访问和修改用户信息时使用</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GET https://graph.qq.com/oauth2.0/token?grant_type=authorization_code&amp;client_id=[YOUR_APP_ID]&amp;client_secret=[YOUR_APP_Key]&amp;code=[The_AUTHORIZATION_CODE]&amp;redirect_uri=[YOUR_REDIRECT_URI]</span><br></pre></td></tr></table></figure><h3 id="使用Access-Token获取用户信息"><a href="#使用Access-Token获取用户信息" class="headerlink" title="使用Access Token获取用户信息"></a>使用Access Token获取用户信息</h3><p>发送请求到如下地址，获取用户的OpenID</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GET https://graph.qq.com/oauth2.0/me?access_token=YOUR_ACCESS_TOKEN</span><br></pre></td></tr></table></figure><p>使用Access Token以及OpenID来访问和修改用户数据，建议网站在用户登录后，即调用get_user_info接口，获得该用户的头像、昵称并显示在网站上，使用户体验统一。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GET https://graph.qq.com/user/get_user_info?access_token=YOUR_ACCESS_TOKEN&amp;oauth_consumer_key=YOUR_APP_ID&amp;openid=YOUR_OPENID</span><br></pre></td></tr></table></figure><h2 id="代码实战-1"><a href="#代码实战-1" class="headerlink" title="代码实战"></a>代码实战</h2><h3 id="配置环境-1"><a href="#配置环境-1" class="headerlink" title="配置环境"></a>配置环境</h3><p>依赖和上面一样，主要配置yml配置文件</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">qq:</span></span><br><span class="line">  <span class="attr">qqAppId:</span> <span class="number">101474821</span></span><br><span class="line">  <span class="attr">qqAppKey:</span> <span class="string">00d91cc7f636d71faac8629d559f9fee</span></span><br><span class="line">  <span class="attr">directUrl:</span> <span class="string">http://localhost:8080/oauth/qqCallback</span></span><br></pre></td></tr></table></figure><h3 id="配置bean类与工具类"><a href="#配置bean类与工具类" class="headerlink" title="配置bean类与工具类"></a>配置bean类与工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;qq&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QqOAuthInfo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String qqAppId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String qqAppKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String directUrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="认证与授权-1"><a href="#认证与授权-1" class="headerlink" title="认证与授权"></a>认证与授权</h3><p>qq的比较麻烦，需要实名认证，创建应用也需要备案域名等</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/oauth&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QqAuthController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QqOAuthInfo qqOAuthInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OauthService oauthService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * QQ认证服务器地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AUTHORIZE_URL</span> <span class="operator">=</span> <span class="string">&quot;https://graph.qq.com/oauth2.0/authorize&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * QQ认证令牌服务器地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCESS_TOKEN_URL</span> <span class="operator">=</span> <span class="string">&quot;https://graph.qq.com/oauth2.0/token&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * QQ的openId Url</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">OPEN_ID_URL</span> <span class="operator">=</span> <span class="string">&quot;https://graph.qq.com/oauth2.0/me&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * QQ的用户数据URL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER_INFO_URL</span> <span class="operator">=</span> <span class="string">&quot;https://graph.qq.com/user/get_user_info&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前端获取认证的URL，由后端拼接好返回前端进行请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/qqLogin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">githubLogin</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成并保存state，忽略该参数有可能导致CSRF攻击</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">state</span> <span class="operator">=</span> oauthService.genState();</span><br><span class="line">        <span class="comment">// 传递参数response_type、client_id、state、redirect_uri</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">param</span> <span class="operator">=</span> <span class="string">&quot;response_type=code&amp;&quot;</span> + <span class="string">&quot;client_id=&quot;</span> + qqOAuthInfo.getQqAppId() + <span class="string">&quot;&amp;state=&quot;</span> + state</span><br><span class="line">                + <span class="string">&quot;&amp;redirect_uri=&quot;</span> + qqOAuthInfo.getDirectUrl();</span><br><span class="line"></span><br><span class="line">        System.out.println(AUTHORIZE_URL + <span class="string">&quot;?&quot;</span> + param);</span><br><span class="line">        <span class="comment">// 请求QQ认证服务器</span></span><br><span class="line">        response.sendRedirect(AUTHORIZE_URL + <span class="string">&quot;?&quot;</span> + param);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * QQ回调方法</span></span><br><span class="line"><span class="comment">     * code 授权码</span></span><br><span class="line"><span class="comment">     * state 应与发送时一致</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/qqCallback&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">githubCallback</span><span class="params">(String code, String state, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 验证state，如果不一致，可能被CSRF攻击</span></span><br><span class="line">        <span class="keyword">if</span>(!oauthService.checkState(state)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;State验证失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置请求参数，fmt参数因历史原因，默认是x-www-form-urlencoded格式，如果填写json，则返回json格式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">param</span> <span class="operator">=</span> <span class="string">&quot;grant_type=authorization_code&amp;code=&quot;</span> + code + <span class="string">&quot;&amp;redirect_uri=&quot;</span> +</span><br><span class="line">                qqOAuthInfo.getDirectUrl() + <span class="string">&quot;&amp;client_id=&quot;</span> + qqOAuthInfo.getQqAppId() +</span><br><span class="line">                <span class="string">&quot;&amp;client_secret=&quot;</span> + qqOAuthInfo.getQqAppKey() + <span class="string">&quot;&amp;fmt=json&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">accessTokenRequestJson</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// 请求accessToken，成功获取到后进行下一步信息获取,这里第一次可能会超时</span></span><br><span class="line">            accessTokenRequestJson = HttpRequest.get(ACCESS_TOKEN_URL)</span><br><span class="line">                    .body(param)</span><br><span class="line">                    .timeout(<span class="number">30000</span>)</span><br><span class="line">                    .execute().body();</span><br><span class="line">            log.info(<span class="string">&quot;请求令牌耗时：&#123;&#125;&quot;</span>,System.currentTimeMillis()-start);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.error(<span class="string">&quot;请求令牌API访问异常，异常原因：&quot;</span>,e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * result示例：</span></span><br><span class="line"><span class="comment">         * 成功：access_token=A24B37194E89A0DDF8DDFA7EF8D3E4F8&amp;expires_in=7776000&amp;refresh_token=BD36DADB0FE7B910B4C8BBE1A41F6783</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        log.info(<span class="string">&quot;获取到的accessToken为：&#123;&#125;&quot;</span>,accessTokenRequestJson);</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">accessTokenObject</span> <span class="operator">=</span> JSONObject.parseObject(accessTokenRequestJson);</span><br><span class="line">        <span class="comment">// 如果返回的数据包含error，表示失败，错误原因存储在error_description</span></span><br><span class="line">        <span class="keyword">if</span>(accessTokenObject.containsKey(<span class="string">&quot;error&quot;</span>)) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;错误，原因：&#123;&#125;&quot;</span>,accessTokenRequestJson);</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;error_description，令牌获取错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果返回结果中包含access_token，表示成功</span></span><br><span class="line">        <span class="keyword">if</span>(!accessTokenObject.containsKey(<span class="string">&quot;access_token&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;获取token失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到token和token_type</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">accessToken</span> <span class="operator">=</span> (String) accessTokenObject.get(<span class="string">&quot;access_token&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">meParams</span> <span class="operator">=</span> <span class="string">&quot;access_token=&quot;</span> + accessToken;</span><br><span class="line">        <span class="type">String</span> <span class="variable">meBody</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// 请求accessToken，成功获取到后进行下一步信息获取,这里第一次可能会超时</span></span><br><span class="line">            meBody = HttpRequest.get(OPEN_ID_URL)</span><br><span class="line">                    .body(meParams)</span><br><span class="line">                    .execute().body();</span><br><span class="line">            log.info(<span class="string">&quot;请求令牌耗时：&#123;&#125;&quot;</span>,System.currentTimeMillis()-start);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.error(<span class="string">&quot;openId访问异常，异常原因：&quot;</span>,e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 成功返回如下：callback( &#123;&quot;client_id&quot;:&quot;YOUR_APPID&quot;,&quot;openid&quot;:&quot;YOUR_OPENID&quot;&#125; );</span></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">meJsonObject</span> <span class="operator">=</span> JSONObject.parseObject(meBody);</span><br><span class="line">        <span class="comment">// 取出openid</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">openid</span> <span class="operator">=</span> meJsonObject.getString(<span class="string">&quot;openid&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Access Token以及OpenID来访问和修改用户数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userInfoParam</span> <span class="operator">=</span> <span class="string">&quot;access_token=&quot;</span> + accessToken + <span class="string">&quot;&amp;oauth_consumer_key=&quot;</span> + qqOAuthInfo.getQqAppId() + <span class="string">&quot;&amp;openid=&quot;</span> + openid;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userInfo</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// 请求accessToken，成功获取到后进行下一步信息获取,这里第一次可能会超时</span></span><br><span class="line">            userInfo = HttpRequest.get(USER_INFO_URL)</span><br><span class="line">                    .body(userInfoParam)</span><br><span class="line">                    .timeout(<span class="number">5000</span>)</span><br><span class="line">                    .execute().body();</span><br><span class="line">            log.info(<span class="string">&quot;请求令牌耗时：&#123;&#125;&quot;</span>,System.currentTimeMillis()-start);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.error(<span class="string">&quot;用户数据访问异常，异常原因：&quot;</span>,e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">userInfoJson</span> <span class="operator">=</span> JSONObject.parseObject(userInfo);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userInfoJson.toJSONString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="微信登录"><a href="#微信登录" class="headerlink" title="微信登录"></a>微信登录</h1><p>官方文档：<a href="https://developers.weixin.qq.com/doc/oplatform/Website_App/WeChat_Login/Wechat_Login.html">https://developers.weixin.qq.com/doc/oplatform/Website_App/WeChat_Login/Wechat_Login.html</a></p><hr><p>来源：<a href="https://blog.csdn.net/lemon_TT/article/details/127500409">https://blog.csdn.net/lemon_TT/article/details/127500409</a></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> OAuth2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> OAuth2.0 </tag>
            
            <tag> OAuth 2.0 第三方登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot设置动态定时任务</title>
      <link href="/posts/21268.html"/>
      <url>/posts/21268.html</url>
      
        <content type="html"><![CDATA[<p>SpringBoot项目中简单使用定时任务，要借助cron表达式且都提前定义好放在配置文件里，不能在项目运行中动态修改任务执行时间，实在不太灵活。</p><p>经过网上搜索学习后，特此记录如何在SpringBoot项目中实现动态定时任务。</p><p>因为只是一个demo，所以只引入了需要的依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring boot 2.3版本后，如果需要使用校验，需手动导入validation包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wl.demo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;(*^▽^*)启动成功!!!(〃&#x27;▽&#x27;〃)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件application.yml，只定义了服务端口：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8089</span></span><br></pre></td></tr></table></figure><p>定时任务执行时间配置文件：task-config.ini</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">printTime.cron</span>=<span class="number">0</span>/<span class="number">10</span> * * * * ?</span><br></pre></td></tr></table></figure><p>定时任务执行类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wl.demo.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.Trigger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.TriggerContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.SchedulingConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.config.ScheduledTaskRegistrar;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.support.CronTrigger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:/task-config.ini&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleTask</span> <span class="keyword">implements</span> <span class="title class_">SchedulingConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;printTime.cron&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String cron;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureTasks</span><span class="params">(ScheduledTaskRegistrar taskRegistrar)</span> &#123;</span><br><span class="line">        <span class="comment">// 动态使用cron表达式设置循环间隔</span></span><br><span class="line">        taskRegistrar.addTriggerTask(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;Current time： &#123;&#125;&quot;</span>, LocalDateTime.now());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> <span class="title class_">Trigger</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Date <span class="title function_">nextExecutionTime</span><span class="params">(TriggerContext triggerContext)</span> &#123;</span><br><span class="line">                <span class="comment">// 使用CronTrigger触发器，可动态修改cron表达式来操作循环规则</span></span><br><span class="line">                <span class="type">CronTrigger</span> <span class="variable">cronTrigger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CronTrigger</span>(cron);</span><br><span class="line">                <span class="type">Date</span> <span class="variable">nextExecutionTime</span> <span class="operator">=</span> cronTrigger.nextExecutionTime(triggerContext);</span><br><span class="line">                <span class="keyword">return</span> nextExecutionTime;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写一个接口，使得可以通过调用接口动态修改该定时任务的执行时间：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wl.demo.controller;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.wl.demo.task.ScheduleTask;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ScheduleTask scheduleTask;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestController</span><span class="params">(ScheduleTask scheduleTask)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.scheduleTask = scheduleTask;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/updateCron&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">updateCron</span><span class="params">(String cron)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;new cron :&#123;&#125;&quot;</span>, cron);</span><br><span class="line">        scheduleTask.setCron(cron);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动项目，可以看到任务每10秒执行一次：<br>访问接口，传入请求参数cron表达式，将定时任务修改为15秒执行一次：<br>可以看到任务变成了15秒执行一次</p><p>除了上面的借助cron表达式的方法，还有另一种触发器，区别于CronTrigger触发器，该触发器可随意设置循环间隔时间，不像cron表达式只能定义小于等于间隔59秒。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wl.demo.task;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.Trigger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.TriggerContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.SchedulingConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.config.ScheduledTaskRegistrar;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.support.CronTrigger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.support.PeriodicTrigger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:/task-config.ini&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleTask</span> <span class="keyword">implements</span> <span class="title class_">SchedulingConfigurer</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;printTime.cron&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String cron;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="type">Long</span> <span class="variable">timer</span> <span class="operator">=</span> <span class="number">10000L</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureTasks</span><span class="params">(ScheduledTaskRegistrar taskRegistrar)</span> &#123;</span><br><span class="line">        <span class="comment">// 动态使用cron表达式设置循环间隔</span></span><br><span class="line">        taskRegistrar.addTriggerTask(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;Current time： &#123;&#125;&quot;</span>, LocalDateTime.now());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> <span class="title class_">Trigger</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Date <span class="title function_">nextExecutionTime</span><span class="params">(TriggerContext triggerContext)</span> &#123;</span><br><span class="line">                <span class="comment">// 使用CronTrigger触发器，可动态修改cron表达式来操作循环规则</span></span><br><span class="line"><span class="comment">//                CronTrigger cronTrigger = new CronTrigger(cron);</span></span><br><span class="line"><span class="comment">//                Date nextExecutionTime = cronTrigger.nextExecutionTime(triggerContext);</span></span><br><span class="line"> </span><br><span class="line">                <span class="comment">// 使用不同的触发器，为设置循环时间的关键，区别于CronTrigger触发器，该触发器可随意设置循环间隔时间，单位为毫秒</span></span><br><span class="line">                <span class="type">PeriodicTrigger</span> <span class="variable">periodicTrigger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PeriodicTrigger</span>(timer);</span><br><span class="line">                <span class="type">Date</span> <span class="variable">nextExecutionTime</span> <span class="operator">=</span> periodicTrigger.nextExecutionTime(triggerContext);</span><br><span class="line">                <span class="keyword">return</span> nextExecutionTime;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增加一个修改时间的接口：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wl.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wl.demo.task.ScheduleTask;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ScheduleTask scheduleTask;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestController</span><span class="params">(ScheduleTask scheduleTask)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.scheduleTask = scheduleTask;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/updateCron&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">updateCron</span><span class="params">(String cron)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;new cron :&#123;&#125;&quot;</span>, cron);</span><br><span class="line">        scheduleTask.setCron(cron);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/updateTimer&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">updateTimer</span><span class="params">(Long timer)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;new timer :&#123;&#125;&quot;</span>, timer);</span><br><span class="line">        scheduleTask.setTimer(timer);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> SpringBoot设置动态定时任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>category-line的两种数据类型所绘制图形不同的问题</title>
      <link href="/posts/2224.html"/>
      <url>/posts/2224.html</url>
      
        <content type="html"><![CDATA[<h2 id="第一种配置项：xAxis和series的data分开"><a href="#第一种配置项：xAxis和series的data分开" class="headerlink" title="第一种配置项：xAxis和series的data分开"></a>第一种配置项：xAxis和series的data分开</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">option = &#123;</span><br><span class="line">  <span class="attr">xAxis</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">yAxis</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">series</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">data</span>: [<span class="number">150</span>,<span class="number">150</span>],</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>渲染出来的结果：一条横线<br><img src="https://s2.loli.net/2023/04/18/9Gnikd7csS4mg1J.png" alt="line-simple.png"></p><h2 id="第二种配置项：xAxis不设置data，series的data设置为二维数组"><a href="#第二种配置项：xAxis不设置data，series的data设置为二维数组" class="headerlink" title="第二种配置项：xAxis不设置data，series的data设置为二维数组"></a>第二种配置项：xAxis不设置data，series的data设置为二维数组</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">option = &#123;</span><br><span class="line">  <span class="attr">xAxis</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">yAxis</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">series</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">data</span>: [</span><br><span class="line">        [<span class="string">&#x27;a&#x27;</span>, <span class="number">150</span>],</span><br><span class="line">        [<span class="string">&#x27;a&#x27;</span>, <span class="number">170</span>],</span><br><span class="line">        [<span class="string">&#x27;b&#x27;</span>, <span class="number">150</span>],</span><br><span class="line">        [<span class="string">&#x27;a&#x27;</span>, <span class="number">180</span>]</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>渲染出来的结果：一条竖线<br><img src="https://s2.loli.net/2023/04/18/AmT96RI1UN7uvFg.png" alt="line-simple.png"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>对于category轴而言：<br>一维数组横坐标无论是否相同会依次排列<br>二维数组横坐标相同会画在一条竖线上</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> Echarts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Echarts </tag>
            
            <tag> category-line的两种数据类型所绘制图形不同的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot统一登录鉴权、异常处理、数据格式</title>
      <link href="/posts/39078.html"/>
      <url>/posts/39078.html</url>
      
        <content type="html"><![CDATA[<p>本篇将要学习 Spring Boot 统一功能处理模块，这也是 AOP 的实战环节</p><ul><li>用户登录权限的校验实现接口 HandlerInterceptor + WebMvcConfigurer</li><li>异常处理使用注解 @RestControllerAdvice + @ExceptionHandler</li><li>数据格式返回使用注解 @ControllerAdvice 并且实现接口 @ResponseBodyAdvice</li></ul><h1 id="统一用户登录权限效验"><a href="#统一用户登录权限效验" class="headerlink" title="统一用户登录权限效验"></a>统一用户登录权限效验</h1><p>用户登录权限的发展完善过程<br>最初用户登录效验：在每个方法中获取 Session 和 Session 中的用户信息，如果存在用户，那么就认为登录成功了，否则就登录失败了<br>第二版用户登录效验：提供统一的方法，在每个需要验证的方法中调用统一的用户登录身份效验方法来判断<br>第三版用户登录效验：使用 Spring AOP 来统一进行用户登录效验<br>第四版用户登录效验：使用 Spring 拦截器来实现用户的统一登录验证</p><h2 id="最初用户登录权限效验"><a href="#最初用户登录权限效验" class="headerlink" title="最初用户登录权限效验"></a>最初用户登录权限效验</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/a1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">login</span> <span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 有 Session 就获取，没有就不创建</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (session != <span class="literal">null</span> &amp;&amp; session.getAttribute(<span class="string">&quot;userinfo&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 说明已经登录，进行业务处理</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 未登录</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/a2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">login2</span> <span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 有 Session 就获取，没有就不创建</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (session != <span class="literal">null</span> &amp;&amp; session.getAttribute(<span class="string">&quot;userinfo&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 说明已经登录，进行业务处理</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 未登录</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式写的代码，每个方法中都有相同的用户登录验证权限，缺点是：<br>每个方法中都要单独写用户登录验证的方法，即使封装成公共方法，也一样要传参调用和在方法中进行判断<br>添加控制器越多，调用用户登录验证的方法也越多，这样就增加了后期的修改成功和维护成功<br>这些用户登录验证的方法和现在要实现的业务几乎没有任何关联，但还是要在每个方法中都要写一遍，所以提供一个公共的 AOP 方法来进行统一的用户登录权限验证是非常好的解决办法。</p><h2 id="Spring-AOP-统一用户登录验证"><a href="#Spring-AOP-统一用户登录验证" class="headerlink" title="Spring AOP 统一用户登录验证"></a>Spring AOP 统一用户登录验证</h2><p>统一用户登录验证，首先想到的实现方法是使用 Spring AOP 前置通知或环绕通知来实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 当前类是一个切面</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAspect</span> &#123;</span><br><span class="line">    <span class="comment">// 定义切点方法 Controller 包下、子孙包下所有类的所有方法</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.example.springaop.controller..*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">pointcut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 前置通知</span></span><br><span class="line">    <span class="meta">@Before(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBefore</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 环绕通知</span></span><br><span class="line">    <span class="meta">@Around(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">doAround</span><span class="params">(ProceedingJoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;Around 方法开始执行&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            obj = joinPoint.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Around 方法结束执行&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但如果只在以上代码 Spring AOP 的切面中实现用户登录权限效验的功能，有这样两个问题：<br>没有办法得到 HttpSession 和 Request 对象<br>我们要对一部分方法进行拦截，而另一部分方法不拦截，比如注册方法和登录方法是不拦截的，也就是实际的拦截规则很复杂，使用简单的 aspectJ 表达式无法满足拦截的需求</p><h2 id="Spring-拦截器"><a href="#Spring-拦截器" class="headerlink" title="Spring 拦截器"></a>Spring 拦截器</h2><p>针对上面代码 Spring AOP 的问题，Spring 中提供了具体的实现拦截器：HandlerInterceptor，拦截器的实现有两步：</p><ol><li>创建自定义拦截器，实现 Spring 中的 HandlerInterceptor 接口中的 preHandle方法</li><li><p>将自定义拦截器加入到框架的配置中，并且设置拦截规则<br> 给当前的类添加 @Configuration 注解<br> 实现 WebMvcConfigurer 接口<br> 重写 addInterceptors 方法<br> 注意：一个项目中可以同时配置多个拦截器  </p><ol><li><p>创建自定义拦截器</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 自定义用户登录的拦截器</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Date</span> 2023/2/13 13:06</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginIntercept</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">// 返回 true 表示拦截判断通过，可以访问后面的接口</span></span><br><span class="line">    <span class="comment">// 返回 false 表示拦截未通过，直接返回结果给前端</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">                            Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1.得到 HttpSession 对象</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (session != <span class="literal">null</span> &amp;&amp; session.getAttribute(<span class="string">&quot;userinfo&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 表示已经登录</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行到此代码表示未登录，未登录就跳转到登录页面</span></span><br><span class="line">        response.sendRedirect(<span class="string">&quot;/login.html&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>将自定义拦截器添加到系统配置中，并设置拦截的规则<br>addPathPatterns：表示需要拦截的 URL，**表示拦截所有⽅法<br>excludePathPatterns：表示需要排除的 URL<br>说明：拦截规则可以拦截此项⽬中的使⽤ URL，包括静态⽂件（图⽚⽂件、JS 和 CSS 等⽂件）。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 将自定义拦截器添加到系统配置中，并设置拦截的规则</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Date</span> 2023/2/13 13:13</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoginIntercept loginIntercept;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line"><span class="comment">//        registry.addInterceptor(new LoginIntercept());//可以直接new 也可以属性注入</span></span><br><span class="line">        registry.addInterceptor(loginIntercept).</span><br><span class="line">                addPathPatterns(<span class="string">&quot;/**&quot;</span>).    <span class="comment">// 拦截所有 url</span></span><br><span class="line">                excludePathPatterns(<span class="string">&quot;/user/login&quot;</span>). <span class="comment">//不拦截登录注册接口</span></span><br><span class="line">                excludePathPatterns(<span class="string">&quot;/user/reg&quot;</span>).</span><br><span class="line">                excludePathPatterns(<span class="string">&quot;/login.html&quot;</span>).</span><br><span class="line">                excludePathPatterns(<span class="string">&quot;/reg.html&quot;</span>).</span><br><span class="line">                excludePathPatterns(<span class="string">&quot;/**/*.js&quot;</span>).</span><br><span class="line">                excludePathPatterns(<span class="string">&quot;/**/*.css&quot;</span>).</span><br><span class="line">                excludePathPatterns(<span class="string">&quot;/**/*.png&quot;</span>).</span><br><span class="line">                excludePathPatterns(<span class="string">&quot;/**/*.jpg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习：登录拦截器"><a href="#练习：登录拦截器" class="headerlink" title="练习：登录拦截器"></a>练习：登录拦截器</h2></li></ol></li></ol></li></ol><p>要求登录、注册页面不拦截，其他页面都拦截<br>当登录成功写入 session 之后，拦截的页面可正常访问<br>在 1.3 中已经创建了自定义拦截器 和 将自定义拦截器添加到系统配置中，并设置拦截的规则</p><ol><li>下面创建登录和首页的 html</li><li>创建 controller 包，在包中创建 UserController，写登录页面和首页的业务代码 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">login</span><span class="params">(HttpServletRequest request,String username, String password)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasLength(username) &amp;&amp; StringUtils.hasLength(password)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(username.equals(<span class="string">&quot;admin&quot;</span>) &amp;&amp; password.equals(<span class="string">&quot;admin&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">                session.setAttribute(<span class="string">&quot;userinfo&quot;</span>,<span class="string">&quot;userinfo&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello Index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>运行程序，访问页面，对比登录前和登录后的效果</li></ol><h2 id="拦截器实现原理"><a href="#拦截器实现原理" class="headerlink" title="拦截器实现原理"></a>拦截器实现原理</h2><p>有了拦截器之后，会在调⽤ Controller 之前进⾏相应的业务处理  </p><p>实现原理源码分析<br>所有的 Controller 执行都会通过一个调度器 DispatcherServlet 来实现<br>而所有方法都会执行 DispatcherServlet 中的 doDispatch 调度⽅法。</p><p>通过源码分析，可以看出，Sping 中的拦截器也是通过动态代理和环绕通知的思想实现的</p><h2 id="统一访问前缀添加"><a href="#统一访问前缀添加" class="headerlink" title="统一访问前缀添加"></a>统一访问前缀添加</h2><p>所有请求地址添加 api 前缀，c 表示所有<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">// 所有的接口添加 api 前缀</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> &#123;</span><br><span class="line">        configurer.addPathPrefix(<span class="string">&quot;api&quot;</span>, c -&gt; <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h1><p>给当前的类上加 @ControllerAdvice 表示控制器通知类<br>给方法上添加 @ExceptionHandler(xxx.class)，表示异常处理器，添加异常返回的业务代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello Index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在 config 包中，创建 MyExceptionAdvice 类<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span> <span class="comment">// 当前是针对 Controller 的通知类（增强类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyExceptionAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line">    <span class="keyword">public</span> HashMap&lt;String,Object&gt; <span class="title function_">arithmeticExceptionAdvice</span><span class="params">(ArithmeticException e)</span> &#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        result.put(<span class="string">&quot;state&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">        result.put(<span class="string">&quot;data&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        result.put(<span class="string">&quot;msg&quot;</span> , <span class="string">&quot;算出异常：&quot;</span>+ e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>也可以这样写，效果是一样的<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyExceptionAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> HashMap&lt;String,Object&gt; <span class="title function_">arithmeticExceptionAdvice</span><span class="params">(ArithmeticException e)</span> &#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        result.put(<span class="string">&quot;state&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">        result.put(<span class="string">&quot;data&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        result.put(<span class="string">&quot;msg&quot;</span> , <span class="string">&quot;算数异常：&quot;</span>+ e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果再有一个空指针异常，那么上面的代码是不行的，还要写一个针对空指针异常处理器<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(NullPointerException.class)</span></span><br><span class="line"><span class="keyword">public</span> HashMap&lt;String,Object&gt; <span class="title function_">nullPointerExceptionAdvice</span><span class="params">(NullPointerException e)</span> &#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    result.put(<span class="string">&quot;state&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">    result.put(<span class="string">&quot;data&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    result.put(<span class="string">&quot;msg&quot;</span> , <span class="string">&quot;空指针异常异常：&quot;</span>+ e.getMessage());</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(HttpServletRequest request,String username, String password)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    System.out.println(obj.hashCode());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello Index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是需要考虑的一点是，如果每个异常都这样写，那么工作量是非常大的，并且还有自定义异常，所以上面这样写肯定是不好的，既然是异常直接写 Exception 就好了，它是所有异常的父类，如果遇到不是前面写的两种异常，那么就会直接匹配到 Exception<br>当有多个异常通知时，匹配顺序为当前类及其⼦类向上依次匹配<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> HashMap&lt;String,Object&gt; <span class="title function_">exceptionAdvice</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    result.put(<span class="string">&quot;state&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">    result.put(<span class="string">&quot;data&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    result.put(<span class="string">&quot;msg&quot;</span> , <span class="string">&quot;异常：&quot;</span>+ e.getMessage());</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以看到优先匹配的还是前面写的 空指针异常</p><h1 id="统一数据格式返回"><a href="#统一数据格式返回" class="headerlink" title="统一数据格式返回"></a>统一数据格式返回</h1><h2 id="统一数据格式返回的实现"><a href="#统一数据格式返回的实现" class="headerlink" title="统一数据格式返回的实现"></a>统一数据格式返回的实现</h2><ol><li>给当前类添加 @ControllerAdvice</li><li>实现 ResponseBodyAdvice 重写其方法<br>supports 方法，此方法表示内容是否需要重写（通过此⽅法可以选择性部分控制器和方法进行重写），如果要重写返回 true<br>beforeBodyWrite 方法，方法返回之前调用此方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyResponseAdvice</span> <span class="keyword">implements</span> <span class="title class_">ResponseBodyAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个 boolean 值，true 表示返回数据之前对数据进行重写，也就是会进入 beforeBodyWrite 方法</span></span><br><span class="line">    <span class="comment">// 返回 false 表示对结果不进行任何处理，直接返回</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(MethodParameter returnType, Class converterType)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法返回之前调用此方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">beforeBodyWrite</span><span class="params">(Object body, MethodParameter returnType, MediaType selectedContentType, Class selectedConverterType, ServerHttpRequest request, ServerHttpResponse response)</span> &#123;</span><br><span class="line">        HashMap&lt;String,Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        result.put(<span class="string">&quot;state&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        result.put(<span class="string">&quot;data&quot;</span>,body);</span><br><span class="line">        result.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">login</span><span class="params">(HttpServletRequest request,String username, String password)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasLength(username) &amp;&amp; StringUtils.hasLength(password)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(username.equals(<span class="string">&quot;admin&quot;</span>) &amp;&amp; password.equals(<span class="string">&quot;admin&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">                session.setAttribute(<span class="string">&quot;userinfo&quot;</span>,<span class="string">&quot;userinfo&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/reg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> SpringBoot统一登录鉴权、异常处理、数据格式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMq博客整理</title>
      <link href="/posts/8942.html"/>
      <url>/posts/8942.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/6976033887449251876">SpringBoot 整合 RabbitMQ（注解监听，临时队列）</a><br><a href="https://juejin.cn/post/6977981645475282958#heading-2">RabbitMQ 可靠性、重复消费、顺序性、消息积压解决方案</a><br><a href="https://juejin.cn/post/7117842051286171655">RabbitMQ：消息丢失 | 消息重复 | 消息积压的原因+解决方案+网上学不到的使用心得</a></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> RabbitMq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> RabbitMq </tag>
            
            <tag> RabbitMq博客整理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMq和SpringBoot的整合</title>
      <link href="/posts/41445.html"/>
      <url>/posts/41445.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>该篇文章内容较多，包括有 rabbitMq 相关的一些简单理论介绍，provider 消息推送实例，consumer 消息消费实例，Direct、Topic、Fanout 的使用，消息回调、手动确认等。 （但是关于 rabbitMq 的安装，就不介绍了）</p><p>在安装完 rabbitMq 后，输入 <a href="http://ip:15672/">http://ip:15672/</a> ，是可以看到一个简单后台管理界面的。</p><p><img src="https://s2.loli.net/2023/03/16/JpdQInSWVjZ8fOA.png" alt="image.png"></p><p>在这个界面里面我们可以做些什么？<br>可以手动创建虚拟 host，创建用户，分配权限，创建交换机，创建队列等等，还有查看队列消息，消费效率，推送效率等等。</p><p>以上这些管理界面的操作在这篇暂时不做扩展描述，我想着重介绍后面实例里会使用到的。</p><p>首先先介绍一个简单的一个消息推送到接收的流程，提供一个简单的图：</p><p><img src="https://s2.loli.net/2023/03/16/wlBdpUcToVziZMF.png" alt="image.png"></p><p>黄色的圈圈就是我们的消息推送服务，将消息推送到 中间方框里面也就是 rabbitMq 的服务器，然后经过服务器里面的交换机、队列等各种关系（后面会详细讲）将数据处理入列后，最终右边的蓝色圈圈消费者获取对应监听的消息。</p><p>常用的交换机有以下三种，因为消费者是从队列获取信息的，队列是绑定交换机的（一般），所以对应的消息推送/接收模式也会有以下几种：</p><ul><li><p>Direct Exchange</p><p>直连型交换机，根据消息携带的路由键将消息投递给对应队列。</p><p>大致流程，有一个队列绑定到一个直连交换机上，同时赋予一个路由键 routing key 。然后当一个消息携带着路由值为 X，这个消息通过生产者发送给交换机时，交换机就会根据这个路由值 X 去寻找绑定值也是 X 的队列。</p></li><li><p>Fanout Exchange</p><p>扇型交换机，这个交换机没有路由键概念，就算你绑了路由键也是无视的。 这个交换机在接收到消息后，会直接转发到绑定到它上面的所有队列。</p></li><li><p>Topic Exchange</p><p>主题交换机，这个交换机其实跟直连交换机流程差不多，但是它的特点就是在它的路由键和绑定键之间是有规则的。<br>简单地介绍下规则：</p><p>* (星号) 用来表示一个单词 (必须出现的)<br># (井号) 用来表示任意数量（零个或多个）单词<br>通配的绑定键是跟队列进行绑定的，举个小例子</p><ul><li>队列 Q1 绑定键为 <em>.TT.</em> 队列 Q2 绑定键为 TT.#</li><li>如果一条消息携带的路由键为 A.TT.B，那么队列 Q1 将会收到；</li><li>如果一条消息携带的路由键为 TT.AA.BB，那么队列 Q2 将会收到；</li></ul><p>主题交换机是非常强大的，为啥这么膨胀？<br>当一个队列的绑定键为 “#”（井号） 的时候，这个队列将会无视消息的路由键，接收所有的消息。<br>当 * (星号) 和 # (井号) 这两个特殊字符都未在绑定键中出现的时候，此时主题交换机就拥有的直连交换机的行为。<br>所以主题交换机也就实现了扇形交换机的功能，和直连交换机的功能。</p></li></ul><p>另外还有 Header Exchange 头交换机 ，Default Exchange 默认交换机，Dead Letter Exchange 死信交换机，这几个该篇暂不做讲述</p><h2 id="Direct-Exchange-直连交换机"><a href="#Direct-Exchange-直连交换机" class="headerlink" title="Direct Exchange 直连交换机"></a>Direct Exchange 直连交换机</h2><p>本次实例教程需要创建 2 个 springboot 项目，一个 rabbitmq-provider （生产者），一个 rabbitmq-consumer（消费者）。</p><p>首先创建 rabbitmq-provider，</p><p>pom.xml 里用到的 jar 依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--rabbitmq--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后 application.yml：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8021</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#给项目来个名字</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rabbitmq-provider</span></span><br><span class="line">  <span class="comment">#配置rabbitMq 服务器</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="comment">#虚拟host 可以不设置,使用server默认host</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">JCcccHost</span></span><br></pre></td></tr></table></figure><p>ps：里面的虚拟 host 配置项不是必须的，我自己在 rabbitmq 服务上创建了自己的虚拟 host，所以我配置了；你们不创建，就不用加这个配置项。</p><p>那么怎么建一个单独的 host 呢？ 假如我就是想给某个项目接入，使用一个单独 host，顺便使用一个单独的账号，就好像我文中配置的 root 这样。</p><p>其实也很简便：</p><p>virtual-host 的创建：</p><p><img src="https://s2.loli.net/2023/03/16/8vNYEIGelSKXoyp.png" alt="image.png"></p><p>账号 user 的创建：</p><p><img src="https://s2.loli.net/2023/03/16/LERehnC7F8kZlys.png" alt="image.png"></p><p>然后记得给账号分配权限，指定使用某个 virtual host：</p><p><img src="https://s2.loli.net/2023/03/16/d4On9jLlE1652Mv.png" alt="image.png"></p><p>其实还可以特定指定交换机使用权等等</p><p><img src="https://s2.loli.net/2023/03/16/QkFnxdBgAuUrej9.png" alt="image.png"></p><p>回归正题，继续继续。</p><p>接着我们先使用下 direct exchange(直连型交换机),创建 DirectRabbitConfig.java（对于队列和交换机持久化以及连接使用设置，在注释里有说明，后面的不同交换机的配置就不做同样说明了）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> : JCccc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span> : 2019/9/3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> :</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectRabbitConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//队列 起名：TestDirectQueue</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">TestDirectQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// durable:是否持久化,默认是false,持久化队列：会被存储在磁盘上，当消息代理重启时仍然存在，暂存队列：当前连接有效</span></span><br><span class="line">        <span class="comment">// exclusive:默认也是false，只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable</span></span><br><span class="line">        <span class="comment">// autoDelete:是否自动删除，当没有生产者或者消费者使用此队列，该队列会自动删除。</span></span><br><span class="line">        <span class="comment">//   return new Queue(&quot;TestDirectQueue&quot;,true,true,false);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一般设置一下队列的持久化就好,其余两个就是默认false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;TestDirectQueue&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Direct交换机 起名：TestDirectExchange</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    DirectExchange <span class="title function_">TestDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">//  return new DirectExchange(&quot;TestDirectExchange&quot;,true,true);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;TestDirectExchange&quot;</span>,<span class="literal">true</span>,<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定  将队列和交换机绑定, 并设置用于匹配键：TestDirectRouting</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Binding <span class="title function_">bindingDirect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(TestDirectQueue()).to(TestDirectExchange()).with(<span class="string">&quot;TestDirectRouting&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    DirectExchange <span class="title function_">lonelyDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;lonelyDirectExchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后写个简单的接口进行消息推送（根据需求也可以改为定时任务等等，具体看需求），SendMessageController.java：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> : JCccc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span> : 2019/9/3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> :</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMessageController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;  <span class="comment">//使用RabbitTemplate,这提供了接收/发送等等方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sendDirectMessage&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendDirectMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">messageId</span> <span class="operator">=</span> String.valueOf(UUID.randomUUID());</span><br><span class="line">        <span class="type">String</span> <span class="variable">messageData</span> <span class="operator">=</span> <span class="string">&quot;test message, hello!&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">createTime</span> <span class="operator">=</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">        Map&lt;String,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;messageId&quot;</span>,messageId);</span><br><span class="line">        map.put(<span class="string">&quot;messageData&quot;</span>,messageData);</span><br><span class="line">        map.put(<span class="string">&quot;createTime&quot;</span>,createTime);</span><br><span class="line">        <span class="comment">//将消息携带绑定键值：TestDirectRouting 发送到交换机TestDirectExchange</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;TestDirectExchange&quot;</span>, <span class="string">&quot;TestDirectRouting&quot;</span>, map);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把 rabbitmq-provider 项目运行，调用下接口:</p><p><img src="https://s2.loli.net/2023/03/17/9ESvzKViFMQZRlt.png" alt="image.png"></p><p>因为我们目前还没弄消费者 rabbitmq-consumer，消息没有被消费的，我们去 rabbitMq 管理页面看看，是否推送成功：</p><p><img src="https://s2.loli.net/2023/03/17/OI5mi6aVKSzAwu1.png" alt="image.png"></p><p>再看看队列（界面上的各个英文项代表什么意思，可以自己查查哈，对理解还是有帮助的）：</p><p><img src="https://s2.loli.net/2023/03/17/rTAQuIyB3hiRbvU.png" alt="image.png"></p><p>很好，消息已经推送到 rabbitMq 服务器上面了。</p><p>接下来，创建 rabbitmq-consumer 项目：</p><p>pom.xml 里的 jar 依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--rabbitmq--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后是 application.yml：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8022</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#给项目来个名字</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rabbitmq-consumer</span></span><br><span class="line">  <span class="comment">#配置rabbitMq 服务器</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="comment">#虚拟host 可以不设置,使用server默认host</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">JCcccHost</span></span><br></pre></td></tr></table></figure><p>然后一样，创建 DirectRabbitConfig.java（消费者单纯的使用，其实可以不用添加这个配置，直接建后面的监听就好，使用注解来让监听器监听对应的队列即可。配置上了的话，其实消费者也是生成者的身份，也能推送该消息。）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> : JCccc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span> : 2019/9/3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> :</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectRabbitConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//队列 起名：TestDirectQueue</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">TestDirectQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;TestDirectQueue&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Direct交换机 起名：TestDirectExchange</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    DirectExchange <span class="title function_">TestDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;TestDirectExchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定  将队列和交换机绑定, 并设置用于匹配键：TestDirectRouting</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Binding <span class="title function_">bindingDirect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(TestDirectQueue()).to(TestDirectExchange()).with(<span class="string">&quot;TestDirectRouting&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是创建消息接收监听类，DirectReceiver.java：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;TestDirectQueue&quot;)</span><span class="comment">//监听的队列名称 TestDirectQueue</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectReceiver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(Map testMessage)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DirectReceiver消费者收到消息  : &quot;</span> + testMessage.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将 rabbitmq-consumer 项目运行起来，可以看到把之前推送的那条消息消费下来了：</p><p><img src="https://s2.loli.net/2023/03/17/prwMKD46aBzWS5Q.png" alt="image.png"></p><p>然后可以再继续调用 rabbitmq-provider 项目的推送消息接口，可以看到消费者即时消费消息：</p><p><img src="https://s2.loli.net/2023/03/17/nsamSqi3R4cHUOZ.png" alt="image.png"></p><p>那么直连交换机既然是一对一，那如果咱们配置多台监听绑定到同一个直连交互的同一个队列，会怎么样？</p><p><img src="https://s2.loli.net/2023/03/17/8dx1Pi9YL5rkcZT.png" alt="image.png"></p><p>可以看到是实现了轮询的方式对消息进行消费，而且不存在重复消费。</p><h2 id="Topic-Exchange-主题交换机。"><a href="#Topic-Exchange-主题交换机。" class="headerlink" title="Topic Exchange 主题交换机。"></a>Topic Exchange 主题交换机。</h2><p>在 rabbitmq-provider 项目里面创建 TopicRabbitConfig.java：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.TopicExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> : JCccc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span> : 2019/9/3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> :</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicRabbitConfig</span> &#123;</span><br><span class="line">    <span class="comment">//绑定键</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">man</span> <span class="operator">=</span> <span class="string">&quot;topic.man&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">woman</span> <span class="operator">=</span> <span class="string">&quot;topic.woman&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">firstQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(TopicRabbitConfig.man);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">secondQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(TopicRabbitConfig.woman);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    TopicExchange <span class="title function_">exchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(<span class="string">&quot;topicExchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//将firstQueue和topicExchange绑定,而且绑定的键值为topic.man</span></span><br><span class="line">    <span class="comment">//这样只要是消息携带的路由键是topic.man,才会分发到该队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Binding <span class="title function_">bindingExchangeMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(firstQueue()).to(exchange()).with(man);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将secondQueue和topicExchange绑定,而且绑定的键值为用上通配路由键规则topic.#</span></span><br><span class="line">    <span class="comment">// 这样只要是消息携带的路由键是以topic.开头,都会分发到该队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Binding <span class="title function_">bindingExchangeMessage2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(secondQueue()).to(exchange()).with(<span class="string">&quot;topic.#&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后添加多 2 个接口，用于推送消息到主题交换机：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@GetMapping(&quot;/sendTopicMessage1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendTopicMessage1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">messageId</span> <span class="operator">=</span> String.valueOf(UUID.randomUUID());</span><br><span class="line">        <span class="type">String</span> <span class="variable">messageData</span> <span class="operator">=</span> <span class="string">&quot;message: M A N &quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">createTime</span> <span class="operator">=</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">        Map&lt;String, Object&gt; manMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        manMap.put(<span class="string">&quot;messageId&quot;</span>, messageId);</span><br><span class="line">        manMap.put(<span class="string">&quot;messageData&quot;</span>, messageData);</span><br><span class="line">        manMap.put(<span class="string">&quot;createTime&quot;</span>, createTime);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;topicExchange&quot;</span>, <span class="string">&quot;topic.man&quot;</span>, manMap);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sendTopicMessage2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendTopicMessage2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">messageId</span> <span class="operator">=</span> String.valueOf(UUID.randomUUID());</span><br><span class="line">        <span class="type">String</span> <span class="variable">messageData</span> <span class="operator">=</span> <span class="string">&quot;message: woman is all &quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">createTime</span> <span class="operator">=</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">        Map&lt;String, Object&gt; womanMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        womanMap.put(<span class="string">&quot;messageId&quot;</span>, messageId);</span><br><span class="line">        womanMap.put(<span class="string">&quot;messageData&quot;</span>, messageData);</span><br><span class="line">        womanMap.put(<span class="string">&quot;createTime&quot;</span>, createTime);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;topicExchange&quot;</span>, <span class="string">&quot;topic.woman&quot;</span>, womanMap);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者这边已经完事，先不急着运行，在 rabbitmq-consumer 项目上，创建 TopicManReceiver.java：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> : JCccc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span> : 2019/9/3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> :</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;topic.man&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicManReceiver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(Map testMessage)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TopicManReceiver消费者收到消息  : &quot;</span> + testMessage.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再创建一个 TopicTotalReceiver.java：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.elegant.rabbitmqconsumer.receiver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> : JCccc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span> : 2019/9/3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> :</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;topic.woman&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicTotalReceiver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(Map testMessage)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TopicTotalReceiver消费者收到消息  : &quot;</span> + testMessage.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样，加主题交换机的相关配置，TopicRabbitConfig.java（消费者一定要加这个配置吗？ 不需要的其实，理由在前面已经说过了。）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.TopicExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> : JCccc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span> : 2019/9/3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> :</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicRabbitConfig</span> &#123;</span><br><span class="line">    <span class="comment">//绑定键</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">man</span> <span class="operator">=</span> <span class="string">&quot;topic.man&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">woman</span> <span class="operator">=</span> <span class="string">&quot;topic.woman&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">firstQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(TopicRabbitConfig.man);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">secondQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(TopicRabbitConfig.woman);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    TopicExchange <span class="title function_">exchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(<span class="string">&quot;topicExchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//将firstQueue和topicExchange绑定,而且绑定的键值为topic.man</span></span><br><span class="line">    <span class="comment">//这样只要是消息携带的路由键是topic.man,才会分发到该队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Binding <span class="title function_">bindingExchangeMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(firstQueue()).to(exchange()).with(man);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将secondQueue和topicExchange绑定,而且绑定的键值为用上通配路由键规则topic.#</span></span><br><span class="line">    <span class="comment">// 这样只要是消息携带的路由键是以topic.开头,都会分发到该队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Binding <span class="title function_">bindingExchangeMessage2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(secondQueue()).to(exchange()).with(<span class="string">&quot;topic.#&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后把 rabbitmq-provider，rabbitmq-consumer 两个项目都跑起来，先调用/sendTopicMessage1 接口：</p><p><img src="https://s2.loli.net/2023/03/17/u6wmGs3gBKUCfHc.png" alt="image.png"></p><p>然后看消费者 rabbitmq-consumer 的控制台输出情况：<br>TopicManReceiver 监听队列 1，绑定键为：topic.man<br>TopicTotalReceiver 监听队列 2，绑定键为：topic.#<br>而当前推送的消息，携带的路由键为：topic.man</p><p>所以可以看到两个监听消费者 receiver 都成功消费到了消息，因为这两个 recevier 监听的队列的绑定键都能与这条消息携带的路由键匹配上。</p><p><img src="https://s2.loli.net/2023/03/17/nKV4aigjfWErqGO.png" alt="image.png"></p><p>接下来调用接口/sendTopicMessage2:</p><p><img src="https://s2.loli.net/2023/03/17/8SOFgxX6teNHjoV.png" alt="image.png"></p><p>然后看消费者 rabbitmq-consumer 的控制台输出情况：<br>TopicManReceiver 监听队列 1，绑定键为：topic.man<br>TopicTotalReceiver 监听队列 2，绑定键为：topic.#<br>而当前推送的消息，携带的路由键为：topic.woman</p><p>所以可以看到两个监听消费者只有 TopicTotalReceiver 成功消费到了消息。</p><p><img src="https://s2.loli.net/2023/03/17/fGrFMjyROH3k6vK.png" alt="image.png"></p><h2 id="Fanout-Exchang-扇型交换机。"><a href="#Fanout-Exchang-扇型交换机。" class="headerlink" title="Fanout Exchang 扇型交换机。"></a>Fanout Exchang 扇型交换机。</h2><p>先在 rabbitmq-provider 项目上创建 FanoutRabbitConfig.java：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> : JCccc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span> : 2019/9/3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> :</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutRabbitConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  创建三个队列 ：fanout.A   fanout.B  fanout.C</span></span><br><span class="line"><span class="comment">     *  将三个队列都绑定在交换机 fanoutExchange 上</span></span><br><span class="line"><span class="comment">     *  因为是扇型交换机, 路由键无需配置,配置也不起作用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queueA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queueB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queueC</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;fanoutExchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Binding <span class="title function_">bindingExchangeA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueA()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Binding <span class="title function_">bindingExchangeB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueB()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Binding <span class="title function_">bindingExchangeC</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueC()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是写一个接口用于推送消息：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/sendFanoutMessage&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">sendFanoutMessage</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">messageId</span> <span class="operator">=</span> String.valueOf(UUID.randomUUID());</span><br><span class="line">    <span class="type">String</span> <span class="variable">messageData</span> <span class="operator">=</span> <span class="string">&quot;message: testFanoutMessage &quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">createTime</span> <span class="operator">=</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;messageId&quot;</span>, messageId);</span><br><span class="line">    map.put(<span class="string">&quot;messageData&quot;</span>, messageData);</span><br><span class="line">    map.put(<span class="string">&quot;createTime&quot;</span>, createTime);</span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;fanoutExchange&quot;</span>, <span class="literal">null</span>, map);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着在 rabbitmq-consumer 项目里加上消息消费类，</p><p>FanoutReceiverA.java：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> : JCccc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span> : 2019/9/3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> :</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.A&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutReceiverA</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(Map testMessage)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;FanoutReceiverA消费者收到消息  : &quot;</span> +testMessage.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FanoutReceiverB.java：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> : JCccc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span> : 2019/9/3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> :</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.B&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutReceiverB</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(Map testMessage)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;FanoutReceiverB消费者收到消息  : &quot;</span> +testMessage.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FanoutReceiverC.java：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> : JCccc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span> : 2019/9/3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> :</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.C&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutReceiverC</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(Map testMessage)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;FanoutReceiverC消费者收到消息  : &quot;</span> +testMessage.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后加上扇型交换机的配置类，FanoutRabbitConfig.java（消费者真的要加这个配置吗？ 不需要的其实，理由在前面已经说过了）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> : JCccc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span> : 2019/9/3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> :</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutRabbitConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  创建三个队列 ：fanout.A   fanout.B  fanout.C</span></span><br><span class="line"><span class="comment">     *  将三个队列都绑定在交换机 fanoutExchange 上</span></span><br><span class="line"><span class="comment">     *  因为是扇型交换机, 路由键无需配置,配置也不起作用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queueA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queueB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queueC</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;fanoutExchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Binding <span class="title function_">bindingExchangeA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueA()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Binding <span class="title function_">bindingExchangeB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueB()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Binding <span class="title function_">bindingExchangeC</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueC()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后将 rabbitmq-provider 和 rabbitmq-consumer 项目都跑起来，调用下接口/sendFanoutMessage ：</p><p><img src="https://s2.loli.net/2023/03/17/IfmFxgY6R2jnhsb.png" alt="image.png"></p><p>然后看看 rabbitmq-consumer 项目的控制台情况：</p><p><img src="https://s2.loli.net/2023/03/17/j6pT1PLaMAlFE8h.png" alt="image.png"></p><p>可以看到只要发送到 fanoutExchange 这个扇型交换机的消息， 三个队列都绑定这个交换机，所以三个消息接收类都监听到了这条消息。</p><p>到了这里其实三个常用的交换机的使用我们已经完毕，那么接下来我们继续讲讲消息的回调，其实就是消息确认（生产者推送消息成功，消费者接收消息成功）。</p><h2 id="生产者发布消息确认"><a href="#生产者发布消息确认" class="headerlink" title="生产者发布消息确认"></a>生产者发布消息确认</h2><p><strong>ps： 本篇文章使用 springboot 版本为 2.1.7.RELEASE ;<br>如果你们在配置确认回调，测试发现无法触发回调函数，那么存在原因也许是因为版本导致的配置项不起效，<br>可以把 publisher-confirms: true 替换为 publisher-confirm-type: correlated</strong></p><p>配置：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8021</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#给项目来个名字</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rabbitmq-provider</span></span><br><span class="line">  <span class="comment">#配置rabbitMq 服务器</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="comment">#虚拟host 可以不设置,使用server默认host</span></span><br><span class="line">    <span class="attr">virtual-host:</span></span><br><span class="line">      <span class="string">JCcccHost</span></span><br><span class="line">      <span class="comment">#确认消息已发送到交换机(Exchange)</span></span><br><span class="line">    <span class="comment">#publisher-confirms: true</span></span><br><span class="line">    <span class="attr">publisher-confirm-type:</span></span><br><span class="line">      <span class="string">correlated</span></span><br><span class="line">      <span class="comment">#确认消息已发送到队列(Queue)</span></span><br><span class="line">    <span class="attr">publisher-returns:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>然后是配置相关的消息确认回调函数，RabbitConfig.java：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> : JCccc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span> : 2019/9/3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> :</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RabbitTemplate <span class="title function_">createRabbitTemplate</span><span class="params">(ConnectionFactory connectionFactory)</span>&#123;</span><br><span class="line">        <span class="type">RabbitTemplate</span> <span class="variable">rabbitTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>();</span><br><span class="line">        rabbitTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">//设置开启Mandatory,才能触发回调函数,无论消息推送结果怎么样都强制调用回调函数</span></span><br><span class="line">        rabbitTemplate.setMandatory(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ConfirmCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirm</span><span class="params">(CorrelationData correlationData, <span class="type">boolean</span> ack, String cause)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;ConfirmCallback:     &quot;</span>+<span class="string">&quot;相关数据：&quot;</span>+correlationData);</span><br><span class="line">                System.out.println(<span class="string">&quot;ConfirmCallback:     &quot;</span>+<span class="string">&quot;确认情况：&quot;</span>+ack);</span><br><span class="line">                System.out.println(<span class="string">&quot;ConfirmCallback:     &quot;</span>+<span class="string">&quot;原因：&quot;</span>+cause);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        rabbitTemplate.setReturnCallback(<span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ReturnCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(Message message, <span class="type">int</span> replyCode, String replyText, String exchange, String routingKey)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;ReturnCallback:     &quot;</span>+<span class="string">&quot;消息：&quot;</span>+message);</span><br><span class="line">                System.out.println(<span class="string">&quot;ReturnCallback:     &quot;</span>+<span class="string">&quot;回应码：&quot;</span>+replyCode);</span><br><span class="line">                System.out.println(<span class="string">&quot;ReturnCallback:     &quot;</span>+<span class="string">&quot;回应信息：&quot;</span>+replyText);</span><br><span class="line">                System.out.println(<span class="string">&quot;ReturnCallback:     &quot;</span>+<span class="string">&quot;交换机：&quot;</span>+exchange);</span><br><span class="line">                System.out.println(<span class="string">&quot;ReturnCallback:     &quot;</span>+<span class="string">&quot;路由键：&quot;</span>+routingKey);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rabbitTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，生产者推送消息的消息确认调用回调函数已经完毕。<br>可以看到上面写了两个回调函数，一个叫 ConfirmCallback ，一个叫 RetrunCallback；<br>那么以上这两种回调函数都是在什么情况会触发呢？</p><p>先从总体的情况分析，推送消息存在四种情况：</p><ul><li>消息推送到 server，但是在 server 里找不到交换机</li><li>消息推送到 server，找到交换机了，但是没找到队列</li><li>消息推送到 sever，交换机和队列啥都没找到</li><li>消息推送成功</li></ul><p>那么我先写几个接口来分别测试和认证下以上 4 种情况，消息确认触发回调函数的情况：</p><h3 id="消息推送到-server，但是在-server-里找不到交换机"><a href="#消息推送到-server，但是在-server-里找不到交换机" class="headerlink" title="消息推送到 server，但是在 server 里找不到交换机"></a>消息推送到 server，但是在 server 里找不到交换机</h3><p>写个测试接口，把消息推送到名为‘non-existent-exchange’的交换机上（这个交换机是没有创建没有配置的）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/TestMessageAck&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">TestMessageAck</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">messageId</span> <span class="operator">=</span> String.valueOf(UUID.randomUUID());</span><br><span class="line">    <span class="type">String</span> <span class="variable">messageData</span> <span class="operator">=</span> <span class="string">&quot;message: non-existent-exchange test message &quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">createTime</span> <span class="operator">=</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;messageId&quot;</span>, messageId);</span><br><span class="line">    map.put(<span class="string">&quot;messageData&quot;</span>, messageData);</span><br><span class="line">    map.put(<span class="string">&quot;createTime&quot;</span>, createTime);</span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;non-existent-exchange&quot;</span>, <span class="string">&quot;TestDirectRouting&quot;</span>, map);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用接口，查看 rabbitmq-provuder 项目的控制台输出情况（原因里面有说，没有找到交换机’non-existent-exchange’）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2019-09-04 09:37:45.197 ERROR 8172 --- [ 127.0.0.1:5672] o.s.a.r.c.CachingConnectionFactory       : Channel shutdown: channel error; protocol method: #method&lt;channel.close&gt;(reply-code=404, reply-text=NOT_FOUND - no exchange &#x27;non-existent-exchange&#x27; in vhost &#x27;JCcccHost&#x27;, class-id=60, method-id=40)</span><br><span class="line">ConfirmCallback:     相关数据：null</span><br><span class="line">ConfirmCallback:     确认情况：false</span><br><span class="line">ConfirmCallback:     原因：channel error; protocol method: #method&lt;channel.close&gt;(reply-code=404, reply-text=NOT_FOUND - no exchange &#x27;non-existent-exchange&#x27; in vhost &#x27;JCcccHost&#x27;, class-id=60, method-id=40)</span><br></pre></td></tr></table></figure><p>结论： 这种情况触发的是 ConfirmCallback 回调函数。</p><h3 id="消息推送到-server，找到交换机了，但是没找到队列"><a href="#消息推送到-server，找到交换机了，但是没找到队列" class="headerlink" title="消息推送到 server，找到交换机了，但是没找到队列"></a>消息推送到 server，找到交换机了，但是没找到队列</h3><p>这种情况就是需要新增一个交换机，但是不给这个交换机绑定队列，我来简单地在 DirectRabitConfig 里面新增一个直连交换机，名叫‘lonelyDirectExchange’，但没给它做任何绑定配置操作：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">DirectExchange <span class="title function_">lonelyDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;lonelyDirectExchange&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后写个测试接口，把消息推送到名为‘lonelyDirectExchange’的交换机上（这个交换机是没有任何队列配置的）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/TestMessageAck2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">TestMessageAck2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">messageId</span> <span class="operator">=</span> String.valueOf(UUID.randomUUID());</span><br><span class="line">    <span class="type">String</span> <span class="variable">messageData</span> <span class="operator">=</span> <span class="string">&quot;message: lonelyDirectExchange test message &quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">createTime</span> <span class="operator">=</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;messageId&quot;</span>, messageId);</span><br><span class="line">    map.put(<span class="string">&quot;messageData&quot;</span>, messageData);</span><br><span class="line">    map.put(<span class="string">&quot;createTime&quot;</span>, createTime);</span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;lonelyDirectExchange&quot;</span>, <span class="string">&quot;TestDirectRouting&quot;</span>, map);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用接口，查看 rabbitmq-provuder 项目的控制台输出情况：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ReturnCallback:     消息：(Body:&#x27;&#123;createTime=2019-09-04 09:48:01, messageId=563077d9-0a77-4c27-8794-ecfb183eac80, messageData=message: lonelyDirectExchange test message &#125;&#x27; MessageProperties [headers=&#123;&#125;, contentType=application/x-java-serialized-object, contentLength=0, receivedDeliveryMode=PERSISTENT, priority=0, deliveryTag=0])</span><br><span class="line">ReturnCallback:     回应码：312</span><br><span class="line">ReturnCallback:     回应信息：NO_ROUTE</span><br><span class="line">ReturnCallback:     交换机：lonelyDirectExchange</span><br><span class="line">ReturnCallback:     路由键：TestDirectRouting</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ConfirmCallback:     相关数据：null</span><br><span class="line">ConfirmCallback:     确认情况：true</span><br><span class="line">ConfirmCallback:     原因：null</span><br></pre></td></tr></table></figure><p>可以看到这种情况，两个函数都被调用了；</p><p>这种情况下，消息是推送成功到服务器了的，所以 ConfirmCallback 对消息确认情况是 true；<br>而在 RetrunCallback 回调函数的打印参数里面可以看到，消息是推送到了交换机成功了，但是在路由分发给队列的时候，找不到队列，所以报了错误 NO_ROUTE 。</p><p>结论： 这种情况触发的是 ConfirmCallback 和 RetrunCallback 两个回调函数。</p><h3 id="消息推送到-sever，交换机和队列啥都没找到"><a href="#消息推送到-sever，交换机和队列啥都没找到" class="headerlink" title="消息推送到 sever，交换机和队列啥都没找到"></a>消息推送到 sever，交换机和队列啥都没找到</h3><p>这种情况其实一看就觉得跟和没有找到交换机很像，所以情况和回调是一致的，所以不做结果说明了。</p><p>结论： 这种情况触发的是 ConfirmCallback 回调函数。</p><h3 id="消息推送成功"><a href="#消息推送成功" class="headerlink" title="消息推送成功"></a>消息推送成功</h3><p>那么测试下，按照正常调用之前消息推送的接口就行，就调用下 /sendFanoutMessage 接口，可以看到控制台输出：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ConfirmCallback:     相关数据：<span class="literal">null</span></span><br><span class="line">ConfirmCallback:     确认情况：<span class="literal">true</span></span><br><span class="line">ConfirmCallback:     原因：<span class="literal">null</span></span><br></pre></td></tr></table></figure><p>结论：这种情况触发的是 ConfirmCallback 回调函数。</p><p>以上是生产者推送消息的消息确认 回调函数的使用介绍（可以在回调函数根据需求做对应的扩展或者业务数据处理）。</p><h2 id="消费者消费消息确认"><a href="#消费者消费消息确认" class="headerlink" title="消费者消费消息确认"></a>消费者消费消息确认</h2><h3 id="消费者消费确认介绍"><a href="#消费者消费确认介绍" class="headerlink" title="消费者消费确认介绍"></a>消费者消费确认介绍</h3><p>和生产者的消息确认机制不同，因为消息接收本来就是在监听消息，符合条件的消息就会消费下来。<br>所以，消息接收的确认机制主要存在三种模式：</p><ul><li><p>自动确认， 这也是默认的消息确认情况。 AcknowledgeMode.NONE<br>RabbitMQ 成功将消息发出（即将消息成功写入 TCP Socket）中立即认为本次投递已经被正确处理，不管消费者端是否成功处理本次投递。<br>所以这种情况如果消费端消费逻辑抛出异常，也就是消费端没有处理成功这条消息，那么就相当于丢失了消息。<br>一般这种情况我们都是使用 try catch 捕捉异常后，打印日志用于追踪数据，这样找出对应数据再做后续处理。</p></li><li><p>根据情况确认， 这个不做介绍</p></li><li><p>手动确认 ， 这个比较关键，也是我们配置接收消息确认机制时，多数选择的模式。消费者收到消息后，手动调用 basic.ack/basic.nack/basic.reject 后，RabbitMQ 收到这些消息后，才认为本次投递成功。</p><ul><li>basic.ack 用于肯定确认</li><li>basic.nack 用于否定确认（注意：这是 AMQP 0-9-1 的 RabbitMQ 扩展）</li><li>basic.reject 用于否定确认，但与 basic.nack 相比有一个限制:一次只能拒绝单条消息</li></ul></li></ul><p>消费者端以上的 3 个方法都表示消息已经被正确投递，但是 basic.ack 表示消息已经被正确处理。</p><p>而 basic.nack,basic.reject 表示没有被正确处理。</p><p>着重讲下 reject，因为有时候一些场景是需要重新入列的。</p><p>channel.basicReject(deliveryTag, true); 拒绝消费当前消息，如果第二参数传入 true，就是将数据重新丢回队列里，那么下次还会消费这消息。设置 false，就是告诉服务器，我已经知道这条消息数据了，因为一些原因拒绝它，而且服务器也把这个消息丢掉就行。 下次不想再消费这条消息了。</p><p>使用拒绝后重新入列这个确认模式要谨慎，因为一般都是出现异常的时候，catch 异常再拒绝入列，选择是否重入列。</p><p>但是如果使用不当会导致一些每次都被你重入列的消息一直消费-入列-消费-入列这样循环，会导致消息积压。</p><p>顺便也简单讲讲 nack，这个也是相当于设置不消费某条消息。</p><p>channel.basicNack(deliveryTag, false, true);<br>第一个参数依然是当前消息到的数据的唯一 id;<br>第二个参数是指是否针对多条消息；如果是 true，也就是说一次性针对当前通道的消息的 tagID 小于当前这条消息的，都拒绝确认。<br>第三个参数是指是否重新入列，也就是指不确认的消息是否重新丢回到队列里面去。</p><p>同样使用不确认后重新入列这个确认模式要谨慎，因为这里也可能因为考虑不周出现消息一直被重新丢回去的情况，导致积压。</p><h3 id="消费者消费确认代码"><a href="#消费者消费确认代码" class="headerlink" title="消费者消费确认代码"></a>消费者消费确认代码</h3><p>在消费者项目里，<br>新建 MessageListenerConfig.java 上添加代码相关的配置代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.elegant.rabbitmqconsumer.receiver.MyAckReceiver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.AcknowledgeMode;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.CachingConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> : JCccc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span> : 2019/9/4</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> :</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageListenerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CachingConnectionFactory connectionFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyAckReceiver myAckReceiver;<span class="comment">//消息接收处理类</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SimpleMessageListenerContainer <span class="title function_">simpleMessageListenerContainer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SimpleMessageListenerContainer</span> <span class="variable">container</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMessageListenerContainer</span>(connectionFactory);</span><br><span class="line">        container.setConcurrentConsumers(<span class="number">1</span>);</span><br><span class="line">        container.setMaxConcurrentConsumers(<span class="number">1</span>);</span><br><span class="line">        container.setAcknowledgeMode(AcknowledgeMode.MANUAL); <span class="comment">// RabbitMQ默认是自动确认，这里改为手动确认消息</span></span><br><span class="line">        <span class="comment">//设置一个队列</span></span><br><span class="line">        container.setQueueNames(<span class="string">&quot;TestDirectQueue&quot;</span>);</span><br><span class="line">        <span class="comment">//如果同时设置多个如下： 前提是队列都是必须已经创建存在的</span></span><br><span class="line">        <span class="comment">//  container.setQueueNames(&quot;TestDirectQueue&quot;,&quot;TestDirectQueue2&quot;,&quot;TestDirectQueue3&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//另一种设置队列的方法,如果使用这种情况,那么要设置多个,就使用addQueues</span></span><br><span class="line">        <span class="comment">//container.setQueues(new Queue(&quot;TestDirectQueue&quot;,true));</span></span><br><span class="line">        <span class="comment">//container.addQueues(new Queue(&quot;TestDirectQueue2&quot;,true));</span></span><br><span class="line">        <span class="comment">//container.addQueues(new Queue(&quot;TestDirectQueue3&quot;,true));</span></span><br><span class="line">        container.setMessageListener(myAckReceiver);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的手动确认消息监听类，MyAckReceiver.java（手动确认模式需要实现 ChannelAwareMessageListener）：<br>之前的相关监听器可以先注释掉，以免造成多个同类型监听器都监听同一个队列。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.listener.api.ChannelAwareMessageListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAckReceiver</span> <span class="keyword">implements</span> <span class="title class_">ChannelAwareMessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">deliveryTag</span> <span class="operator">=</span> message.getMessageProperties().getDeliveryTag();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] body = message.getBody();</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(body));</span><br><span class="line">            Map&lt;String,String&gt; msgMap = (Map&lt;String,String&gt;) ois.readObject();</span><br><span class="line">            <span class="type">String</span> <span class="variable">messageId</span> <span class="operator">=</span> msgMap.get(<span class="string">&quot;messageId&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">messageData</span> <span class="operator">=</span> msgMap.get(<span class="string">&quot;messageData&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">createTime</span> <span class="operator">=</span> msgMap.get(<span class="string">&quot;createTime&quot;</span>);</span><br><span class="line">            ois.close();</span><br><span class="line">            System.out.println(<span class="string">&quot;  MyAckReceiver  messageId:&quot;</span>+messageId+<span class="string">&quot;  messageData:&quot;</span>+messageData+<span class="string">&quot;  createTime:&quot;</span>+createTime);</span><br><span class="line">            System.out.println(<span class="string">&quot;消费的主题消息来自：&quot;</span>+message.getMessageProperties().getConsumerQueue());</span><br><span class="line">            channel.basicAck(deliveryTag, <span class="literal">true</span>); <span class="comment">//第二个参数，手动确认可以被批处理，当该参数为 true 时，则可以一次性确认 delivery_tag 小于等于传入值的所有消息</span></span><br><span class="line"><span class="comment">//channel.basicReject(deliveryTag, true);//第二个参数，true会重新放回队列，所以需要自己根据业务逻辑判断什么时候使用拒绝</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            channel.basicReject(deliveryTag, <span class="literal">false</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时，先调用接口/sendDirectMessage， 给直连交换机 TestDirectExchange 的队列 TestDirectQueue 推送一条消息，可以看到监听器正常消费了下来：</p><p><img src="https://s2.loli.net/2023/03/17/fw2PEWtqO4RzBon.png" alt="image.png"></p><p>到这里，其实已经掌握了怎么去使用消息消费的手动确认了。</p><p>但是这个场景往往不够！ 某些消费者项目里面，监听的好几个队列都想变成手动确认模式，而且处理的消息业务逻辑不一样。</p><p>没有问题，接下来看代码</p><p>场景： 除了直连交换机的队列 TestDirectQueue 需要变成手动确认以外，我们还需要将一个其他的队列</p><p>或者多个队列也变成手动确认，而且不同队列实现不同的业务处理。</p><p>那么我们需要做的第一步，往 SimpleMessageListenerContainer 里添加多个队列：</p><p><img src="https://s2.loli.net/2023/03/17/MSyoXBK59xZIWup.png" alt="20200426111011644.png"></p><p>然后我们的手动确认消息监听类，MyAckReceiver.java 就可以同时将上面设置到的队列的消息都消费下来。</p><p>但是我们需要做不用的业务逻辑处理，那么只需要 根据消息来自的队列名进行区分处理即可，如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.listener.api.ChannelAwareMessageListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAckReceiver</span> <span class="keyword">implements</span> <span class="title class_">ChannelAwareMessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">deliveryTag</span> <span class="operator">=</span> message.getMessageProperties().getDeliveryTag();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] body = message.getBody();</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(body));</span><br><span class="line">            Map&lt;String,String&gt; msgMap = (Map&lt;String,String&gt;) ois.readObject();</span><br><span class="line">            <span class="type">String</span> <span class="variable">messageId</span> <span class="operator">=</span> msgMap.get(<span class="string">&quot;messageId&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">messageData</span> <span class="operator">=</span> msgMap.get(<span class="string">&quot;messageData&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">createTime</span> <span class="operator">=</span> msgMap.get(<span class="string">&quot;createTime&quot;</span>);</span><br><span class="line">            ois.close();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;TestDirectQueue&quot;</span>.equals(message.getMessageProperties().getConsumerQueue()))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;消费的消息来自的队列名为：&quot;</span>+message.getMessageProperties().getConsumerQueue());</span><br><span class="line">                System.out.println(<span class="string">&quot;消息成功消费到  messageId:&quot;</span>+messageId+<span class="string">&quot;  messageData:&quot;</span>+messageData+<span class="string">&quot;  createTime:&quot;</span>+createTime);</span><br><span class="line">                System.out.println(<span class="string">&quot;执行TestDirectQueue中的消息的业务处理流程......&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;fanout.A&quot;</span>.equals(message.getMessageProperties().getConsumerQueue()))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;消费的消息来自的队列名为：&quot;</span>+message.getMessageProperties().getConsumerQueue());</span><br><span class="line">                System.out.println(<span class="string">&quot;消息成功消费到  messageId:&quot;</span>+messageId+<span class="string">&quot;  messageData:&quot;</span>+messageData+<span class="string">&quot;  createTime:&quot;</span>+createTime);</span><br><span class="line">                System.out.println(<span class="string">&quot;执行fanout.A中的消息的业务处理流程......&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            channel.basicAck(deliveryTag, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">//channel.basicReject(deliveryTag, true);//为true会重新放回队列</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            channel.basicReject(deliveryTag, <span class="literal">false</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ok，这时候我们来分别往不同队列推送消息，看看效果：</p><p>调用接口/sendDirectMessage 和 /sendFanoutMessage ，</p><p><img src="https://s2.loli.net/2023/03/17/CU8JhGwg6mVOcQ5.png" alt="image.png"></p><p>如果你还想新增其他的监听队列，也就是按照这种方式新增配置即可（或者完全可以分开多个消费者项目去监听处理）。</p><p>好，这篇 Springboot 整合 rabbitMq 教程就暂且到此。</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> RabbitMq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> RabbitMq </tag>
            
            <tag> RabbitMq和SpringBoot的整合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用jar命令修改jar包中文件的内容</title>
      <link href="/posts/33806.html"/>
      <url>/posts/33806.html</url>
      
        <content type="html"><![CDATA[<h2 id="查找需要修改jar包中的application-yml文件路径"><a href="#查找需要修改jar包中的application-yml文件路径" class="headerlink" title="查找需要修改jar包中的application.yml文件路径"></a>查找需要修改jar包中的application.yml文件路径</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@test ~]# jar tf test.jar | grep application.yml</span><br><span class="line">BOOT-INF/classes/application.yml</span><br></pre></td></tr></table></figure><h2 id="导出jar包中的application-yml文件"><a href="#导出jar包中的application-yml文件" class="headerlink" title="导出jar包中的application.yml文件"></a>导出jar包中的application.yml文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@test ~]# jar xf test.jar BOOT-INF/classes/application.yml</span><br><span class="line">[root@test ~]# ll</span><br><span class="line">drwxr-xr-x   3 root root        21 6月  28 14:54 BOOT-INF</span><br><span class="line"></span><br><span class="line">[root@test ~]# tree BOOT-INF</span><br><span class="line">BOOT-INF</span><br><span class="line">└── classes</span><br><span class="line">    └── application.yml</span><br><span class="line"></span><br><span class="line">1 directory, 1 file</span><br></pre></td></tr></table></figure><h2 id="修改编辑导出的配置文件"><a href="#修改编辑导出的配置文件" class="headerlink" title="修改编辑导出的配置文件"></a>修改编辑导出的配置文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@test ~]# vim BOOT-INF/classes/application.yml</span><br></pre></td></tr></table></figure><h2 id="将修改后的文件重新打入jar包"><a href="#将修改后的文件重新打入jar包" class="headerlink" title="将修改后的文件重新打入jar包"></a>将修改后的文件重新打入jar包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@test ~]# jar uf test.jar BOOT-INF/classes/application.yml</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> Java command </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> Java command </tag>
            
            <tag> 利用jar命令修改jar包中文件的内容 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8种从spring容器里获取bean的方式</title>
      <link href="/posts/45582.html"/>
      <url>/posts/45582.html</url>
      
        <content type="html"><![CDATA[<h2 id="在初始化时保存ApplicationContext对象"><a href="#在初始化时保存ApplicationContext对象" class="headerlink" title="在初始化时保存ApplicationContext对象"></a>在初始化时保存<code>ApplicationContext</code>对象</h2><p>适用于Spring框架的独立应用程序，须要程序通过配置文件初始化Spring。<br>applicationContext.xml配置：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.sxtx.bean.Test&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>&lt;/beans&gt;<br>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//ApplicationContext applicationContext = new FileSystemXmlApplicationContext(&quot;applicationContext.xml&quot;); </span></span><br><span class="line">    Test test= (Test) applicationContext.getBean(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    System.out.println(test);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过Spring提供的工具类获取ApplicationContext对象"><a href="#通过Spring提供的工具类获取ApplicationContext对象" class="headerlink" title="通过Spring提供的工具类获取ApplicationContext对象"></a>通过<code>Spring</code>提供的工具类获取<code>ApplicationContext</code>对象</h2><p>适合于Spring框架的B/S系统，通过<code>ServletContext</code>对象获取<code>ApplicationContext</code>对象。然后在通过它获取须要的类实例。以下两个工具方式的差别是，前者在获取失败时抛出异常。后者返回null。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac1</span> <span class="operator">=</span> WebApplicationContextUtils.getRequiredWebApplicationContext(ServletContext sc); </span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac2</span> <span class="operator">=</span> WebApplicationContextUtils.getWebApplicationContext(ServletContext sc); </span><br><span class="line">ac1.getBean(<span class="string">&quot;beanId&quot;</span>); </span><br><span class="line">ac2.getBean(<span class="string">&quot;beanId&quot;</span>);  </span><br></pre></td></tr></table></figure></p><h2 id="实现接口ApplicationContextAware（推荐）"><a href="#实现接口ApplicationContextAware（推荐）" class="headerlink" title="实现接口ApplicationContextAware（推荐）"></a>实现接口<code>ApplicationContextAware</code>（推荐）</h2><p>实现该接口的<code>setApplicationContext(ApplicationContext context)</code>方法，并保存<code>ApplicationContext</code>对象。<code>Spring</code>初始化时，扫描到该类，就会通过该方法将<code>ApplicationContext</code>对象注入。然后在代码中就可以获取<code>spring</code>容器<code>bean</code>了。<br>例如：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">bean</span> <span class="operator">=</span> SpringUtils.getBean(“user”);</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringUtils</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        SpringUtils.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(String beanName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(applicationContext.containsBean(beanName))&#123;</span><br><span class="line">            <span class="keyword">return</span> (T) applicationContext.getBean(beanName);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Map&lt;String, T&gt; <span class="title function_">getBeansOfType</span><span class="params">(Class&lt;T&gt; baseType)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBeansOfType(baseType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="继承自抽象类ApplicationObjectSupport"><a href="#继承自抽象类ApplicationObjectSupport" class="headerlink" title="继承自抽象类ApplicationObjectSupport"></a>继承自抽象类<code>ApplicationObjectSupport</code></h2><p>调用父类的<code>getApplicationContext()</code>方法，获取<code>Spring</code>容器对象。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringContextHelper</span> <span class="keyword">extends</span> <span class="title class_">ApplicationObjectSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String beanName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getApplicationContext().getBean(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="继承自抽象类WebApplicationObjectSupport"><a href="#继承自抽象类WebApplicationObjectSupport" class="headerlink" title="继承自抽象类WebApplicationObjectSupport"></a>继承自抽象类<code>WebApplicationObjectSupport</code></h2><p>调用<code>getWebApplicationContext()</code>获取<code>WebApplicationContext</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringContextHelper</span> <span class="keyword">extends</span> <span class="title class_">WebApplicationObjectSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String beanName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getApplicationContext().getBean(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="使用BeanFactory直接获取（不推荐）"><a href="#使用BeanFactory直接获取（不推荐）" class="headerlink" title="使用BeanFactory直接获取（不推荐）"></a>使用<code>BeanFactory</code>直接获取（不推荐）</h2><p>使用<code>BeanFactory</code>从工厂中直接获取Bean实例，但是<code>XmlBeanFactory</code>类已经废弃，因此不建议使用。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">BeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanFactory</span>(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;applicationContext.xml&quot;</span>));</span><br><span class="line">    Test test= (Test) beanFactory.getBean(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    System.out.println(test);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="使用ContextLoader提供的getCurrentWebApplicationContext方法"><a href="#使用ContextLoader提供的getCurrentWebApplicationContext方法" class="headerlink" title="使用ContextLoader提供的getCurrentWebApplicationContext方法"></a>使用<code>ContextLoader</code>提供的<code>getCurrentWebApplicationContext</code>方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">MockServletContext</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MockServletContext</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    sc.addInitParameter(ContextLoader.CONFIG_LOCATION_PARAM, <span class="string">&quot;/applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="type">ServletContextListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContextLoaderListener</span>();</span><br><span class="line">    <span class="type">ServletContextEvent</span> <span class="variable">event</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextEvent</span>(sc);</span><br><span class="line">    listener.contextInitialized(event);</span><br><span class="line">    </span><br><span class="line">    <span class="type">WebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span> ContextLoader.getCurrentWebApplicationContext();</span><br><span class="line">    Test test= (Test) wac.getBean(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    System.out.println(test);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实现接口BeanFactoryPostProcessor"><a href="#实现接口BeanFactoryPostProcessor" class="headerlink" title="实现接口BeanFactoryPostProcessor"></a>实现接口<code>BeanFactoryPostProcessor</code></h2><p>spring工具类 方便在非spring管理环境中获取bean<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">SpringUtilsS</span> <span class="keyword">implements</span> <span class="title class_">BeanFactoryPostProcessor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/** Spring应用上下文环境 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConfigurableListableBeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException</span><br><span class="line">    &#123;</span><br><span class="line">        SpringUtilsS.beanFactory = beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Object 一个以所给名字注册的bean的实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (T) beanFactory.getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取类型为requiredType的对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; clz)</span> <span class="keyword">throws</span> BeansException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> (T) beanFactory.getBean(clz);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果BeanFactory包含一个与所给名称匹配的bean定义，则返回true</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">containsBean</span><span class="params">(String name)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> beanFactory.containsBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断以给定名字注册的bean定义是一个singleton还是一个prototype。 如果与给定名字相应的bean定义没有被找到，将会抛出一个异常（NoSuchBeanDefinitionException）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchBeanDefinitionException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> beanFactory.isSingleton(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Class 注册对象的类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchBeanDefinitionException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; getType(String name) <span class="keyword">throws</span> NoSuchBeanDefinitionException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> beanFactory.getType(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果给定的bean名字在bean定义中有别名，则返回这些别名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchBeanDefinitionException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] getAliases(String name) <span class="keyword">throws</span> NoSuchBeanDefinitionException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> beanFactory.getAliases(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取aop代理对象</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> invoker</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getAopProxy</span><span class="params">(T invoker)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (T) AopContext.currentProxy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p><code>BeanFactory</code>和<code>ApplicationContext</code>是Spring的两大核心接口，都可以当做<code>Spring</code>的容器。其中<code>ApplicationContext</code>是<code>BeanFactory</code>的子接口。</p><h3 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h3><ul><li>是Spring里面最底层的接口（最原始的接口），包含了各种Bean的定义，读取bean配置文档，管理bean的加载、实例化，控制bean的生命周期，维护bean之间的依赖关系。</li><li>采用的是延迟加载形式来注入Bean的，即只有在使用到某个Bean时(调用getBean())，才对该Bean进行加载实例化。这样，我们就不能发现一些存在的Spring的配置问题。如果Bean的某一个属性没有注入，BeanFacotry加载后，直至第一次使用调用getBean方法才会抛出异常。</li><li>BeanFactory通常以编程的方式被创建。</li><li>BeanFactory和ApplicationContext都支持BeanPostProcessor、BeanFactoryPostProcessor的使用，但两者之间的区别是：BeanFactory需要手动注册，而ApplicationContext则是自动注册。</li><li><p>占用内存小。</p><h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3></li><li><p>ApplicationContext接口作为BeanFactory的派生，除了提供BeanFactory所具有的功能外，还提供了更完整的框架功能：</p><ul><li>继承MessageSource，因此支持国际化。</li><li>统一的资源文件访问方式。</li><li>提供在监听器中注册bean的事件。</li><li>同时加载多个配置文件。</li><li>载入多个（有继承关系）上下文 ，使得每一个上下文都专注于一个特定的层次，比如应用的web层。</li></ul></li><li>ApplicationContext，它是在容器启动时，一次性创建了所有的Bean。这样，在容器启动时，我们就可以发现Spring中存在的配置错误，这样有利于检查所依赖属性是否注入。ApplicationContext启动后预载入所有的单实例Bean，通过预载入单实例bean ，确保当你需要的时候，你就不用等待，因为它们已经创建好了。</li><li>ApplicationContext占用内存空间大，当程序的配置bean特别多时，程序启动慢。</li><li>ApplicationContext能以编程式方式创建，还能能以声明的方式创建，如使用ContextLoader。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>待学习</title>
      <link href="/posts/7682.html"/>
      <url>/posts/7682.html</url>
      
        <content type="html"><![CDATA[<ol><li>计算机网络：ipv6 部分</li><li>echarts 网课：前边布局，后面地图</li><li>ztree 的使用</li><li>jstree 的 demo</li><li><del>java 底层：2 进制，10 进制，移位，源码，补码，反码</del></li><li>前端关于滚动条的各个属性:clientHeight offsetHeight scrollHeight offsetTop scrollTop</li><li>redis 实战</li><li>js 高级</li><li>mysql 游标的使用</li><li><del>idea 工具的系统使用</del></li></ol>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> essays </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> essays </tag>
            
            <tag> 待学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远程请求http的三种方式</title>
      <link href="/posts/17762.html"/>
      <url>/posts/17762.html</url>
      
        <content type="html"><![CDATA[<p>1.ajax 远程调用，远程服务器必须开放跨域访问权限</p><p>2.form 表单远程调用，不受跨域限制，缺点是需要组装表单</p><p>3.java 代码远程调用（常用的有 java.net.HttpURLConnection，springboot 的 restTemplate)</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> essays </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> essays </tag>
            
            <tag> 远程请求http的三种方式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习路线</title>
      <link href="/posts/4225.html"/>
      <url>/posts/4225.html</url>
      
        <content type="html"><![CDATA[<p>jlpt <del>n5</del>-&gt;n4-&gt;n3-&gt;n2</p><p>java：<del>stream</del>,<del>lambda</del>，<del>IO 流</del>，注解，反射，<del>枚举</del>，网络编程，<del>websocket</del>,nio</p><p><del>mysql</del>,<del>redis</del></p><p><del>jvm（初级）</del>,jvm（中级和高级）,juc</p><p><del>spring</del>-&gt;springmvc-&gt;<del>springboot</del>-&gt;<del>springcloud</del></p><p><del>zookeeper</del>,<del>nginx</del>,<del>linux</del></p><p><del>kafka</del>,<del>rabbitmq</del></p><p>elasticsearch,minio</p><p>maven,<del>docker</del>,k8s</p><p>设计模式，<del>计算机网络</del>，<del>数据结构与算法</del>，计算机组成原理，操作系统，编译原理</p><p>项目:谷粒学院，谷粒商城，<del>尚融宝</del></p><p>grid 布局</p><hr><p><del>shiro</del>,<del>zookeeper</del>,<del>kafka</del><br>计算机网络，操作系统，计算机组成原理<br>maven,docker<br>jvm,juc,设计模式<br>算法，刷题，面经</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> essays </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> essays </tag>
            
            <tag> 学习路线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在maven库上添加手动添加第三方jar包</title>
      <link href="/posts/61509.html"/>
      <url>/posts/61509.html</url>
      
        <content type="html"><![CDATA[<p>进入到放这个 jar 包的文件夹，运行 cmd</p><p>然后根据下面的例子手动自己可以尝试着添加</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn install:install-file -Dfile=aspose-words-16.4.0-jdk16.jar -DgroupId=com.aspose.word  -DartifactId=aspose.words -Dversion=16.4.0-jdk16 -Dpackaging=jar -DgeneratePom=<span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aspose.word<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspose.words<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>16.4.0-jdk16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> maven </tag>
            
            <tag> 在maven库上添加手动添加第三方jar包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将普通项目托付给maven管理</title>
      <link href="/posts/21615.html"/>
      <url>/posts/21615.html</url>
      
        <content type="html"><![CDATA[<p>如需将一个 java 项目托付给 maven 管理。在项目的根目录下，建个 pom.xml 把以下内容复制进去。同时<strong>右键把该项目标记为 maven 项目</strong>(不同的 idea 版本该操作的名称可能不一样)</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组id--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--唯一标识id--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>parseStsSwing<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--版本号--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里面添加各种依赖,比如例子就是poi--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--这里面添加各种插件,例子是打所有的依赖与文件到一个jar包的插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> maven </tag>
            
            <tag> 将普通项目托付给maven管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目打成jar包时，将项目下的文件，以及所有的依赖打成一个jar包</title>
      <link href="/posts/22750.html"/>
      <url>/posts/22750.html</url>
      
        <content type="html"><![CDATA[<p>例子：在做一个单机的用 maven 管理的 swing 项目时，引入了 poi，但是打成的 jar 包里没有 poi 的依赖，导致用 exe4j 转换出的 exe 程序报错（Caused by: java.lang.NoClassDefFoundError）</p><p>这种错误就是没有将依赖打包进去导致的，所以最好打包成单个 jar 包。</p><p>解决办法：在 maven 里加入以下插件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在项目的根目录下执行(在执行以下任意操作前别忘了 clean。清除以前的 target 文件夹)<br><code>mvn assembly:assembly</code><br>或<br><code>install -Dmaven.test.skip=true</code><br>或<br>添加了新的插件后，右侧 maven 的 plugins 列表会多出个命令选项:<strong>assembly</strong>。鼠标左键双击该命令选项下的第一个命令<strong>assembly:assembly</strong>。<br>实际上和上面的是一样的。但是推荐这种方式（简单，方便，图形化操作，还能应用上 maven 在 idea 里面设置的 setting.xml 配置)<br><img src="https://s2.loli.net/2023/03/08/oyV9a8JkiRcqtbf.png" alt="202111051728272.png"><br>执行成功后会在 target 文件夹下除了普通的 jar 外还多出一个以-jar-with-dependencies 结尾的 JAR 包. 这个 JAR 包就包含了项目所依赖的所有 JAR 的 CLASS.</p><p>用这个包含所有 CLASS 的单独的 jar 包通过 exe4j 转出的 exe 文件就能成功执行</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> maven </tag>
            
            <tag> 项目打成jar包时，将项目下的文件，以及所有的依赖打成一个jar包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>any 和 all 关键字</title>
      <link href="/posts/52297.html"/>
      <url>/posts/52297.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">A <span class="operator">=</span> <span class="keyword">any</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>) 等价于 A <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">or</span> A <span class="operator">=</span> <span class="string">&#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line">A <span class="operator">=</span> <span class="keyword">all</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>) 等价于 A <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">and</span> A <span class="operator">=</span> <span class="string">&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure><p>总结 ：any 相当于用 or 链接后面括号里的子元素，all 相当于用 and 链接后面括号里面的子元素</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> any 和 all 关键字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目的jar包都正常引用了，但是build时就是提示jar包不存在的解决办法</title>
      <link href="/posts/52198.html"/>
      <url>/posts/52198.html</url>
      
        <content type="html"><![CDATA[<p>如题，编译和打包都是正常的，pom 文件中依赖存在并且没有报错。找到相应包的引用位置，也能正常访问包中的内容。而且提示的一般都是基础的 jar 包找不到，比如单元测试用到的 jar 包等。。。<br><img src="https://s2.loli.net/2023/03/08/Q8sCPEGZT572edH.png" alt="20210713083617.png"></p><p>情形一：</p><p>其他同事提交代码时把 idea 中的 .iml 文件也一起提交了，该文件中配置的 jdk lib 路径与自己电脑中的该路径不一致。</p><p>解决方法很简单，执行一下 maven update 即可，也可以手动修改 .iml 文件中的该路径。<br><img src="https://s2.loli.net/2023/03/08/qEjldxz42UmXg7B.png" alt="20210713083737.png"></p><p>情形二：</p><p>排除情形一出现的原因，或使用情形一中的方法解决无效时，可以使用以下命令更新不完整依赖：</p><p><code>mvn -U idea:idea</code></p><p>需要注意的是，该命令使用的插件早在 13 年就已经停止维护，所以有可能出现各种问题，比如我遇到过的空指针异常。</p><p>情形三：</p><p>使用情形二中的方法解决无效时，可以使用以下方法再次尝试</p><ol><li>ctrl + alt + shift + s 或 在界面菜单选择 File —&gt; Project Structure</li><li>点击 Libraries 找到提示不存在的 jar 包（这里以 junit 为例），选中，然后右键打开菜单，选择 Convert to Repository Library…</li><li><p>执行 maven update</p><p><img src="https://s2.loli.net/2023/03/08/QJuskcn2Cm9phUV.png" alt="20210713084001.png"></p><p>一般到此都能解决问题，如果还是解决不了，可能真的是人品问题，那就只能呵呵了。。</p><p><a href="https://www.jb51.net/article/189894.htm">原文连接</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> maven </tag>
            
            <tag> 项目的jar包都正常引用了，但是build时就是提示jar包不存在的解决办法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DATE_FORMAT()和STR_TO_DATE()</title>
      <link href="/posts/24292.html"/>
      <url>/posts/24292.html</url>
      
        <content type="html"><![CDATA[<p>常用的 DATE_FORMAA()格式</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DATE_FORMAT(updatetime,<span class="string">&#x27;%Y-%m-%d&#x27;</span>) <span class="comment">-- 把mysql的datetime格式化成2021-09-23的字符串格式</span></span><br><span class="line">DATE_FORMAT(updatetime,<span class="string">&#x27;%Y-%m-%d %H:%i:%S&#x27;</span>) <span class="comment">-- 把mysql的datetime格式化成2021-09-07 09:30:37的字符串格式</span></span><br></pre></td></tr></table></figure><p>常用的 STR_TO_DATE()格式</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">STR_TO_DATE(<span class="string">&#x27;2015-09-01 00:00:00&#x27;</span>,<span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>) <span class="comment">-- 把字符串转为datetimeg</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> DATE_FORMAT()和STR_TO_DATE() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql建立新用户和授权</title>
      <link href="/posts/42280.html"/>
      <url>/posts/42280.html</url>
      
        <content type="html"><![CDATA[<h1 id="需求：只允许某个用户访问某个库"><a href="#需求：只允许某个用户访问某个库" class="headerlink" title="需求：只允许某个用户访问某个库"></a>需求：只允许某个用户访问某个库</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 建立用户<span class="keyword">user</span>能在任何ip登录，并且密码是passwd</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;passwd&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 授权：授予<span class="keyword">user</span>用户能用密码passwd从任何ip登录并且有访问ctoms_test数据库任何资源的所有权限</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> ctoms_test.<span class="operator">*</span> <span class="keyword">to</span> <span class="keyword">user</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;passwd&#x27;</span>;  </span><br><span class="line"></span><br><span class="line"># 刷新权限</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line"># 查看自己刚刚建立的用户</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> CONCAT(<span class="string">&#x27;User: &#x27;&#x27;&#x27;</span>,<span class="keyword">user</span>,<span class="string">&#x27;&#x27;&#x27;@&#x27;&#x27;&#x27;</span>,host,<span class="string">&#x27;&#x27;&#x27;;&#x27;</span>) <span class="keyword">AS</span> query <span class="keyword">FROM</span> mysql.user;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> mysql建立新用户和授权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql常见的函数和问题的汇总</title>
      <link href="/posts/36898.html"/>
      <url>/posts/36898.html</url>
      
        <content type="html"><![CDATA[<ul><li>注意 mysql 里面关于字符串的截取下标一般都是从 1 开始</li><li>Substring(‘str’,a,b) 注意：a 是起始位置，b 是要截取得长度。且下标从 1 开始 ，如果 a 是 0，那么无论 b 是多少都返回一个空串</li><li><p>Round(num,a) num 如果为字符串，那么返回的也是数字。如果 num 为’a’或者’b’这种非数字类型的字符串，那么会把这种字符串当成数字 0 ，并且 a 是 0，那么就是 0 ，a 是 1，就是 0.0 。</p><p>注意：如果 num 是整数(round(2234,2))，那么无论 a 是多少，返回的都是整数(2234)，如果 num 是整数型的字符串(round(‘2234’,3))，那么返回的就是带 0 的小数(2234.000)。</p><p>注意：abs(25.0)=&gt;25.0 abs(‘25.0’) =&gt;25</p></li><li><p>INSTR（str,substr） / instr(源字符串, 目标字符串) 获取子串第一次出现的索引，如果没有找到，则返回 0（下标从 1 开始）</p></li><li>使用 union all 链接两个查询结果的时候，如果链接查询结果要有各自的顺序并且总结果要保留这种顺序，那么每个链接的子查询都必须两边加上（）并且在最后加上 limit a,b，为了保证都各个子查询查询出全部的结果，ab 的取值可以为 0,10000000000000<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 例子：上行升序，下行降序</span></span><br><span class="line"><span class="keyword">select</span> t.<span class="operator">*</span>,t.lc_str <span class="keyword">as</span> lcStr <span class="keyword">from</span> (</span><br><span class="line">(<span class="keyword">SELECT</span></span><br><span class="line">id,</span><br><span class="line">xb,</span><br><span class="line">lc,</span><br><span class="line">cxlx,</span><br><span class="line">remove_end_zero(round(fz,<span class="number">2</span>)) <span class="keyword">as</span> fz,</span><br><span class="line">remark,</span><br><span class="line">formatMile(lc,<span class="string">&#x27;m&#x27;</span>,<span class="number">0</span>) <span class="keyword">as</span> lc_str</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">cxdata_table</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">dcjh_id <span class="operator">=</span> #&#123;dcjhId&#125;</span><br><span class="line"><span class="keyword">and</span> xb <span class="operator">=</span> <span class="string">&#x27;上行&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> lc <span class="operator">+</span> <span class="number">0</span> <span class="operator">&gt;=</span> #&#123;startMileage&#125; <span class="operator">+</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">AND</span> lc <span class="operator">+</span> <span class="number">0</span> <span class="operator">&lt;</span> #&#123;endMileage&#125; <span class="operator">+</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">AND</span> flag <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> lc <span class="operator">+</span> <span class="number">0</span> <span class="keyword">asc</span></span><br><span class="line">LIMIT <span class="number">0</span>,<span class="number">10000000000000</span>)</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">(<span class="keyword">SELECT</span></span><br><span class="line">id,</span><br><span class="line">xb,</span><br><span class="line">lc,</span><br><span class="line">cxlx,</span><br><span class="line">remove_end_zero(round(fz,<span class="number">2</span>)) <span class="keyword">as</span> fz,</span><br><span class="line">remark,</span><br><span class="line">formatMile(lc,<span class="string">&#x27;m&#x27;</span>,<span class="number">0</span>) <span class="keyword">as</span> lc_str</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">cxdata_table</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">dcjh_id <span class="operator">=</span> #&#123;dcjhId&#125;</span><br><span class="line">  <span class="keyword">and</span> xb <span class="operator">=</span> <span class="string">&#x27;下行&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> lc <span class="operator">+</span> <span class="number">0</span> <span class="operator">&gt;=</span> #&#123;startMileage&#125; <span class="operator">+</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">AND</span> lc <span class="operator">+</span> <span class="number">0</span> <span class="operator">&lt;</span> #&#123;endMileage&#125; <span class="operator">+</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">AND</span> flag <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> lc <span class="operator">+</span> <span class="number">0</span> <span class="keyword">desc</span></span><br><span class="line">LIMIT <span class="number">0</span>,<span class="number">10000000000000</span>)</span><br><span class="line">) t</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> mysql常见的函数和问题的汇总 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql dump导入sql脚本后表中的数据中文乱码</title>
      <link href="/posts/18721.html"/>
      <url>/posts/18721.html</url>
      
        <content type="html"><![CDATA[<p>解决办法：<br>加上—default-character-set=utf8 参数即可</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> mysql dump导入sql脚本后表中的数据中文乱码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql的安装</title>
      <link href="/posts/43688.html"/>
      <url>/posts/43688.html</url>
      
        <content type="html"><![CDATA[<h2 id="mysql8"><a href="#mysql8" class="headerlink" title="mysql8"></a>mysql8</h2><ol><li><p>查看是否有安装过 mysql</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep -i mysql</span><br></pre></td></tr></table></figure><p>使用rpm -e命令将上个命令中包列表全部删除</p><p>然后删除相关服务</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chkconfig --list | grep -i mysql</span><br><span class="line">chkconfig --del mysql</span><br></pre></td></tr></table></figure></li><li><p>删除 mysql</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y remove MySQL-*</span><br><span class="line">yum -y remove MySQL</span><br><span class="line">yum remove mysql mysql-server mysql-libs compat-mysql51</span><br></pre></td></tr></table></figure><p>一般用 rpm -e 的命令删除 mysql,这样表面上删除了 mysql,可是 mysql 的一些残余程序仍然存在,并且通过第一步的方式也查找不到残余,而 yum 命令比较强大,可以完全删除 mysql.(ps:用 rpm 删除后再次安装的时候会提示已经安装了,这就是 rpm 没删除干净的原因)</p></li><li><p>把所有出现的目录统统删除</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find / -name mysql</span><br></pre></td></tr></table></figure><p>查找 mysql 的一些目录，把所有出现的目录删除，可以使用 rm -rf 路径，删除时请注意，一旦删除无法恢复。</p></li><li><p>删除配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /etc/my.cnf</span><br><span class="line">rm -rf /var/lib/mysql</span><br></pre></td></tr></table></figure></li><li><p>删除 mysql 的默认密码</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /root/.mysql_sercret</span><br></pre></td></tr></table></figure><p>删除 mysql 的默认密码,如果不删除,以后安装 mysql 这个 sercret 中的默认密码不会变,使用其中的默认密码就可能会报类似 Access denied for user ‘root@localhost’ (using password:yes)的错误.</p></li></ol><hr><p>五步完成之后，这样 mysql 就全部删除干净了，若没安装过 mysql 可忽略以上步骤</p><ol><li><p>配置 Mysql 8.0 安装源</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rpm -Uvh https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure></li><li><p>安装 Mysql 8.0</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum --enablerepo=mysql80-community install mysql-community-server</span><br></pre></td></tr></table></figure><p>提示下载插件选择：y</p><p>看到 complet(完毕)就是安装完啦</p></li><li><p>启动 mysql 服务</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service mysqld start</span><br></pre></td></tr></table></figure><p>显示如下：</p><p>启动完成</p></li><li><p>查看 mysql 服务运行状态</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service mysqld status</span><br></pre></td></tr></table></figure></li><li><p>查看 root 临时密码</p><p>安装完 mysql 之后，使用下列命令生成一个临时的密码让 root 用户登录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep &quot;A temporary password&quot; /var/log/mysqld.log</span><br></pre></td></tr></table></figure></li><li><p>更改临时密码</p><p>输入：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p>在 Enter password：后面输入临时密码<br>登录成功<br>输入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456Aa?&#x27;</span>;</span><br></pre></td></tr></table></figure><p>会提示：ERROR 1819 (HY000): Your password does not satisfy the current policy requirements(密码不符合当前策略)</p><ul><li>方案 1: 设置符合策略的密码(大小写字母+数据+符号，8 位)</li><li>方案 2:密码策略改简单一点</li></ul><p>方案 2 设置方式</p><p>先看看当前的密码验证策略<br>输入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;validate_password.%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>策略说明</p><ul><li><p>validate_password.length 是密码的最小长度，默认是 8，我们把它改成 6<br>输入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.length<span class="operator">=</span><span class="number">6</span>;</span><br></pre></td></tr></table></figure></li><li><p>validate_password.policy 验证密码的复杂程度，我们把它改成 0<br>输入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.policy<span class="operator">=</span><span class="number">0</span>;</span><br></pre></td></tr></table></figure></li><li><p>validate_password.check_user_name 用户名检查，用户名和密码不能相同，我们也把它关掉</p><p>输入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.check_user_name<span class="operator">=</span>off;</span><br></pre></td></tr></table></figure></li><li><p>再执行修改密码的命令</p><p>输入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> ‘root’@‘localhost’ IDENTIFIED <span class="keyword">BY</span> ‘<span class="number">12345</span>’;</span><br></pre></td></tr></table></figure><p>密码设成功<br>用 mysql 客户连接报不允许连接的错误，那是因为没开通远程访问的权限</p></li></ul></li><li><p>配置远程访问</p><p>输入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>报错：</p><p>mysql&gt; GRANT ALL ON . TO ‘root’@’%’;<br>ERROR 1410 (42000): You are not allowed to create a user with GRANT</p><p>看下默认 MySQL 用户：<br>输入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></figure><p>输入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> host, <span class="keyword">user</span>, authentication_string, plugin <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p>发现 root 的 host 是 localhost，不是%，可以加个 host 是%的 root 账号：<br>输入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> ‘root’@’<span class="operator">%</span>’ IDENTIFIED <span class="keyword">BY</span> ‘<span class="number">123456</span>Aa?’;</span><br></pre></td></tr></table></figure><p>再查下用户</p><p>输入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> host, <span class="keyword">user</span>, authentication_string, plugin <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p>可以看到已经新增了 host 为%的 root 用户</p><p>输入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>配置成功</p></li></ol><hr><p><strong>如果客户端连接 mysql 报错，并且其他配置都正常的情况下</strong></p><p>原因可能是 mysql8 的加密方式规则不一样，是 caching_sha2_password</p><p>需要加密方式改成 mysql_native_password 就行了</p><p>语法:</p><p>ALTER USER ‘[用户名]’@’%’ IDENTIFIED WITH mysql_native_password BY ‘[密码]’;</p><p>输入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> ‘root’@’<span class="operator">%</span>’ IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> ‘<span class="number">123456</span>Aa?’;</span><br></pre></td></tr></table></figure><p>加密方式以及改成了 mysql_native_password</p><hr><h2 id="mysql5-7"><a href="#mysql5-7" class="headerlink" title="mysql5.7"></a>mysql5.7</h2><ol><li>下载并安装mysql的repo源，例如： <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://repo.mysql.com/mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line"></span><br><span class="line">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure> 如果没有安装wget需要安装一下 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install wget】</span><br></pre></td></tr></table></figure></li><li><p>安装</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure><p> 安装mysql-community-server时提示公钥尚未安装</p><p> 方法一，运行这个命令：</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br></pre></td></tr></table></figure><p> 方法二，修改文件：<code>/etc/yum.repos.d/mysql-community.repo</code>，修改对应安装版本的gpgcheck=0即可</p></li><li><p>启动服务</p><p> 启动mysql服务：<code>systemctl start mysqld.service</code></p><p> 查看是否启动mysql服务：<code>systemctl status mysqld.service</code></p></li><li><p>修改密码<br> 查看mysql初始密码：</p> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">grep &quot;password&quot; <span class="operator">/</span>var<span class="operator">/</span>log<span class="operator">/</span>mysqld.log</span><br></pre></td></tr></table></figure><p> 进入mysql：</p> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br></pre></td></tr></table></figure><p> 修改密码：</p> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="keyword">user</span>() identified <span class="keyword">by</span> &quot;你的密码&quot; # <span class="keyword">user</span>()为当前登录人，所以该命令是修改当前登录人的密码，也可以把<span class="keyword">user</span>()替换为某个具体的用户名</span><br></pre></td></tr></table></figure><p> 如果提示密码强度过低</p> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_policy<span class="operator">=</span><span class="number">0</span>;  # 密码强度设为最低等级</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_length<span class="operator">=</span><span class="number">4</span>;  # 密码允许最小长度为<span class="number">4</span>，也可以是<span class="number">1</span></span><br><span class="line"></span><br><span class="line">flush privileges;  # 更新授权表，生效</span><br></pre></td></tr></table></figure></li><li><p>配置远程访问权限</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;yourusername&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;yourpassword&#x27; WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p> 如果提示密码强度过低，执行上面的修改密码强度策略的命令</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> mysql的安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql在导入.sql文件的时候报错  1067 - Invalid default value for LOCK_TIME</title>
      <link href="/posts/60814.html"/>
      <url>/posts/60814.html</url>
      
        <content type="html"><![CDATA[<p>推荐使用以下的方式永久修改</p><p>编辑 mysql 的配配置文件 my.cnf</p><p>在[mysqld]下面添加如下列：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">sql_mode</span>=<span class="string">ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> TIME_‘ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主从复制的搭建</title>
      <link href="/posts/46953.html"/>
      <url>/posts/46953.html</url>
      
        <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title="#"></a>#</h3><ol><li><p>做主从的前提</p><ul><li>两台服务器的防火墙都开放了各自 mysql 的服务端口（下面以默认的 3306 为例子）</li><li>从库无法同步主库之前的数据。如果主库之前有数据，那么先把主库的数据导入到从库中。保证两台服务器在做主从复制之前的数据一致性</li><li>尽量保证两台服务器的 my.cnf 文件只有 server-id 不同。其他的配置都相同</li></ul></li><li><p>修改主服务器的配置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用主从配置(主服务器)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主服务器<span class="built_in">id</span></span></span><br><span class="line">server-id=1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">二进制日志</span></span><br><span class="line">log-bin=mysqlbin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置忽略复制的数据库</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">binlog-ignore-db=mysql</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置需要复制的数据库</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">binlog-do-db=dtjc</span></span><br></pre></td></tr></table></figure></li><li><p>重启 mysql 服务器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure><p>mysqld 无效的话把 mysqld 换成 mysql</p></li><li><p>运行</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> master status;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+----------+--------------+------------------+------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> File            <span class="operator">|</span> Position <span class="operator">|</span> Binlog_Do_DB <span class="operator">|</span> Binlog_Ignore_DB <span class="operator">|</span> Executed_Gtid_Set                        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+----------+--------------+------------------+------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> mysqlbin<span class="number">.000003</span> <span class="operator">|</span>      <span class="number">883</span> <span class="operator">|</span>              <span class="operator">|</span>                  <span class="operator">|</span> e730104b<span class="number">-113</span>f<span class="number">-11</span>eb<span class="number">-9739</span><span class="number">-000</span>c2972b171:<span class="number">1</span><span class="number">-7</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+----------+--------------+------------------+------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>后续需要使用<strong>file</strong>和<strong>position</strong>这两个字段</p></li><li><p>为从服务器生成专门的账号用来做主从复制,同时赋予做从服务器的权限</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;repl&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456Aa?&#x27;</span>;</span><br><span class="line"><span class="keyword">grant</span> replication slave,replication client <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;repl&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li><li><p>修改从服务器的配置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用主从配置(主服务器)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从服务器<span class="built_in">id</span></span></span><br><span class="line">server-id=2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">二进制日志</span></span><br><span class="line">log-bin=mysqlbin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置忽略复制的数据库</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">binlog-ignore-db=mysql</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置需要复制的数据库</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">binlog-do-db=dtjc</span></span><br></pre></td></tr></table></figure></li><li><p>重启 mysql 服务</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure><p>mysqld 无效的话把 mysqld 换成 mysql</p></li><li><p>slave 节点测试 repl 用户远程连接 mater 节点</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>h192<span class="number">.168</span><span class="number">.220</span><span class="number">.10</span> <span class="operator">-</span>P3306 <span class="operator">-</span>urepl <span class="operator">-</span>p123456Aa?</span><br></pre></td></tr></table></figure><p>链接成功，即可进行下一步，否则要排错</p></li><li><p>退出 master 节点的登陆，登陆本机的 mysql,运行以下命令</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">change master <span class="keyword">to</span> master_host<span class="operator">=</span><span class="string">&#x27;192.168.220.10&#x27;</span>,master_port<span class="operator">=</span><span class="number">3306</span>,master_user<span class="operator">=</span><span class="string">&#x27;repl&#x27;</span>,master_password<span class="operator">=</span><span class="string">&#x27;12345Aa?&#x27;</span>,master_log_file<span class="operator">=</span><span class="string">&#x27;mysqlbin.000003&#x27;</span>,master_log_pos<span class="operator">=</span><span class="number">883</span>;</span><br></pre></td></tr></table></figure><p><strong>master_log_file 就是主服务器的 file 字段，883 就是主服务器的 position 字段</strong></p></li><li><p>如果第 8 步的 mysql 没有报错的话，查看 slave 状态</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> slave status\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> source <span class="keyword">to</span> send event</span><br><span class="line">                  Master_Host: <span class="number">192.168</span><span class="number">.220</span><span class="number">.10</span></span><br><span class="line">                  Master_User: repl</span><br><span class="line">                  Master_Port: <span class="number">3306</span></span><br><span class="line">                Connect_Retry: <span class="number">60</span></span><br><span class="line">              Master_Log_File: mysqlbin<span class="number">.000003</span></span><br><span class="line">          Read_Master_Log_Pos: <span class="number">196</span></span><br><span class="line">               Relay_Log_File: localhost<span class="operator">-</span>relay<span class="operator">-</span>bin<span class="number">.000002</span></span><br><span class="line">                Relay_Log_Pos: <span class="number">323</span></span><br><span class="line">        Relay_Master_Log_File: mysqlbin<span class="number">.000003</span></span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: <span class="number">0</span></span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: <span class="number">0</span></span><br><span class="line">          Exec_Master_Log_Pos: <span class="number">196</span></span><br><span class="line">              Relay_Log_Space: <span class="number">536</span></span><br><span class="line">              Until_Condition: <span class="keyword">None</span></span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: <span class="number">0</span></span><br><span class="line">           Master_SSL_Allowed: <span class="keyword">No</span></span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: <span class="number">0</span></span><br><span class="line">Master_SSL_Verify_Server_Cert: <span class="keyword">No</span></span><br><span class="line">                Last_IO_Errno: <span class="number">0</span></span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: <span class="number">0</span></span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: <span class="number">1</span></span><br><span class="line">                  Master_UUID: e730104b<span class="number">-113</span>f<span class="number">-11</span>eb<span class="number">-9739</span><span class="number">-000</span>c2972b171</span><br><span class="line">             Master_Info_File: mysql.slave_master_info</span><br><span class="line">                    SQL_Delay: <span class="number">0</span></span><br><span class="line">          SQL_Remaining_Delay: <span class="keyword">NULL</span></span><br><span class="line">      Slave_SQL_Running_State: Replica has read <span class="keyword">all</span> relay log; waiting <span class="keyword">for</span> more updates</span><br><span class="line">           Master_Retry_Count: <span class="number">86400</span></span><br><span class="line">                  Master_Bind:</span><br><span class="line">      Last_IO_Error_Timestamp:</span><br><span class="line">     Last_SQL_Error_Timestamp:</span><br><span class="line">               Master_SSL_Crl:</span><br><span class="line">           Master_SSL_Crlpath:</span><br><span class="line">           Retrieved_Gtid_Set:</span><br><span class="line">            Executed_Gtid_Set: e730104b<span class="number">-113</span>f<span class="number">-11</span>eb<span class="number">-9739</span><span class="number">-000</span>c2972b171:<span class="number">1</span><span class="number">-3</span></span><br><span class="line">                Auto_Position: <span class="number">0</span></span><br><span class="line">         Replicate_Rewrite_DB:</span><br><span class="line">                 Channel_Name:</span><br><span class="line">           Master_TLS_Version:</span><br><span class="line">       Master_public_key_path:</span><br><span class="line">        Get_master_public_key: <span class="number">0</span></span><br><span class="line">            Network_Namespace:</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>如果</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> Slave_IO_Running: Yes</span><br><span class="line">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><p>那么主从配置就搭建好了</p><p>如果 Slave_IO_Running 或者 Slave_SQL_Running 有任意一个不是 Yes 的话，搭建失败</p><p>运行以下命令,停止主从。然后从最开始一步步排错</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">stop slave;</span><br><span class="line">reset slave <span class="keyword">all</span>;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> 主从复制的搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql建表的几个必备字段</title>
      <link href="/posts/62575.html"/>
      <url>/posts/62575.html</url>
      
        <content type="html"><![CDATA[<ul><li>id(主键)</li><li>码表（在基础字典表中该字段是必须的)</li><li>排序（在基础字典表中该字段是必须的)</li><li>创建人</li><li>创建时间</li><li>修改时间</li><li>逻辑删除字段</li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> mysql建表的几个必备字段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>time和update_time的策略</title>
      <link href="/posts/17208.html"/>
      <url>/posts/17208.html</url>
      
        <content type="html"><![CDATA[<p>二者默认值都设置为 CURRENT_TIMESTAMP(DEFAULT CURRENT_TIMESTAMP)，保证插入时记录时间</p><p>update_time 勾选上根据当前时间戳更新(ON UPDATE CURRENT_TIMESTAMP)，保证更新时记录时间</p><p>参考 sql</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `mytest` (</span><br><span class="line">    `text` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">    `create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `update_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>注意：采用数据库层面的策略不支持切换数据库，如果想要开发的应用兼容各种类型的数据库，那么就不能设置数据库层面的策略。而是应该使用应用层的各种 orm 框架自动填充策略</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> time和update_time的策略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开放远程连接</title>
      <link href="/posts/32472.html"/>
      <url>/posts/32472.html</url>
      
        <content type="html"><![CDATA[<h2 id="5-7"><a href="#5-7" class="headerlink" title="5.7"></a>5.7</h2><p>先连接到本地数据库</p><p>切换到 mysql 数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use mysql</span><br></pre></td></tr></table></figure><p>使用以下命令可以更改远程连接的设置</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;root&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br></pre></td></tr></table></figure><p>刷新权限</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>查询 user 表看看是否生效，如果 ‘%’ ‘root’ 在第一行证明生效了</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> host,<span class="keyword">user</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/08/mBoDgsRbSeFq8dX.png" alt="20210720111410.png"></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> 开放远程连接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>索引</title>
      <link href="/posts/11557.html"/>
      <url>/posts/11557.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>什么情况下要用索引</p><ul><li>主键自带主键索引</li><li>唯一约束自带唯一索引</li><li>外键自带外键索引</li><li>查询条件用到的字段需要</li><li>排序用的的字段</li><li>分组用到的字段</li></ul></li><li><p>什么情况下不能用索引</p><ul><li>数据量较少时不用建索引。</li><li>频繁更新字段不能建索引</li><li>索引的选择性（字段的值尽量复杂且尽量分布不平均)</li><li>where 条件查询用不到的字段不用建索引</li></ul></li></ul><hr><h2 id="mysql-优化索引十诫（附口诀"><a href="#mysql-优化索引十诫（附口诀" class="headerlink" title="mysql 优化索引十诫（附口诀)"></a>mysql 优化索引十诫（附口诀)</h2><ul><li>全值匹配我最爱</li><li>最佳左前缀法则(如果索引引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始并且不跳过索引中的列)</li><li>不在索引列上做任何操作（计算，函数，（自动 or 手动)类型转换），会导致索引失效而转向全表扫描</li><li>存储引擎不能使用索引中范围条件右边的列</li><li>尽量使用覆盖索引（只访问索引的查询（索引列和查询列一致)),减少 select *</li><li>mysql 在使用!=或者&lt;&gt;时候无法使用索引而转向全表扫描</li><li>is null,is not null 也无法使用索引</li><li>like 以通配符开头(‘%abc’)mysql 索引失效会变成全表扫描的操作。解决办法：使用覆盖索引</li><li>字符串不加单引号导致索引失效</li><li>少用 or,用 or 连接时会索引失效</li></ul><p><strong>口诀</strong></p><p><strong>全职匹配我最爱，最左前缀要遵守；<br>带头大哥不能死，中间兄弟不能断；<br>索引列上少计算，范围之后全失效；<br>LIKE 百分写最右，覆盖索引不写*；<br>不等空值还有 OR，索引影响要注意；<br>VAR 引号不可丢，SQL 优化有诀窍。</strong></p><hr><h2 id="排序使用索引"><a href="#排序使用索引" class="headerlink" title="排序使用索引"></a>排序使用索引</h2><p><img src="https://s2.loli.net/2023/03/08/XNbQtFDHwzZEghV.png" alt="20210810170647.png"></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区间查询</title>
      <link href="/posts/59900.html"/>
      <url>/posts/59900.html</url>
      
        <content type="html"><![CDATA[<h2 id="取交集的区间查询"><a href="#取交集的区间查询" class="headerlink" title="取交集的区间查询"></a>取交集的区间查询</h2><p>两个区间段只要有交集就查出来</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;(startTime != &quot;&quot; and startTime != null) and (endTime == null or endTime == &quot;&quot;)&#x27;</span>&gt;</span></span><br><span class="line">    AND csrw.endtime &gt;= #&#123;startTime&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;(startTime == &quot;&quot; or startTime == null) and (endTime != null and endTime != &quot;&quot;)&#x27;</span>&gt;</span></span><br><span class="line">    AND csrw.createtime &lt;= #&#123;endTime&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;(startTime != &quot;&quot; and startTime != null) and (endTime != null and endTime != &quot;&quot;)&#x27;</span>&gt;</span></span><br><span class="line">    AND !(csrw.endtime &lt; #&#123;startTime&#125; OR csrw.endtime &gt; #&#123;startTime&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> 区间查询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比较date或者datetime</title>
      <link href="/posts/44371.html"/>
      <url>/posts/44371.html</url>
      
        <content type="html"><![CDATA[<p>单个的比较可以直接使用&gt; &lt; 或者= 来比较，但是当两个值的组合与另两个值的组合进行比较的时候，可以使用<strong>UNIX_TIMESTAMP()</strong>函数</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">dtjc_jh_jdjh</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">xm_id <span class="operator">=</span> #&#123;xmId&#125;</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">(UNIX_TIMESTAMP( start_time ) <span class="operator">+</span> UNIX_TIMESTAMP( end_time ))<span class="operator">/</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>如上就是根据<strong>起始时间和终止时间的中间值</strong>进行比较。其中 start_time 和 end_time 都是 datetime 类型</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> 比较date或者datetime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>锁</title>
      <link href="/posts/21631.html"/>
      <url>/posts/21631.html</url>
      
        <content type="html"><![CDATA[<h2 id="myisam-的读写锁-表锁"><a href="#myisam-的读写锁-表锁" class="headerlink" title="myisam 的读写锁(表锁)"></a>myisam 的读写锁(表锁)</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">lock <span class="keyword">table</span> emp read;</span><br><span class="line">lock <span class="keyword">table</span> emp write;</span><br></pre></td></tr></table></figure><p>myisam 是写锁调度优于读锁调度,所以 mysiam 要偏读（因为写会阻塞其他线程对当前表的任何操作)</p><p>myisam 执行 select 时会给所有涉及的表增加读锁。执行增删改时会给所有涉及到的表增加写锁</p><p>表读锁，当前 session 只能读当前表，对其他表任何操作都做不了，其他 session 能做任何操作，只是对有读锁的表的增删改会阻塞</p><p>表写锁，当前 session 只能对当前表做增删改查，对其他表任何操作都做不了，其他 session 对有写锁的表的任何操作都会堵塞，但是对其他的表可以做任何操作</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">open</span> tables; <span class="comment">--查看哪些表被锁了</span></span><br><span class="line"><span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;table%&#x27;</span>; <span class="comment">--分析表的锁定状况</span></span><br></pre></td></tr></table></figure><hr><h2 id="innodb-的读写锁-行锁"><a href="#innodb-的读写锁-行锁" class="headerlink" title="innodb 的读写锁(行锁)"></a>innodb 的读写锁(行锁)</h2><p>session1 更新某一行时,且未提交。session2 读到的是旧数据。直到 ession1 提交。session2 才能读到新数据</p><p>session1 更新某一行时,且未提交。当 session2 同时也更新这一行时，阻塞。直到 ession1 提交。session2 才能更新完成。注意：session2 更新其他行的数据不受影响</p><p><strong>注意</strong></p><p>innode 引擎默认是行锁。但是出现以下情况的时候，行锁还是会变成表锁</p><p>即：更新时 where 后面的条件没有使用上索引。包括字段上本身没有索引或者有索引但是 sql 写的不严谨导致索引失效，此时即使是 innodb 引擎它在更新的时候还是会锁住整张表</p><p>行锁的状态查看命令</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;innodb_row_lock%&#x27;</span></span><br><span class="line"><span class="comment">--出现的参数依次往下分别是:</span></span><br><span class="line"><span class="comment">--当前正在等待的锁的数量</span></span><br><span class="line"><span class="comment">--从服务器启动到现在等待锁的总的时间长度</span></span><br><span class="line"><span class="comment">--每次等待所花的平均时间</span></span><br><span class="line"><span class="comment">--等待的最长的一次时间</span></span><br><span class="line"><span class="comment">--服务启动到现在总共等待锁的次数</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查询时别名</title>
      <link href="/posts/46997.html"/>
      <url>/posts/46997.html</url>
      
        <content type="html"><![CDATA[<p>在 mysql 中</p><ol><li>group by ,having ,order by 支持字段的别名。<br>group by ,order by 后使用别名<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">case</span></span><br><span class="line">        <span class="keyword">when</span> t.author_level <span class="keyword">in</span>(<span class="number">1</span>,<span class="number">2</span>) <span class="keyword">then</span> <span class="string">&#x27;1-2级&#x27;</span></span><br><span class="line">        <span class="keyword">when</span> t.author_level <span class="keyword">in</span>(<span class="number">3</span>,<span class="number">4</span>) <span class="keyword">then</span> <span class="string">&#x27;3-4级&#x27;</span></span><br><span class="line">        <span class="keyword">when</span> t.author_level <span class="keyword">in</span>(<span class="number">5</span>,<span class="number">6</span>) <span class="keyword">then</span> <span class="string">&#x27;5-6级&#x27;</span></span><br><span class="line">        <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">as</span> level_cnt,</span><br><span class="line">    <span class="built_in">count</span>(s.issue_id) <span class="keyword">as</span> num</span><br><span class="line"><span class="keyword">from</span> author_tb t <span class="keyword">join</span> answer_tb s <span class="keyword">on</span> t.author_id <span class="operator">=</span> s.author_id</span><br><span class="line"><span class="keyword">where</span> s.char_len <span class="operator">&gt;=</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> level_cnt</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> num <span class="keyword">desc</span></span><br></pre></td></tr></table></figure></li><li>where 后面不支持字段的别名。</li><li><p>如果关联查询的时候给表起了别名。那么 where 后面如果用’表名.字段名’的话这个表名要用表的别名</p></li><li><p>case 关键字后面可以接表的别名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">case</span>  record.xingbie</span><br><span class="line">    <span class="keyword">when</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;上行&#x27;</span></span><br><span class="line">    <span class="keyword">when</span> <span class="number">2</span> <span class="keyword">then</span> <span class="string">&#x27;下行&#x27;</span></span><br><span class="line">    <span class="keyword">when</span> <span class="number">3</span> <span class="keyword">then</span> <span class="string">&#x27;出段&#x27;</span></span><br><span class="line">    <span class="keyword">when</span> <span class="number">4</span> <span class="keyword">then</span> <span class="string">&#x27;入段&#x27;</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">as</span> xingbieName</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    t_sjfx_mh_jcjl record</span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span> sys_dict_single lineDict <span class="keyword">on</span> lineDict.value <span class="operator">=</span> record.xianbie</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> 查询时别名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>and() 和 or()的嵌套使用</title>
      <link href="/posts/4758.html"/>
      <url>/posts/4758.html</url>
      
        <content type="html"><![CDATA[<p>and 里面嵌套 or 如下使用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">QueryWrapper&lt;ErrorData&gt; ew = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">ew.eq(<span class="string">&quot;dcjh_id&quot;</span>, csrwInfo.getCsrwID()).and(wrapper -&gt; wrapper.eq(<span class="string">&quot;wtlx&quot;</span>, <span class="string">&quot;0&quot;</span>).or().eq(<span class="string">&quot;wtlx&quot;</span>, <span class="string">&quot;1&quot;</span>));<span class="comment">// where dcjh_id = &#x27;&#x27; and (wtlx = &#x27;0&#x27; or wtlx = &#x27;1&#x27;),注意：这里是一个lambda表达式</span></span><br><span class="line">List&lt;ErrorData&gt; dataList = errorDataService.list(ew);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mybatisPlus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mybatisPlus </tag>
            
            <tag> and() 和 or()的嵌套使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用QueryWrapper关于时间日期比较的问题</title>
      <link href="/posts/63472.html"/>
      <url>/posts/63472.html</url>
      
        <content type="html"><![CDATA[<p>首先明确。springmvc 默认不支持将前台传过来的日期/日期时间字符串在到达 controller 层之前直接转成 Date/LocalDate/LocalDateTime 类型的，所以接收还是要用字符串类型接收</p><p>mp 的条件构造器不支持时间日期字符串与 mysql 的 date/datetime 类型的字段的比较</p><p>所以在比较的时候。要这么写</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//query:startDate-&gt;String,endDate-&gt;String，例子：2020-08-01</span></span><br><span class="line"><span class="comment">//jcrq:mysql-&gt;date类型的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 应该同样适用2020-08-01 08:00:00的字符串和mysql中datetime类型的比较</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以这么理解。统一转成时间戳再进行比较</span></span><br><span class="line"></span><br><span class="line">QueryWrapper&lt;TSjfxJcjl&gt; qw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">qw</span><br><span class="line"> .apply(!StringUtils.isEmpty(query.getStartDate()),</span><br><span class="line">         <span class="string">&quot;UNIX_TIMESTAMP(jcrq) &gt;= UNIX_TIMESTAMP(&#x27;&quot;</span> + query.getStartDate() + <span class="string">&quot;&#x27;)&quot;</span>)</span><br><span class="line">  .apply(!StringUtils.isEmpty(query.getEndDate()),</span><br><span class="line">         <span class="string">&quot;UNIX_TIMESTAMP(jcrq) &lt;= UNIX_TIMESTAMP(&#x27;&quot;</span> + query.getEndDate() + <span class="string">&quot;&#x27;)&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mybatisPlus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mybatisPlus </tag>
            
            <tag> 使用QueryWrapper关于时间日期比较的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis中$和#的使用场景</title>
      <link href="/posts/27592.html"/>
      <url>/posts/27592.html</url>
      
        <content type="html"><![CDATA[<ul><li>group by 字段 ,order by 字段，表名，字段名，如果是动态的用$</li><li>limit 用#</li><li>其他的用#</li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mybatis </tag>
            
            <tag> mybatis中$和#的使用场景 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自带的分页插件的使用</title>
      <link href="/posts/13229.html"/>
      <url>/posts/13229.html</url>
      
        <content type="html"><![CDATA[<p>建一个 page 对象传入前台的 page,和 limit 参数（推荐使用泛型,限定返回的参数类型，例子的话应该是 Page\<Map\>）</p><p>调用 dao 或者 service 层时传入 page 对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Page</span> <span class="variable">pages</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(Integer.valueOf(page), Integer.valueOf(limit));</span><br><span class="line">List&lt;Map&gt; list = dtjcXmGeneralreportService.getCxList(pages, csrwId,xlId,xb,ppbzId,Integer.valueOf(topSpeed));</span><br></pre></td></tr></table></figure><p>service 接口层</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Map&gt; <span class="title function_">getCxList</span><span class="params">(Page pages, String csrwId, String xlId, String xb,String bz,Integer topSpeed)</span>;</span><br></pre></td></tr></table></figure><p>service 层</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> List&lt;Map&gt; <span class="title function_">getCxList</span><span class="params">(Page pages, String csrwId, String xlId, String xb,String bz,Integer topSpeed)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> dtjcXmGeneralreportMapper.getCxList(pages, csrwId,xlId,xb,bz,topSpeed);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>dao 层</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Map&gt; <span class="title function_">getCxList</span><span class="params">(<span class="meta">@Param(&quot;pages&quot;)</span> Page pages,<span class="meta">@Param(&quot;csrwId&quot;)</span> String csrwId,<span class="meta">@Param(&quot;xlId&quot;)</span> String xlId,<span class="meta">@Param(&quot;xb&quot;)</span> String xb,<span class="meta">@Param(&quot;bz&quot;)</span> String bz,<span class="meta">@Param(&quot;topSpeed&quot;)</span> Integer topSpeed)</span>;</span><br></pre></td></tr></table></figure><p>同时写 sql 的时候不需要专门使用 page,只需要正常的写 sql，使用参数筛选即可</p><p>回到 controller 里</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.put(<span class="string">&quot;count&quot;</span>, pages.getTotal());</span><br><span class="line">map.put(<span class="string">&quot;data&quot;</span>, list);</span><br></pre></td></tr></table></figure><p>至此是城轨项目的使用 page 方法</p><hr><p>以下是 mybatis-plus 官方的使用参考</p><p><a href="https://baomidou.com/guide/page.html">原文链接</a></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring xml 方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;plugins&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlParser&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;自定义解析类、可以没有&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dialectClazz&quot;</span> <span class="attr">value</span>=<span class="string">&quot;自定义方言类、可以没有&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- COUNT SQL 解析.可以没有 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;countSqlParser&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;countSqlParser&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;countSqlParser&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.plugins.pagination.optimize.JsqlParserCountOptimize&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置为 true 可以优化部分 left join 的sql --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;optimizeJoin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Spring boot方式</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.baomidou.cloud.service.*.mapper*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 旧版</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PaginationInterceptor <span class="title function_">paginationInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">PaginationInterceptor</span> <span class="variable">paginationInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaginationInterceptor</span>();</span><br><span class="line">        <span class="comment">// 设置请求的页面大于最大页后操作， true调回到首页，false 继续请求  默认false</span></span><br><span class="line">        <span class="comment">// paginationInterceptor.setOverflow(false);</span></span><br><span class="line">        <span class="comment">// 设置最大单页限制数量，默认 500 条，-1 不受限制</span></span><br><span class="line">        <span class="comment">// paginationInterceptor.setLimit(500);</span></span><br><span class="line">        <span class="comment">// 开启 count 的 join 优化,只针对部分 left join</span></span><br><span class="line">        paginationInterceptor.setCountSqlParser(<span class="keyword">new</span> <span class="title class_">JsqlParserCountOptimize</span>(<span class="literal">true</span>));</span><br><span class="line">        <span class="keyword">return</span> paginationInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最新版</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.H2));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>UserMapper.java 方法内容</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;<span class="comment">//可以继承或者不继承BaseMapper</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 查询 : 根据state状态查询用户列表，分页显示</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 分页对象,xml中可以从里面进行取值,传递参数 Page 即自动分页,必须放在第一位(你可以继承Page实现自己的分页对象)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> state 状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分页对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IPage&lt;User&gt; <span class="title function_">selectPageVo</span><span class="params">(Page&lt;?&gt; page, Integer state)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>UserMapper.xml 等同于编写一个普通 list 查询，mybatis-plus 自动替你分页</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPageVo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.baomidou.cloud.entity.UserVo&quot;</span>&gt;</span></span><br><span class="line">    SELECT id,name FROM user WHERE state=#&#123;state&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>UserServiceImpl.java 调用分页方法</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> IPage&lt;User&gt; <span class="title function_">selectUserPage</span><span class="params">(Page&lt;User&gt; page, Integer state)</span> &#123;</span><br><span class="line">    <span class="comment">// 不进行 count sql 优化，解决 MP 无法自动优化 SQL 问题，这时候你需要自己查询 count 部分</span></span><br><span class="line">    <span class="comment">// page.setOptimizeCountSql(false);</span></span><br><span class="line">    <span class="comment">// 当 total 为小于 0 或者设置 setSearchCount(false) 分页插件不会进行 count 查询</span></span><br><span class="line">    <span class="comment">// 要点!! 分页返回的对象与传入的对象是同一个</span></span><br><span class="line">    <span class="keyword">return</span> userMapper.selectPageVo(page, state);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mybatisPlus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mybatisPlus </tag>
            
            <tag> 自带的分页插件的使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用api整理</title>
      <link href="/posts/11039.html"/>
      <url>/posts/11039.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Object <span class="title function_">parse</span><span class="params">(String text)</span>; <span class="comment">// 把JSON文本parse为JSONObject或者JSONArray</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> JSONObject <span class="title function_">parseObject</span><span class="params">(String text)</span>； <span class="comment">// 把JSON文本parse成JSONObject</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> &lt;T&gt; T <span class="title function_">parseObject</span><span class="params">(String text, Class&lt;T&gt; clazz)</span>; <span class="comment">// 把JSON文本parse为JavaBean</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> JSONArray <span class="title function_">parseArray</span><span class="params">(String text)</span>; <span class="comment">// 把JSON文本parse成JSONArray</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">parseArray</span><span class="params">(String text, Class&lt;T&gt; clazz)</span>; <span class="comment">//把JSON文本parse成JavaBean集合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title function_">toJSONString</span><span class="params">(Object object)</span>; <span class="comment">// 将JavaBean序列化为JSON文本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title function_">toJSONString</span><span class="params">(Object object, <span class="type">boolean</span> prettyFormat)</span>; <span class="comment">// 将JavaBean序列化为带格式的JSON文本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Object <span class="title function_">toJSON</span><span class="params">(Object javaObject)</span>; <span class="comment">//将JavaBean转换为JSONObject或者JSONArray。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> FastJSON </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> FastJSON </tag>
            
            <tag> 常用api整理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批量插入和批量更新</title>
      <link href="/posts/3561.html"/>
      <url>/posts/3561.html</url>
      
        <content type="html"><![CDATA[<h2 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertTgAfterCorrectData&quot;</span>&gt;</span></span><br><span class="line">        insert into dtjc_tg_after_correct_data(</span><br><span class="line">        id,</span><br><span class="line">        left_low</span><br><span class="line">        )</span><br><span class="line">        values</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            (</span><br><span class="line">            #&#123;item.id&#125;,</span><br><span class="line">            #&#123;item.left_low&#125;</span><br><span class="line">            )</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="批量更新"><a href="#批量更新" class="headerlink" title="批量更新"></a>批量更新</h2><h3 id="更新多条数据，每条数据都不一样"><a href="#更新多条数据，每条数据都不一样" class="headerlink" title="更新多条数据，每条数据都不一样"></a>更新多条数据，每条数据都不一样</h3><p>背景描述：通常如果需要一次更新多条数据有两个方式，（1）在业务代码中循环遍历逐条更新。（2）一次性更新所有数据（更准确的说是一条 sql 语句来更新所有数据，逐条更新的操作放到数据库端，在业务代码端展现的就是一次性更新所有数据）。两种方式各有利弊，下面将会对两种方式的利弊做简要分析，主要介绍第二种方式在 mybatis 中的实现。</p><h4 id="逐条实现（java-实现"><a href="#逐条实现（java-实现" class="headerlink" title="逐条实现（java 实现)"></a>逐条实现（java 实现)</h4><p>这种方式显然是最简单，也最不容易出错的，即便出错也只是影响到当条出错的数据，而且可以对每条数据都比较可控，更新失败或成功，从什么内容更新到什么内容，都可以在逻辑代码中获取。代码可能像下面这个样子：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">updateBatch(List&lt;MyData&gt; datas)&#123;</span><br><span class="line">    <span class="keyword">for</span>(MyData data : datas)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            myDataDao.update(data);<span class="comment">//更新一条数据，mybatis中如下面的xml文件的update</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            ...<span class="comment">//如果更新失败可以做一些其他的操作，比如说打印出错日志等</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis中update操作的实现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span>&gt;</span></span><br><span class="line">    update mydata</span><br><span class="line">    set   ...</span><br><span class="line">    where ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种方式最大的问题就是效率问题，逐条更新，每次都会连接数据库，然后更新，再释放连接资源（虽然通过连接池可以将频繁连接数据的效率大大提高，抗不住数据量大），这中损耗在数据量较大的时候便会体现出效率问题。这也是在满足业务需求的时候，通常会使用上述提到的第二种批量更新的实现（当然这种方式也有数据规模的限制，后面会提到）。</p><h4 id="逐条更新-mybatis-实现"><a href="#逐条更新-mybatis-实现" class="headerlink" title="逐条更新(mybatis 实现)"></a>逐条更新(mybatis 实现)</h4><p>通过循环，依次执行多条 update 的 sql</p><p>前提条件:</p><p>要实现批量更新，首先得设置 mysql 支持批量操作，在 jdbc 链接中需要附加&amp;allowMultiQueries=true 属性才行，可能会被阿里的 druid 给阻挡。需要上网找绕过阻挡得方案<br>例如：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc:</span> <span class="string">mysql://localhost:3306/dbname?characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;allowMultiQueries=true</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBatch&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">open</span>=<span class="string">&quot;&quot;</span> <span class="attr">close</span>=<span class="string">&quot;&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;;&quot;</span>&gt;</span></span><br><span class="line">        update course</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            name=$&#123;item.name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where id = $&#123;item.id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一条记录 update 一次，性能比较差，容易造成阻塞。</p><h3 id="sql-批量更新-主力实现"><a href="#sql-批量更新-主力实现" class="headerlink" title="sql 批量更新(主力实现)"></a>sql 批量更新(主力实现)</h3><h5 id="实际实践-传入的是-List"><a href="#实际实践-传入的是-List" class="headerlink" title="实际实践(传入的是 List"></a>实际实践(传入的是 List<Map<String, Object>&gt;)</h5><p>务必注意:一定要加 where 条件,里面的 id 为需要更新的数据的 id;如果不加 where 条件,则会全部更新,但是需要更新且有数据的更新为传递的数据,没有数据的则更新为 null,此时更新出错</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateChartParamByAccountAndChartid&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        update followme_parameters</span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;set&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;signal_source =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.signalSource!=null&quot;</span>&gt;</span></span><br><span class="line">                        when account=#&#123;item.account&#125; and chart_id=#&#123;item.chartId&#125;</span><br><span class="line">                         then #&#123;item.signalSource&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;rate =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.rate!=null&quot;</span>&gt;</span></span><br><span class="line">                        when account=#&#123;item.account&#125; and chart_id=#&#123;item.chartId&#125;</span><br><span class="line">                        then #&#123;item.rate&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">        where id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">            #&#123;item.id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另外文章的样板</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBatch&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">     update course</span><br><span class="line">      <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;set&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;peopleId =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;i&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;i.peopleId!=null&quot;</span>&gt;</span></span><br><span class="line">                    when id=#&#123;i.id&#125; then #&#123;i.peopleId&#125;</span><br><span class="line">                   <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot; roadgridid =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;i&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;i.roadgridid!=null&quot;</span>&gt;</span></span><br><span class="line">                    when id=#&#123;i.id&#125; then #&#123;i.roadgridid&#125;</span><br><span class="line">                   <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;type =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span> &gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;i&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;i.type!=null&quot;</span>&gt;</span></span><br><span class="line">                    when id=#&#123;i.id&#125; then #&#123;i.type&#125;</span><br><span class="line">                   <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;unitsid =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;i&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;i.unitsid!=null&quot;</span>&gt;</span></span><br><span class="line">                     when id=#&#123;i.id&#125; then #&#123;i.unitsid&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    where</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span> <span class="attr">item</span>=<span class="string">&quot;i&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> &gt;</span></span><br><span class="line">        id=#&#123;i.id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/junehappylove/article/details/82215674">原文链接</a></p><h5 id="下面逐步讲解"><a href="#下面逐步讲解" class="headerlink" title="下面逐步讲解"></a>下面逐步讲解</h5><p>一条 sql 语句来批量更新所有数据，下面直接看一下在 mybatis 中通常是怎么写的（去掉 mybatis 语法就是原生的 sql 语句了，所有就没单独说 sql 是怎么写的）</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBatch&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span>&gt;</span></span><br><span class="line">    update mydata_table</span><br><span class="line">    set  status=</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">separator</span>=<span class="string">&quot; &quot;</span> <span class="attr">open</span>=<span class="string">&quot;case ID&quot;</span> <span class="attr">close</span>=<span class="string">&quot;end&quot;</span>&gt;</span></span><br><span class="line">        when #&#123;item.id&#125; then #&#123;item.status&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;item.id,jdbcType=BIGINT&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中 when…then…是 sql 中的”switch” 语法。这里借助 mybatis 的语法来拼凑成了批量更新的 sql，上面的意思就是批量更新 id 在 updateBatch 参数所传递 List 中的数据的 status 字段。还可以使用实现同样的功能,代码如下:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBatch&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span>&gt;</span></span><br><span class="line">        update mydata_table</span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;set&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;status =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                     when id=#&#123;item.id&#125; then #&#123;item.status&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">        where id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">            #&#123;item.id,jdbcType=BIGINT&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>属性说明</p><ul><li>prefix,suffix 表示在 trim 标签包裹的部分的前面或者后面添加内容</li><li>如果同时有 prefixOverrides,suffixOverrides 表示会用 prefix,suffix 覆盖 Overrides 中的内容。</li><li>如果只有 prefixOverrides,suffixOverrides 表示删除开头的或结尾的 xxxOverides 指定的内容。</li></ul><p>上述代码转化成 sql 如下:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> mydata_table</span><br><span class="line">    <span class="keyword">set</span> status <span class="operator">=</span></span><br><span class="line">    <span class="keyword">case</span></span><br><span class="line">        <span class="keyword">when</span> id <span class="operator">=</span> #&#123;item.id&#125; <span class="keyword">then</span> #&#123;item.status&#125;<span class="operator">/</span><span class="operator">/</span>此处应该是<span class="operator">&lt;</span>foreach<span class="operator">&gt;</span>展开值</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">where</span> id <span class="keyword">in</span> (...);</span><br></pre></td></tr></table></figure><p>当然这是最简单的批量更新实现,有时候可能需要更新多个字段,那就需要将</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;status =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">          when id=#&#123;item.id&#125; then #&#123;item.status&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><p>复制拷贝多次,更改 prefix 和 when…then…的内容即可.而如果当需要为某个字段设置默认值的时候可以使用 else</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;status =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">          when id=#&#123;item.id&#125; then #&#123;item.status&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">     else default_value</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还有更常见的情况就是需要对要更新的数据进行判断,只有符合条件的数据才能进行更新,这种情况可以这么做:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;status =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.status !=null and item.status != -1&quot;</span>&gt;</span></span><br><span class="line">             when id=#&#123;item.id&#125; then #&#123;item.status&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样的话只有要更新的 list 中 status != null &amp;&amp; status != -1 的数据才能进行 status 更新.其他的将使用默认值更新,而不会保持原数据不变.如果要保持原数据不变呢?即满足条件的更新,不满足条件的保持原数据不变,简单的来做就是再加一个,因为 mybatis 中没有 if…else…语法,但可以通过多个实现同样的效果,如下:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;status =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.status !=null and item.status != -1&quot;</span>&gt;</span></span><br><span class="line">             when id=#&#123;item.id&#125; then #&#123;item.status&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.status == null or item.status == -1&quot;</span>&gt;</span></span><br><span class="line">             when id=#&#123;item.id&#125; then mydata_table.status      //这里就是原数据</span><br><span class="line">         <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><p>整体批量更新的写法如下:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBatch&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span>&gt;</span></span><br><span class="line">    update mydata_table</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;set&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;status =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.status !=null and item.status != -1&quot;</span>&gt;</span></span><br><span class="line">                     when id=#&#123;item.id&#125; then #&#123;item.status&#125;</span><br><span class="line">                 <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.status == null or item.status == -1&quot;</span>&gt;</span></span><br><span class="line">                     when id=#&#123;item.id&#125; then mydata_table.status//原数据</span><br><span class="line">                 <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;item.id,jdbcType=BIGINT&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h5 id="批量更新-单个字段-传参-list-实际是-sql-批量更新的简化版本而已"><a href="#批量更新-单个字段-传参-list-实际是-sql-批量更新的简化版本而已" class="headerlink" title="批量更新(单个字段,传参 list),实际是 sql 批量更新的简化版本而已"></a>批量更新(单个字段,传参 list),实际是 sql 批量更新的简化版本而已</h5><h6 id="单个字段方法-1"><a href="#单个字段方法-1" class="headerlink" title="单个字段方法 1"></a>单个字段方法 1</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateByBatch&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span>&gt;</span></span><br><span class="line">    update t_goods</span><br><span class="line">    set NODE_ID=</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">separator</span>=<span class="string">&quot; &quot;</span> <span class="attr">open</span>=<span class="string">&quot;case&quot;</span> <span class="attr">close</span>=<span class="string">&quot;end&quot;</span>&gt;</span></span><br><span class="line">      when GOODS_ID=#&#123;item.goodsId&#125; then #&#123;item.nodeId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    where GOODS_ID in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">      #&#123;item.goodsId,jdbcType=BIGINT&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="单个字段方法-2"><a href="#单个字段方法-2" class="headerlink" title="单个字段方法 2"></a>单个字段方法 2</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateByBatch&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span>&gt;</span></span><br><span class="line">    UPDATE</span><br><span class="line">    t_goods</span><br><span class="line">    SET NODE_ID = CASE</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">      WHEN GOODS_ID = #&#123;item.goodsId&#125; THEN #&#123;item.nodeId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    END</span><br><span class="line">    WHERE GOODS_ID IN</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">      #&#123;item.goodsId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上单字段更新实际执行：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> t_goods <span class="keyword">SET</span> NODE_ID <span class="operator">=</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> GOODS_ID <span class="operator">=</span> ? <span class="keyword">THEN</span> ? <span class="keyword">END</span> <span class="keyword">WHERE</span> GOODS_ID <span class="keyword">IN</span> ( ? )</span><br></pre></td></tr></table></figure><h5 id="sql-批量更新-通过-insert-实现"><a href="#sql-批量更新-通过-insert-实现" class="headerlink" title="sql 批量更新(通过 insert 实现)"></a>sql 批量更新(通过 insert 实现)</h5><p>传入的是 List<Map<String,Object>&gt;<br>直接运行插入,如果有插入的数据转为更新该条数据</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;updateChartParamByAccountAndChartid&quot;</span>&gt;</span></span><br><span class="line">    insert into followme_parameters</span><br><span class="line">    (account,chart_id,signal_source,rate)</span><br><span class="line">    values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">        (#&#123;item.account&#125;,#&#123;item.chartId&#125;,#&#123;item.signalSource&#125;,#&#123;item.rate&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    ON duplicate KEY UPDATE</span><br><span class="line">    signal_source=values(signal_source),rate=values(rate)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="更新多条数据-更新的内容一样"><a href="#更新多条数据-更新的内容一样" class="headerlink" title="更新多条数据,更新的内容一样."></a>更新多条数据,更新的内容一样.</h3><h4 id="传-map-传-String"><a href="#传-map-传-String" class="headerlink" title="传 map/传 String"></a>传 map/传 String</h4><p>NODE_ID 从 map 中取出来,goodsIdList 是字符串拼接好的(如下面的”1,2,5”)</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateByBatchPrimaryKey&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.Map&quot;</span>&gt;</span></span><br><span class="line">    UPDATE t_goods</span><br><span class="line">    SET NODE_ID = #&#123;nodeId&#125;</span><br><span class="line">    WHERE GOODS_ID IN ($&#123;goodsIdList&#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实际的 sql</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> t_goods <span class="keyword">SET</span> NODE_ID <span class="operator">=</span> ? <span class="keyword">WHERE</span> GOODS_ID <span class="keyword">IN</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure><h4 id="传-map-传-list"><a href="#传-map-传-list" class="headerlink" title="传 map/传 list"></a>传 map/传 list</h4><p>NODE_ID 从 map 中取出来,goodsIdList 是用 list 拼接出来的</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateByBatchPrimaryKey&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.Map&quot;</span>&gt;</span></span><br><span class="line">    UPDATE t_goods</span><br><span class="line">    SET NODE_ID = #&#123;nodeId&#125;</span><br><span class="line">    WHERE GOODS_ID IN</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">      #&#123;item.goodsId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实际的 sql</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> t_goods <span class="keyword">SET</span> NODE_ID <span class="operator">=</span> ? <span class="keyword">WHERE</span> GOODS_ID <span class="keyword">IN</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/eternityz/p/12284760.html">原文链接</a></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mybatis </tag>
            
            <tag> 批量插入和批量更新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>传入集合循环查询并用union组合</title>
      <link href="/posts/25838.html"/>
      <url>/posts/25838.html</url>
      
        <content type="html"><![CDATA[<p>实例：接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * selectOverrunData:查询一个单次计划某个行别某个速度级下各个超限类型的占比</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> testTaskId 测试任务id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> xb         行别</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> speedLevel 速度级</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type       超限还是大值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> labelList  通道名称集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Zhangyuhan</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2021/7/8 15:03</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">selectStatisticalInformation</span><span class="params">(<span class="meta">@Param(&quot;testTaskId&quot;)</span> String testTaskId,</span></span><br><span class="line"><span class="params">                                                           <span class="meta">@Param(&quot;xb&quot;)</span> String xb,</span></span><br><span class="line"><span class="params">                                                           <span class="meta">@Param(&quot;speedLevel&quot;)</span> Integer speedLevel,</span></span><br><span class="line"><span class="params">                                                           <span class="meta">@Param(&quot;type&quot;)</span> String type,</span></span><br><span class="line"><span class="params">                                                           <span class="meta">@Param(&quot;labelList&quot;)</span> List&lt;String&gt; labelList)</span>;</span><br></pre></td></tr></table></figure><p>接口对应的 sql</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStatisticalInformation&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;labelList&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;UNION&quot;</span>&gt;</span></span><br><span class="line">        SELECT numtab.num AS VALUE,</span><br><span class="line">        concat( round(( numtab.num / numtab.total ) * 100, 2),&#x27;%&#x27; ) AS NAME</span><br><span class="line">        FROM</span><br><span class="line">            (</span><br><span class="line">            SELECT</span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;type == &quot;超限&quot;&#x27;</span>&gt;</span></span><br><span class="line">                count( CASE WHEN cxlx = #&#123;item&#125; THEN 1 END ) AS num ,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;type == &quot;大值&quot;&#x27;</span>&gt;</span></span><br><span class="line">                count( CASE WHEN dzlx = #&#123;item&#125; THEN 1 END ) AS num,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            count(*) AS total</span><br><span class="line">            FROM</span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;type == &quot;超限&quot;&#x27;</span>&gt;</span></span><br><span class="line">            cxdata_table</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;type == &quot;大值&quot;&#x27;</span>&gt;</span></span><br><span class="line">            dzdata_table</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            WHERE</span><br><span class="line">            dcjh_id = &#x27;797cb0e7de3241029b5feb6b1ffa17ca&#x27;</span><br><span class="line">            AND xb = &#x27;上行&#x27;</span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;type == &quot;超限&quot;&#x27;</span>&gt;</span></span><br><span class="line">            AND flag = &#x27;0&#x27;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            ) numtab</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mybatis </tag>
            
            <tag> 传入集合循环查询并用union组合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现if-else</title>
      <link href="/posts/51749.html"/>
      <url>/posts/51749.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;item.tdName == &#x27;hor_acceleration&#x27;&quot;</span>&gt;</span></span><br><span class="line">                   &#x27;0&#x27; as horAcceleration,</span><br><span class="line">               <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                   hor_acceleration as horAcceleration,</span><br><span class="line">               <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mybatis </tag>
            
            <tag> 实现if-else </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断字符串相等时的注意事项</title>
      <link href="/posts/281.html"/>
      <url>/posts/281.html</url>
      
        <content type="html"><![CDATA[<p>mybatis 映射文件中，if 标签判断字符串相等，两种方式：</p><p>因为 mybatis 映射文件，是使用的 ognl 表达式，所以在判断字符串 sex 变量是否是字符串 Y 的时候，</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex==&#x27;Y&#x27;.toString()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span> = <span class="string">&#x27;sex== &quot;Y&quot;&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：不能使用</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex==&#x27;Y&#x27;&quot;</span>&gt;</span></span><br><span class="line">and 1=1</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为 mybatis 会把’Y’解析为字符，所以不能这样写 会报 NumberFormatException</p><p>MyBatis 是使用的 OGNL 表达式来进行解析的，这个地方有一个坑需要注意下，单引号内有一个字符的情况下，OGNL 会将其以 java 中的 char 类型进行解析，那么此时 char 类型与参数 String 类型用等号进行比较的时候结果都是 false。解决方案也很简单，就是讲 test 中的单个字符用双引号括起来。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">      /*不行*/</span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;qryStr==&#x27;Y&#x27;&quot;</span>&gt;</span></span><br><span class="line">              and counts=1</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           /*可以*/</span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;qryStr==&#x27;Y&#x27;.toString()&quot;</span>&gt;</span></span><br><span class="line">              and counts=1</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">              /*可以*/</span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;qryStr==&quot;Y&quot;&#x27;</span>&gt;</span></span><br><span class="line">              and counts=2</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure><p>建议使用外部单引号，里面双引号嵌套的方式。</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mybatis </tag>
            
            <tag> 判断字符串相等时的注意事项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批量插入大数据</title>
      <link href="/posts/33253.html"/>
      <url>/posts/33253.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>思路分析<br>批量插入这个问题，我们用 JDBC 操作，其实就是两种思路吧：</p><ul><li><p>用一个 for 循环，把数据一条一条的插入（这种需要开启批处理）。</p></li><li><p>生成一条插入 sql，类似这种 insert into user(username,address) values(‘aa’,‘bb’),(‘cc’,‘dd’)…。<br>到底哪种快呢？</p></li></ul><p>我们从两方面来考虑这个问题：</p><ul><li><p>插入 SQL 本身执行的效率。</p></li><li><p>网络 I/O。</p></li></ul><p><strong>先说第一种方案，就是用 for 循环循环插入：</strong></p><ul><li>这种方案的优势在于，JDBC 中的 PreparedStatement 有预编译功能，预编译之后会缓存起来，后面的 SQL 执行会比较快并且 JDBC 可以开启批处理，这个批处理执行非常给力。</li><li>劣势在于，很多时候我们的 SQL 服务器和应用服务器可能并不是同一台，所以必须要考虑网络 IO，如果网络 IO 比较费时间的话，那么可能会拖慢 SQL 执行的速度。</li></ul><p><strong>再来说第二种方案，就是生成一条 SQL 插入：</strong></p><ul><li>这种方案的优势在于只有一次网络 IO，即使分片处理也只是数次网络 IO，所以这种方案不会在网络 IO 上花费太多时间。</li><li>当然这种方案有好几个劣势，一是 SQL 太长了，甚至可能需要分片后批量处理；二是无法充分发挥 PreparedStatement 预编译的优势，SQL 要重新解析且无法复用；三是最终生成的 SQL 太长了，数据库管理器解析这么长的 SQL 也需要时间。<br>所以我们最终要考虑的就是我们在网络 IO 上花费的时间，是否超过了 SQL 插入的时间？这是我们要考虑的核心问题。</li></ul></li><li><p>数据测试</p><p><strong>2.1 方案 1 测试</strong></p><p>接下来我们来做一个简单的测试，批量插入 5 万条数据看下。</p><p>首先准备一个简单的测试表：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `address` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure><p>接下来创建一个 Spring Boot 工程，引入 <a href="https://so.csdn.net/so/search?q=MyBatis&amp;spm=1001.2101.3001.7020">MyBatis</a> 依赖和 MySQL 驱动，然后 application.properties 中配置一下数据库连接信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123</span><br><span class="line">spring.datasource.url=jdbc:mysql:///batch_insert?serverTimezone=Asia/Shanghai&amp;rewriteBatchedStatements=true</span><br><span class="line"></span><br><span class="line">大家需要注意，这个数据库连接 URL 地址中多了一个参数 **rewriteBatchedStatements**，这是核心。``</span><br><span class="line"></span><br><span class="line">MySQL JDBC 驱动在默认情况下会无视 **executeBatch()** 语句，把我们期望批量执行的一组 sql 语句拆散，一条一条地发给 MySQL 数据库，批量插入实际上是单条插入，直接造成较低的性能。将 **rewriteBatchedStatements** 参数置为 true, 数据库驱动才会帮我们批量执行 SQL。</span><br><span class="line"></span><br><span class="line">OK，这样准备工作就做好了。</span><br><span class="line"></span><br><span class="line">## 2.1 方案一测试</span><br><span class="line">首先我们来看方案一的测试，即一条一条的插入（实际上是批处理）。</span><br><span class="line"></span><br><span class="line">首先创建相应的 mapper，如下：</span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line">@Mapper</span><br><span class="line">public interface UserMapper &#123;</span><br><span class="line">    Integer addUserOneByOne(User user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对应的 XML 文件如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUserOneByOne&quot;</span>&gt;</span></span><br><span class="line">    insert into user (username,address,password) values (#&#123;username&#125;,#&#123;address&#125;,#&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>service 如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(UserService.class);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUserOneByOne</span><span class="params">(List&lt;User&gt; users)</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> sqlSessionFactory.openSession(ExecutorType.BATCH);</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">um</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            um.addUserOneByOne(user);</span><br><span class="line">        &#125;</span><br><span class="line">        session.commit();</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        logger.info(<span class="string">&quot;一条条插入 SQL 耗费时间 &#123;&#125;&quot;</span>, (endTime - startTime));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充说明：</p><p>虽然是一条一条的插入，但是我们要开启批处理模式（BATCH），这样前前后后就只用这一个 SqlSession，如果不采用批处理模式，反反复复的获取 Connection 以及释放 Connection 会耗费大量时间，效率奇低，这种效率奇低的方式松哥就不给大家测试了。</p><p>接下来写一个简单的测试接口看下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> getLogger(HelloController.class);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一条一条插入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">user2</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            u.setAddress(<span class="string">&quot;广州：&quot;</span> + i);</span><br><span class="line">            u.setUsername(<span class="string">&quot;张三：&quot;</span> + i);</span><br><span class="line">            u.setPassword(<span class="string">&quot;123：&quot;</span> + i);</span><br><span class="line">            users.add(u);</span><br><span class="line">        &#125;</span><br><span class="line">        userService.addUserOneByOne(users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写个简单的单元测试：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 单元测试加事务的目的是为了插入之后自动回滚，避免影响下一次测试结果</span></span><br><span class="line"><span class="comment"> * 一条一条插入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addUserOneByOne</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        u.setAddress(<span class="string">&quot;广州：&quot;</span> + i);</span><br><span class="line">        u.setUsername(<span class="string">&quot;张三：&quot;</span> + i);</span><br><span class="line">        u.setPassword(<span class="string">&quot;123：&quot;</span> + i);</span><br><span class="line">        users.add(u);</span><br><span class="line">    &#125;</span><br><span class="line">    userService.addUserOneByOne(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>经过测试，耗时 901 毫秒，5w 条数据插入不到 1 秒。</strong></p><p><strong>2.2 方案 2 测试</strong></p><p>方案二是生成一条 SQL 然后插入。</p><p>mapper 如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addByOneSQL</span><span class="params">(<span class="meta">@Param(&quot;users&quot;)</span> List&lt;User&gt; users)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的 SQL 如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addByOneSQL&quot;</span>&gt;</span></span><br><span class="line">    insert into user (username,address,password) values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;users&quot;</span> <span class="attr">item</span>=<span class="string">&quot;user&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        (#&#123;user.username&#125;,#&#123;user.address&#125;,#&#123;user.password&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>service 如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(UserService.class);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addByOneSQL</span><span class="params">(List&lt;User&gt; users)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        userMapper.addByOneSQL(users);</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        logger.info(<span class="string">&quot;合并成一条 SQL 插入耗费时间 &#123;&#125;&quot;</span>, (endTime - startTime));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在单元测试中调一下这个方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 合并成一条 SQL 插入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addByOneSQL</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        u.setAddress(<span class="string">&quot;广州：&quot;</span> + i);</span><br><span class="line">        u.setUsername(<span class="string">&quot;张三：&quot;</span> + i);</span><br><span class="line">        u.setPassword(<span class="string">&quot;123：&quot;</span> + i);</span><br><span class="line">        users.add(u);</span><br><span class="line">    &#125;</span><br><span class="line">    userService.addByOneSQL(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过测试，可以看到插入 5 万条数据耗时 1805 毫秒。</p><p>可以看到，生成一条 SQL 的执行效率还是要差一点。</p><p>另外还需要注意，第二种方案还有一个问题，就是当数据量大的时候，生成的 SQL 将特别的长，MySQL 可能一次性处理不了这么大的 SQL，这个时候就需要修改 MySQL 的配置或者对待插入的数据进行分片处理了，这些操作又会导致插入时间更长。</p><p><strong>2.3 对比分析</strong></p><p>很明显，方案一更具优势。当批量插入十万、二十万数据的时候，方案一的优势会更加明显（方案二则需要修改 MySQL 配置或者对待插入数据进行分片）。</p></li><li><p>mp 是怎么做的</p><p>我们知道，其实 MyBatis Plus 里边也有一个批量插入的方法 saveBatch，我们来看看它的实现源码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sqlStatement</span> <span class="operator">=</span> getSqlStatement(SqlMethod.INSERT_ONE);</span><br><span class="line">    <span class="keyword">return</span> executeBatch(entityList, batchSize, (sqlSession, entity) -&gt; sqlSession.insert(sqlStatement, entity));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这里拿到的 sqlStatement 就是一个 INSERT_ONE，即一条一条插入。</p><p>再来看 executeBatch 方法，如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="type">boolean</span> <span class="title function_">executeBatch</span><span class="params">(Class&lt;?&gt; entityClass, Log log, Collection&lt;E&gt; list, <span class="type">int</span> batchSize, BiConsumer&lt;SqlSession, E&gt; consumer)</span> &#123;</span><br><span class="line">    Assert.isFalse(batchSize &lt; <span class="number">1</span>, <span class="string">&quot;batchSize must not be less than one&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> !CollectionUtils.isEmpty(list) &amp;&amp; executeBatch(entityClass, log, sqlSession -&gt; &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list.size();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (E element : list) &#123;</span><br><span class="line">            consumer.accept(sqlSession, element);</span><br><span class="line">            <span class="keyword">if</span> ((i % batchSize == <span class="number">0</span>) || i == size) &#123;</span><br><span class="line">                sqlSession.flushStatements();</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里注意 return 中的第三个参数，是一个 lambda 表达式，这也是 MP 中批量插入的核心逻辑，可以看到，MP 先对数据进行分片（默认分片大小是 1000），分片完成之后，也是一条一条的插入。继续查看 executeBatch 方法，就会发现这里的 sqlSession 其实也是一个批处理的 sqlSession，并非普通的 sqlSession。</p><p>综上，MP 中的批量插入方案跟我们 2.1 小节的批量插入思路其实是一样的。入股想要批量插入大数据量的效率最高，就采用 2.1 的方式</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mybatis </tag>
            
            <tag> 批量插入大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>容器滚动条出现的条件</title>
      <link href="/posts/49921.html"/>
      <url>/posts/49921.html</url>
      
        <content type="html"><![CDATA[<p>容器出现滚动条的条件：1，容器有固定的高度，2，容器的内容高度，超出了容器的高度，如果容器未设定高度，则它会向父亲，祖先找到有高度的容器，并在其身上显示滚动条</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> html </tag>
            
            <tag> 容器滚动条出现的条件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自适应宽度的input框</title>
      <link href="/posts/45263.html"/>
      <url>/posts/45263.html</url>
      
        <content type="html"><![CDATA[<p>解决办法 1：div 的 contenteditable=”true”属性。能实现一行编辑。<br>待解决的问题：需要禁止回车换行，同时还有编辑完之后光标不会回到最开始，光标会保留在你最后编辑的地方</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dict_val1&quot;</span> <span class="attr">contenteditable</span>=<span class="string">&quot;true&quot;</span> <span class="attr">id</span>=<span class="string">&quot;lineLength&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[contenteditable]</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0.1458rem</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">0.1458rem</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*重要*/</span></span><br><span class="line">  <span class="attribute">width</span>: auto;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">0.1458rem</span>;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  <span class="comment">/*重要*/</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#001631</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0.0677rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启编辑状态的话只需把 outline 的 none 去掉就行，改为默认状态或自定义属性如 outline:#00FF00 dotted thick;<br>或者不更改 outLine 状态，把 div 的 border 调出来也可以</p><hr><p>解决方案 2:传统的 input 方法 我比较推荐使用<br>待解决的问题：只能实现下划线效果的自适应，不能实现四周带边框效果的自适应<br>给 input 一个固定的宽度,隐藏它周围的边框</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">readonly</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">class</span>=<span class="string">&quot;line_edit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;line_name&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>当点击编辑的时候给 input 加上一个类 input_text_underline,这样文字就有下划线了。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.input_text_underline</span> &#123;</span><br><span class="line">   <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">   <span class="attribute">text-decoration-color</span>: <span class="number">#8F9AB4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> css </tag>
            
            <tag> 自适应宽度的input框 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node的环境安装</title>
      <link href="/posts/24427.html"/>
      <url>/posts/24427.html</url>
      
        <content type="html"><![CDATA[<h2 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h2><p>建议先安装 nvm，而不是直接安装 node</p><h3 id="nvm-是什么"><a href="#nvm-是什么" class="headerlink" title="nvm 是什么"></a>nvm 是什么</h3><p>nvm 全英文也叫 node.js version management，是一个 nodejs 的版本管理工具，为了解决 node.js 各种版本存在不兼容现象可以通过它可以安装和切换不同版本的 node.js。<br>可在点此在上下载最新版本</p><h3 id="nvm-命令提示"><a href="#nvm-命令提示" class="headerlink" title="nvm 命令提示"></a>nvm 命令提示</h3><ul><li><code>nvm arch</code>：显示 node 是运行在 32 位还是 64 位。</li><li><code>nvm install &lt;version&gt; [arch]</code> ：安装 node， version 是特定版本也可以是最新稳定版本 latest。可选参数 arch 指定安装 32 位还是 64 位版本，默认是系统位数。可以添加—insecure 绕过远程服务器的 SSL。</li><li><code>nvm list [available]</code> ：显示已安装的列表。可选参数 available，显示可安装的所有版本。list 可简化为 ls。</li><li><code>nvm on</code> ：开启 node.js 版本管理。</li><li><code>nvm off</code> ：关闭 node.js 版本管理。</li><li><code>nvm proxy [url]</code> ：设置下载代理。不加可选参数 url，显示当前代理。将 url 设置为 none 则移除代理。</li><li><code>nvm node_mirror [url]</code> ：设置 node 镜像。默认是<a href="https://nodejs.org/dist/。如果不写url，则使用默认url。设置后可至安装目录settings.txt文件查看，也可直接在该文件操作。">https://nodejs.org/dist/。如果不写url，则使用默认url。设置后可至安装目录settings.txt文件查看，也可直接在该文件操作。</a></li><li><code>nvm npm_mirror [url]</code> ：设置 npm 镜像。<a href="https://github.com/npm/cli/archive/。如果不写url，则使用默认url。设置后可至安装目录settings.txt文件查看，也可直接在该文件操作。">https://github.com/npm/cli/archive/。如果不写url，则使用默认url。设置后可至安装目录settings.txt文件查看，也可直接在该文件操作。</a></li><li><code>nvm uninstall &lt;version&gt;</code> ：卸载指定版本 node。</li><li><code>nvm use [version] [arch]</code> ：使用制定版本 node。可指定 32/64 位。</li><li><code>nvm root [path]</code> ：设置存储不同版本 node 的目录。如果未设置，默认使用当前目录。</li><li><code>nvm version</code> ：显示 nvm 版本。version 可简化为 v。</li></ul><h3 id="nvm-安装后的操作"><a href="#nvm-安装后的操作" class="headerlink" title="nvm 安装后的操作"></a>nvm 安装后的操作</h3><ol><li><code>nvm install 官网最新的稳定版node的版本号</code></li><li><code>nvm use 官网最新的稳定版node的版本号</code></li><li><code>node -v</code>查看 node 是否安装完成</li></ol><h2 id="pnpm"><a href="#pnpm" class="headerlink" title="pnpm"></a>pnpm</h2><p>使用 nvm 安装好 node 后，建议使用 pnpm 代替 npm<br>执行<code>npm install pnpm -g</code>安装 pnpm<br>在项目里使用<code>pnpm install</code>代理<code>npm install</code></p><h3 id="pnpm-命令"><a href="#pnpm-命令" class="headerlink" title="pnpm 命令"></a>pnpm 命令</h3><ul><li><code>pnpm add -g pnpm</code> 更新 pnpm</li><li><code>pnpm install</code> 安装项目所有依赖</li></ul><h2 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h2><p>安装完 node 和 pnpm，最后安装 nrm<br>nrm 是一个镜像源管理工具，可以设置 npm/pnpm 的以来下载地址<br>执行<code>npm install nrm -g</code>安装 nrm<br>安装完后执行<code>nrm use taobao</code>，设置 npm/pnpm 的包下载源使用淘宝镜像</p><h3 id="nrm-命令"><a href="#nrm-命令" class="headerlink" title="nrm 命令"></a>nrm 命令</h3><ul><li><code>nrm -v</code>：查看 nrm 是否安装成功</li><li><code>nrm ls</code>：列出可选择的源</li><li><code>nrm use 源名称</code>：切换使用的源，切换后可使用 nrm ls 查看</li><li><code>nrm add 源名称 &lt;url&gt;</code>：添加新源</li><li><code>nrm del 源名称</code>：删除旧源,nrm del 命令不能删除 nrm 自己内置的源。</li><li><code>nrm test 源名称</code>：测试源的速度，如果不加源名称则是测试所有的源速度</li><li><code>nrm home 源名称</code>：访问源的主页（在默认浏览器打开）<br>-</li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> node </tag>
            
            <tag> node的环境安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务的传播行为以及在spring中的配置</title>
      <link href="/posts/32036.html"/>
      <url>/posts/32036.html</url>
      
        <content type="html"><![CDATA[<p>一、什么是事务传播行为？<br>事务传播行为（propagation behavior）指的就是当一个事务方法被另一个事务方法调用时，这个事务方法应该如何运行。</p><p>例如：methodA 方法调用 methodB 方法时，methodB 是继续在调用者 methodA 的事务中运行呢，还是为自己开启一个新事务运行，这就是由 methodB 的事务传播行为决定的。</p><p>二、事务的 7 种传播行为<br>Spring 在 TransactionDefinition 接口中规定了 7 种类型的事务传播行为。<br>事务传播行为是 Spring 框架独有的事务增强特性。<br>7 种：(required / supports / mandatory / requires_new / not supported / never / nested)</p><ul><li><p>PROPAGATION_REQUIRED：如果当前没有事务，就创建一个新事务，如果当前存在事务，就加入该事务，这是最常见的选择，也是 Spring 默认的事务传播行为。(required 需要，没有新建，有加入)</p></li><li><p>PROPAGATION_SUPPORTS：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就以非事务执行。（supports 支持，有则加入，没有就不管了，非事务运行）</p></li><li><p>PROPAGATION_MANDATORY：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就抛出异常。（mandatory 强制性，有则加入，没有异常）</p></li><li><p>PROPAGATION_REQUIRES_NEW：创建新事务，无论当前存不存在事务，都创建新事务。（requires_new 需要新的，不管有没有，直接创建新事务）</p></li><li><p>PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。（not supported 不支持事务，存在就挂起）</p></li><li><p>PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。（never 不支持事务，存在就异常）</p></li><li><p>PROPAGATION_NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则按 REQUIRED 属性执行。（nested 存在就在嵌套的执行，没有就找是否存在外面的事务，有则加入，没有则新建）</p></li></ul><p>对事务的要求程度可以从大到小排序：mandatory / supports / required / requires_new / nested / not supported / never</p><p>三、实战<br>1、描述</p><p>外围无事务，内部有事务，外围管不着内部</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test_PROPAGATION_REQUIRED</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// add方法 @Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">    userService.add(user);</span><br><span class="line">    <span class="comment">// add方法 @Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">    userRoleService.add(userRole);</span><br><span class="line">    <span class="comment">//抛异常，不影响上面的add方法执行，外部异常不影响内部</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、描述</p><p>外围方法 Propagation.REQUIRED<br>内部方法 Propagation.REQUIRED<br>修饰的内部方法会加入到外围方法的事务中<br>内部方法和外围方法均属于同一事务，只要一个方法回滚，整个事务均回滚</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>  <span class="comment">// 默认Required</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test_PROPAGATION_REQUIRED</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 增加用户表 Required 加入了外部事务</span></span><br><span class="line">    userService.add(user);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增加用户角色表 Required 加入了外部事务</span></span><br><span class="line">    userRoleService.add(userRole);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抛异常 所有都回滚</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、描述</p><p>支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就以非事务执行<br>外围方法没有开启事务，add 方法直接无事务执行</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test_PROPAGATION_SUPPORTS</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 增加用户表 @Transactional(propagation = Propagation.SUPPORTS)</span></span><br><span class="line">    userService.add(user);</span><br><span class="line">    <span class="comment">// 增加用户角色表 @Transactional(propagation = Propagation.SUPPORTS)</span></span><br><span class="line">    userRoleService.add(userRole);</span><br><span class="line">    <span class="comment">//抛异常，当前无事务，直接无事务执行</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、描述</p><p>外围加入事务，默认 Propagation.REQUIRED<br>内部使用 Propagation.SUPPORTS<br>内部发现有事务，加入，外部异常，内部回滚</p><p>5、描述</p><p>支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就抛出异常<br>外围不存在事务<br>内部 add 方法使用@Transactional(propagation = Propagation.MANDATORY)<br>内部发现当前没事务，直接抛出异常<br>其他的都同理，就不一一讲了……<br>————————————————<br>原文链接：<a href="https://blog.csdn.net/qq_38262266/article/details/108709840">https://blog.csdn.net/qq_38262266/article/details/108709840</a></p><hr><p>B 为主方法, C 子方法, 操作 B 的是否有事务, 操作 C 的传播属性 ,这个地方的情况太多,直接在下面表格中的<code>本文中的解释</code>部分说明</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Transaction3ServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">Transaction3Service</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Transaction4Service transaction4Service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> StudentMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span> <span class="comment">//如果不存在事务,注释掉此行来表示</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">B</span><span class="params">()</span>&#123;</span><br><span class="line">        mapper.saveStudent(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;ZZZDC&quot;</span>));</span><br><span class="line">        transaction4Service.C();</span><br><span class="line">        <span class="comment">// int zdc = 1/0; //如发生异常用此替代</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Transaction4ServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">Transaction4Service</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> StudentMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span> <span class="comment">//传播行为会在这里操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">C</span><span class="params">()</span> &#123;</span><br><span class="line">        mapper.saveStudent(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;ZDDDC&quot;</span>));</span><br><span class="line">        <span class="comment">//int zdc = 1/0;  如发生异常用此替代</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">链接：https:<span class="comment">//juejin.cn/post/7032652904498462751</span></span><br><span class="line">来源：稀土掘金</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>传播行为</th><th>本文中的解释</th></tr></thead><tbody><tr><td>REQUIRED</td><td>如果 B 存在事务,则 C 加入该事务<code>(如果发生异常,则BC一起回滚)</code>;如果 B 不存在事务,则 C 创建一个新的事务<code>(B不回滚,如果C发生异常则只有C部分回滚)</code></td></tr><tr><td>SUPPORTS</td><td>如果 B 存在事务,则 C 加入该事务<code>(如果发生异常,则BC一起回滚)</code>;如果 B 不存在事务,则 C 以非事务的方式继续运行<code>(BC任何情况都不回滚)</code></td></tr><tr><td>MANDATORY</td><td>如果 B 存在事务,则 C 加入该事务<code>(如果发生异常,则一起回滚)</code>;如果 B 不存在事务,则 C 抛出异常.<code>(C直接报错,无事务B不回滚)</code></td></tr><tr><td>REQUIRES_NEW</td><td>如果 B 不存在事务,C 重新创建一个新的事务<code>(无事务B发生异常不回滚,有事C发生异常则C回滚)</code>;如果 B 存在事务,C 挂起 B 得事务并重新创建一个新的事务<code>(这是两个事务,自己部分有异常,则自己部分回滚)</code></td></tr><tr><td>NOT_SUPPORTED</td><td>如果 B 不存在事务,C 以非事务的方式运行<code>(任何情况都不回滚)</code>;如果 B 存在事务,C 暂停当前的事务并以非事务的方式运行<code>(B部分报错,则B部分回滚,C不回滚;非事务C部分报错,则都不会回滚)</code></td></tr><tr><td>NEVER</td><td>如果 B 不存在事务,C 以非事务的方式运行<code>(任何情况都不回滚)</code>,如果 B 存在事务,C 则抛出异常<code>(C报错,B因为异常回滚)</code></td></tr><tr><td>NESTED</td><td>和 REQUIRED 效果一样.</td></tr></tbody></table></div><p>作者：我也不会呀<br>链接：<a href="https://juejin.cn/post/7032652904498462751">https://juejin.cn/post/7032652904498462751</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 事务的传播行为以及在spring中的配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用java代码控制事务</title>
      <link href="/posts/46891.html"/>
      <url>/posts/46891.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>代码中控制事务的三种方式</p><ul><li>编程式事务：就是直接在代码里手动开启事务，手动提交，手动回滚。优点就是可以灵活控制，缺点就是太麻烦了，太多重复的代码了。</li><li>声明式事务：就是使用 SpringAop 配置事务，这种方式大大的简化了编码。需要注意的是切入点表达式一定要写正确。</li><li>注解事务：直接在 Service 层的方法上面加上@Transactional 注解，个人比较喜欢用这种方式。</li></ul></li><li><p>事务回滚的原因</p><p>在工作中，看过别人写的代码出现了事务不回滚的现象。当然，事务不回滚的都是采用的声明式事务或者是注解事务；编程式事务都是自己写代码手动回滚的，因此是不会出现不回滚的现象。</p><p>再说下声明式事务和注解事务回滚的原理：当被切面切中或者是加了注解的方法中抛出了 RuntimeException 异常时，Spring 会进行事务回滚。默认情况下是捕获到方法的 RuntimeException 异常，也就是说抛出只要属于运行时的异常（即 RuntimeException 及其子类）都能回滚；但当抛出一个不属于运行时异常时，事务是不会回滚的。</p><p>下面说说我经常见到的 3 种事务不回滚的产生原因：</p><ul><li>（1）声明式事务配置切入点表达式写错了，没切中 Service 中的方法</li><li>（2）Service 方法中，把异常给 try catch 了，但 catch 里面只是打印了异常信息，没有手动抛出 RuntimeException 异常</li><li>（3）Service 方法中，抛出的异常不属于运行时异常（如 IO 异常），因为 Spring 默认情况下是捕获到运行时异常就回滚</li></ul></li><li><p>如何保证事务回滚</p><p>正常情况下，按照正确的编码是不会出现事务回滚失败的。下面说几点保证事务能回滚的方法</p><ul><li>（1）如果采用声明式事务，一定要确保切入点表达式书写正确</li><li><p>（2）如果 Service 层会抛出不属于运行时异常也要能回滚，那么可以将 Spring 默认的回滚时的异常修改为 Exception，这样就可以保证碰到什么异常都可以回滚。具体的设置方式也说下。</p><ul><li><p>声明式事务，在配置里面添加一个 rollback-for，代码如下</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注解事务，直接在注解上面指定，代码如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor=Exception.class)</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>（3）只有非只读事务才能回滚的，只读事务是不会回滚的</p></li><li>（4）如果在 Service 层用了 try catch，在 catch 里面再抛出一个 RuntimeException 异常，这样出了异常才会回滚</li><li>（5）如果你不喜欢（4）的方式，你还可以直接在 catch 后面写一句回滚代码<strong>TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</strong>来实现回滚，这样的话，就可以在抛异常后也能 return 返回值；比较适合需要拿到 Service 层的返回值的场景。具体的用法可以参见考下面的伪代码</li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/** TransactionAspectSupport手动回滚事务：*/</span><br><span class="line">@Transactional(rollbackFor = &#123; Exception.class &#125;)</span><br><span class="line">public boolean test() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        doDbSomeThing();</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        //就是这一句了, 加上之后抛了异常就能回滚（有这句代码就不需要再手动抛出运行时异常了）</span><br><span class="line">        TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>几点注意事项:</strong></em></p><p><em><strong>1.接口中 A、B 两个方法，A 无@Transactional 标签，B 有，上层通过 A 间接调用 B，此时事务不生效</strong></em></p><p><em><strong>2.接口中异常（运行时异常）被捕获而没有被抛出。默认配置下，spring 只有在抛出的异常为运行时 unchecked 异常时才回滚该事务，也就是抛出的异常为 RuntimeException 的子类(Errors 也会导致事务回滚)，而抛出 checked 异常则不会导致事务回滚 。可通过 @Transactional rollbackFor 进行配置。</strong></em></p><p><em><strong>3.多线程下事务管理因为线程不属于 spring 托管，故线程不能够默认使用 spring 的事务,也不能获取 spring 注入的 bean 。在被 spring 声明式事务管理的方法内开启多线程，多线程内的方法不被事务控制。 一个使用了@Transactional 的方法，如果方法内包含多线程的使用，方法内部出现异常，不会回滚线程中调用方法的事务。</strong></em></p><p><em><strong>4.在@Transactional 注解中如果不配置 rollbackFor 属性,那么事物只会在遇到 RuntimeException 的时候才会回滚,加上 rollbackFor=Exception.class,可以让事物在遇到非运行时异常时也回滚</strong></em></p><p><a href="https://www.cnblogs.com/zeng1994/p/8257763.html">原文链接</a></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 使用java代码控制事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用注解和拦截器实现登录验证</title>
      <link href="/posts/38014.html"/>
      <url>/posts/38014.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、-LoginRequired-注解"><a href="#1、-LoginRequired-注解" class="headerlink" title="1、@LoginRequired 注解"></a>1、@LoginRequired 注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在需要登录验证的Controller的方法上使用此注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LoginRequired &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、MyControllerAdvice"><a href="#2、MyControllerAdvice" class="headerlink" title="2、MyControllerAdvice"></a>2、MyControllerAdvice</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyControllerAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(TokenValidationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResponse <span class="title function_">tokenValidationExceptionHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JsonResponse.loginInvalid();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ServiceException.class)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResponse <span class="title function_">serviceExceptionHandler</span><span class="params">(ServiceException se)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JsonResponse.fail(se.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResponse <span class="title function_">exceptionHandler</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> JsonResponse.fail(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、AuthenticationInterceptor"><a href="#3、AuthenticationInterceptor" class="headerlink" title="3、AuthenticationInterceptor"></a>3、AuthenticationInterceptor</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthenticationInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CURRENT_USER</span> <span class="operator">=</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果不是映射到方法直接通过</span></span><br><span class="line">        <span class="keyword">if</span> (!(handler <span class="keyword">instanceof</span> HandlerMethod)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">HandlerMethod</span> <span class="variable">handlerMethod</span> <span class="operator">=</span> (HandlerMethod) handler;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> handlerMethod.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断接口是否有@LoginRequired注解, 有则需要登录</span></span><br><span class="line">        <span class="type">LoginRequired</span> <span class="variable">methodAnnotation</span> <span class="operator">=</span> method.getAnnotation(LoginRequired.class);</span><br><span class="line">        <span class="keyword">if</span> (methodAnnotation != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 验证token</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">userId</span> <span class="operator">=</span> JwtUtil.verifyToken(request);</span><br><span class="line">            <span class="type">PLUser</span> <span class="variable">plUser</span> <span class="operator">=</span> userService.selectByPrimaryKey(userId);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == plUser) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户不存在，请重新登录&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            request.setAttribute(CURRENT_USER, plUser);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、JwtUtil"><a href="#4、JwtUtil" class="headerlink" title="4、JwtUtil"></a>4、JwtUtil</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">EXPIRATION_TIME</span> <span class="operator">=</span> <span class="number">2592_000_000L</span>; <span class="comment">// 有效期30天</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECRET</span> <span class="operator">=</span> <span class="string">&quot;pl_token_secret&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HEADER</span> <span class="operator">=</span> <span class="string">&quot;token&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER_ID</span> <span class="operator">=</span> <span class="string">&quot;userId&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据userId生成token</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateToken</span><span class="params">(String userId)</span> &#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(USER_ID, userId);</span><br><span class="line">    <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">            .setClaims(map)</span><br><span class="line">            .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + EXPIRATION_TIME))</span><br><span class="line">            .signWith(SignatureAlgorithm.HS512, SECRET)</span><br><span class="line">            .compact();</span><br><span class="line">    <span class="keyword">return</span> jwt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证token</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 验证通过返回userId</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">verifyToken</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(HEADER);</span><br><span class="line">    <span class="keyword">if</span> (token != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Map&lt;String, Object&gt; body = Jwts.parser()</span><br><span class="line">                    .setSigningKey(SECRET)</span><br><span class="line">                    .parseClaimsJws(token)</span><br><span class="line">                    .getBody();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry entry : body.entrySet()) &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">                <span class="keyword">if</span> (key.toString().equals(USER_ID)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> Integer.valueOf(value.toString());<span class="comment">// userId</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TokenValidationException</span>(<span class="string">&quot;unauthorized&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TokenValidationException</span>(<span class="string">&quot;missing token&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 使用注解和拦截器实现登录验证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用poi导出带有数据的模版</title>
      <link href="/posts/46835.html"/>
      <url>/posts/46835.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloadLjcjImportTemplate</span><span class="params">(String xianbie, String xingbie, HttpServletResponse response)</span> &#123;</span><br><span class="line">  <span class="comment">// 设置返回头</span></span><br><span class="line">  response.setHeader(</span><br><span class="line">    <span class="string">&quot;Content-disposition&quot;</span>,</span><br><span class="line">    <span class="string">&quot;attachment;filename=&quot;</span></span><br><span class="line">    + <span class="keyword">new</span> <span class="title class_">String</span>((<span class="string">&quot;路基u型槽沉降模版.xlsx&quot;</span>).getBytes(StandardCharsets.UTF_8), StandardCharsets.ISO_8859_1));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从库里查询数据</span></span><br><span class="line">  QueryWrapper&lt;TTzCjDmjcd&gt; qw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">  qw.eq(<span class="string">&quot;xianbie&quot;</span>, xianbie);</span><br><span class="line">  qw.eq(<span class="string">&quot;xingbie&quot;</span>, xingbie);</span><br><span class="line">  qw.eq(<span class="string">&quot;jcd_lx&quot;</span>, <span class="string">&quot;6&quot;</span>);</span><br><span class="line">  qw.orderByAsc(<span class="string">&quot;jcd_lc&quot;</span>);</span><br><span class="line">  List&lt;TTzCjDmjcd&gt; exportList = dmjcdService.list(qw);</span><br><span class="line">  <span class="comment">// 利用模版文件的输入流创建Workbook对象</span></span><br><span class="line">  <span class="comment">// 同时获取响应流</span></span><br><span class="line">  <span class="keyword">try</span> (<span class="type">Workbook</span> <span class="variable">wb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>(</span><br><span class="line">    Objects.requireNonNull(<span class="built_in">this</span>.getClass().getClassLoader().getResourceAsStream(<span class="string">&quot;template/ljuxccj.xlsx&quot;</span>)));</span><br><span class="line">       <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream()) &#123;</span><br><span class="line">    <span class="comment">// 对Workbook进行一些数据的写入</span></span><br><span class="line">    <span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> wb.getSheetAt(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; exportList.size(); i++) &#123;</span><br><span class="line">      <span class="type">TTzCjDmjcd</span> <span class="variable">item</span> <span class="operator">=</span> exportList.get(i);</span><br><span class="line">      <span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(i + <span class="number">1</span>);</span><br><span class="line">      <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> row.createCell(<span class="number">0</span>);</span><br><span class="line">      cell.setCellValue(item.getJcdBh());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将workbook写入到响应流</span></span><br><span class="line">    wb.write(out);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// controller层直接调用这个方法，不需要写额外的代码</span></span><br><span class="line"><span class="comment">// 前台通过window.location.href = controller层的地址的方式实现文件下载</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 使用poi导出带有数据的模版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整合druid不支持批量更新的问题</title>
      <link href="/posts/741.html"/>
      <url>/posts/741.html</url>
      
        <content type="html"><![CDATA[<p>轻骑兵的解决方式</p><p>注意 url 后面多了个 allowMultiQueries=true</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">###################  mysql配置  ###################</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://123.123.122.138:3310/dtjc_sbgl_dev?autoReconnect=true&amp;rewriteBatchedStatements=true&amp;useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;serverTimezone=GMT%2b8&amp;allowMultiQueries=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">123456a?</span></span><br><span class="line">    <span class="attr">db-name:</span> <span class="string">dtjc_sbgl_dev</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">log4j,mergeStat</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="comment">#支持批量更新重点就是这里</span></span><br><span class="line">    <span class="attr">filter:</span></span><br><span class="line">      <span class="attr">wall:</span></span><br><span class="line">        <span class="attr">config:</span></span><br><span class="line">          <span class="attr">multi-statement-allow:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><hr><p>网上搜到的解决方式</p><p>spring boot 集成 MyBatis，集成 Druid 批量更新报错，</p><p>原因：Druid 的防火墙配置(WallConfig)中变量 multiStatementAllow 默认为 false 解决方案：</p><p>开启 Druid 的防火墙配置(WallConfig)中变量 multiStatementAllow，把 WallConfig 中的 multiStatementAllow 设置为 true 即可</p><p>集成 Druid 时关于 DruidDataSource 配置如下:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourcesConfig</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * druid初始化</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Primary</span> <span class="comment">//默认数据源 在同样的DataSource中，首先使用被标注的DataSource</span></span><br><span class="line"><span class="meta">@Bean(name = &quot;dataSource&quot;, destroyMethod = &quot;close&quot;)</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DruidDataSource <span class="title function_">Construction</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">DruidDataSource</span> <span class="variable">datasource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter</span></span><br><span class="line">    List`&lt;Filter&gt;` filters = <span class="keyword">new</span> <span class="title class_">ArrayList</span> `&lt;Filter&gt;`();</span><br><span class="line">    <span class="type">WallFilter</span> <span class="variable">wallFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WallFilter</span>();</span><br><span class="line">    filters.add(wallFilter);</span><br><span class="line">    datasource.setProxyFilters(filters);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> datasource;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean(name = &quot;wallFilter&quot;)</span></span><br><span class="line"><span class="meta">@DependsOn(&quot;wallConfig&quot;)</span></span><br><span class="line"><span class="keyword">public</span> WallFilter <span class="title function_">wallFilter</span><span class="params">(WallConfig wallConfig)</span> &#123;</span><br><span class="line">    <span class="type">WallFilter</span> <span class="variable">wallFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WallFilter</span>();</span><br><span class="line">    wallFilter.setConfig(wallConfig);</span><br><span class="line">    <span class="keyword">return</span> wallFilter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean(name = &quot;wallConfig&quot;)</span></span><br><span class="line"><span class="keyword">public</span> WallConfig <span class="title function_">wallConfig</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">WallConfig</span> <span class="variable">wallConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WallConfig</span>();</span><br><span class="line">    wallConfig.setMultiStatementAllow(<span class="literal">true</span>);<span class="comment">//允许一次执行多条语句</span></span><br><span class="line">    wallConfig.setNoneBaseStatementAllow(<span class="literal">true</span>);<span class="comment">//允许一次执行多条语句</span></span><br><span class="line">    <span class="keyword">return</span> wallConfig;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后数据库连接后面需要加上 allowMultiQueries=true,上面解决的是 Druid 的拦截， 而在数据库上的配置解决的是数据库服务层面的拦截。 url: jdbc:mysql://192.168.1.9:3306/p?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true 到此结束。</p><hr><p>另外：</p><p>spring boot 开发环境下启动无异常，批量更新也成功了，但是在 tomcat 下运行启动会报错<br>异常提示如下：Unable to register WallConfig with key wallConfig; nested exception is InstanceAlreadyExistsException:com.alibaba.druid.wall:name=wallConfig,type=WallConfig</p><p>解决办法：在 SpringBoot 项目中配置文件加上 spring.jmx.enabled=false</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 整合druid不支持批量更新的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取resouces下的文件的输入流InputStream</title>
      <link href="/posts/64112.html"/>
      <url>/posts/64112.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;/excel/1_20210709杭州地铁6号线平稳性_2021_08_28_005001_5S.xlsx&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里io流会自动关闭，无需加finally</span></span><br><span class="line"><span class="comment">// try (InputStream is = new FileInputStream(filePath)) &#123;// 读取绝对路径文件</span></span><br><span class="line"><span class="type">ClassPathResource</span> <span class="variable">classPathResource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(filePath);</span><br><span class="line"><span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> classPathResource.getInputStream()) &#123;<span class="comment">// 读取resources下文件方式1（适用于静态)</span></span><br><span class="line"><span class="comment">// try (InputStream is = this.getClass().getResourceAsStream(filePath)) &#123;// 读取相resources下文件方式2(不适用于静态)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ....流对象各种处理代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/08/qkzm7cD9hfsMKwE.png" alt="202110111450956.png"></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 获取resouces下的文件的输入流InputStream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件下载与预览</title>
      <link href="/posts/64088.html"/>
      <url>/posts/64088.html</url>
      
        <content type="html"><![CDATA[<h2 id="通常的文件下载方法"><a href="#通常的文件下载方法" class="headerlink" title="通常的文件下载方法"></a>通常的文件下载方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/downLoadFile&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downLoadLineStruImportTemplateFile</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建缓冲区</span></span><br><span class="line">    <span class="type">byte</span> buffer[] = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];<span class="comment">// 缓冲区大小1k</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 重点就是获取输入流和输出流，还有设置请求头</span></span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResourceAsStream(<span class="string">&quot;template/lineStruImportTemplate.xlsx&quot;</span>);</span><br><span class="line">         <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream()) &#123;</span><br><span class="line">        <span class="comment">// 设置头部信息</span></span><br><span class="line">        <span class="comment">// 文件类型application/octet-stream</span></span><br><span class="line">        response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);</span><br><span class="line">        <span class="comment">// 文件名称</span></span><br><span class="line">        response.setHeader(</span><br><span class="line">            <span class="string">&quot;Content-disposition&quot;</span>,</span><br><span class="line">            <span class="string">&quot;attachment;filename=&quot;</span></span><br><span class="line">            + <span class="keyword">new</span> <span class="title class_">String</span>((<span class="string">&quot;线路结构导入模板.xlsx&quot;</span>).getBytes(StandardCharsets.UTF_8), StandardCharsets.ISO_8859_1));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环将输入流中的内容读取到缓冲区当中</span></span><br><span class="line">        <span class="keyword">while</span> ((len = in.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//输出缓冲区的内容到浏览器，实现文件下载</span></span><br><span class="line">            out.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件的下载：浏览器带进度显示"><a href="#文件的下载：浏览器带进度显示" class="headerlink" title="文件的下载：浏览器带进度显示"></a>文件的下载：浏览器带进度显示</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;文件路径&quot;</span>;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">    response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);</span><br><span class="line">    <span class="comment">// 文件名称</span></span><br><span class="line">    response.setHeader(</span><br><span class="line">        <span class="string">&quot;Content-disposition&quot;</span>,</span><br><span class="line">        <span class="string">&quot;attachment;filename=&quot;</span></span><br><span class="line">        + <span class="keyword">new</span> <span class="title class_">String</span>((file.getName()).getBytes(StandardCharsets.UTF_8), StandardCharsets.ISO_8859_1));</span><br><span class="line">    <span class="comment">// 这里正确设置，浏览器下载时就会显示进度</span></span><br><span class="line">    response.setContentLengthLong(file.length());</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file)) &#123;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = fileInputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            outputStream.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里可关可不关</span></span><br><span class="line">        <span class="comment">// 不建议关，响应结束时，Servlet 会自动将 out 关闭</span></span><br><span class="line">        <span class="comment">// outputStream.flush();</span></span><br><span class="line">        <span class="comment">// outputStream.close();</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件的预览（此时浏览器不会下载文件，而是会尽量渲染文件，比如音视频文件播放，图片、pdf会展示等"><a href="#文件的预览（此时浏览器不会下载文件，而是会尽量渲染文件，比如音视频文件播放，图片、pdf会展示等" class="headerlink" title="文件的预览（此时浏览器不会下载文件，而是会尽量渲染文件，比如音视频文件播放，图片、pdf会展示等"></a>文件的预览（此时浏览器不会下载文件，而是会尽量渲染文件，比如音视频文件播放，图片、pdf会展示等</h2><p>文件的预览和上面的代码基本一致，<br>但是去除设置头部信息的两行代码，<br>同时根据文件的类型设置不同的ContentType</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/downLoadFile&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downLoadLineStruImportTemplateFile</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建缓冲区</span></span><br><span class="line">    <span class="type">byte</span> buffer[] = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];<span class="comment">// 缓冲区大小1k</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 重点就是获取输入流和输出流，还有设置请求头</span></span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResourceAsStream(<span class="string">&quot;template/lineStruImportTemplate.xlsx&quot;</span>);</span><br><span class="line">         <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream()) &#123;</span><br><span class="line">        <span class="comment">// 设置头部信息(文件的mineType)</span></span><br><span class="line">        <span class="comment">// pdf就设置application/pdf</span></span><br><span class="line">        <span class="comment">// response.setContentType(MediaType.APPLICATION_PDF_VALUE);</span></span><br><span class="line">        <span class="comment">// jpg就设置image/jpeg</span></span><br><span class="line">        <span class="comment">// response.setContentType(MediaType.IMAGE_JPEG_VALUE);</span></span><br><span class="line">        <span class="comment">// png就设置image/png</span></span><br><span class="line">        <span class="comment">// response.setContentType(MediaType.IMAGE_PNG_VALUE);</span></span><br><span class="line">        <span class="comment">// 使用工具类(最好是在文件上传的时候读取文件的mineType，保存在数据库里，然后预览的时候从数据库里查找)</span></span><br><span class="line">        response.setContentType(getMineType(<span class="string">&quot;lineStruImportTemplate.xlsx&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//循环将输入流中的内容读取到缓冲区当中</span></span><br><span class="line">        <span class="keyword">while</span> ((len = in.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//输出缓冲区的内容到浏览器，实现文件下载</span></span><br><span class="line">            out.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">      * 文件的mineType可以根据Apache Tika（一个java工具集）来获取</span></span><br><span class="line"><span class="comment">      * &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">      *   &lt;groupId&gt;org.apache.tika&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">      *   &lt;artifactId&gt;tika-core&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">      *   &lt;version&gt;2.7.0&lt;/version&gt;</span></span><br><span class="line"><span class="comment">      * &lt;/dependency&gt;    </span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 已知文件名，获取文件类型，在某些情况下比通过字节数组准确，例如使用jar文件时，通过名字更为准确</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mineType 无法识别时会返回“application/octet-stream”</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMineType</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> TIKA.get().detect(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在拥有文件和数据的情况下，最好使用此方法，最为准确</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 文件内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mineType 无法识别时会返回“application/octet-stream”</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMineType</span><span class="params">(<span class="type">byte</span>[] data, String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> TIKA.get().detect(data, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 文件下载与预览 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态加载服务器上的图片</title>
      <link href="/posts/8682.html"/>
      <url>/posts/8682.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/loadImg?path=&#x27;xxx&#x27;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * IO流读取存在服务器上的图片</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/loadImg&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadImg</span><span class="params">(<span class="meta">@RequestParam(&quot;path&quot;)</span> String path, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//这里省略掉通过id去读取图片的步骤。</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);<span class="comment">//imgPath为服务器图片地址</span></span><br><span class="line">    <span class="keyword">if</span> (file.exists() &amp;&amp; file.isFile()) &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            out = response.getOutputStream();</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];<span class="comment">// 一次读取1k</span></span><br><span class="line">            <span class="keyword">while</span> ((count = in.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                out.write(buffer, <span class="number">0</span>, count);</span><br><span class="line">                out.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line">                in.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (out != <span class="literal">null</span>) &#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 动态加载服务器上的图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>向静态类注入bean</title>
      <link href="/posts/50567.html"/>
      <url>/posts/50567.html</url>
      
        <content type="html"><![CDATA[<h2 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DtjcProjectGeneralReportUtil</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IDataAnalysisService dataAnalysisService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> IDataAnalysisService staticDataAnalysisService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        staticDataAnalysisService = dataAnalysisService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//  这里是静态方法，该方法请调用静态bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getDtcjGeneralReportTestTaskId</span><span class="params">(String projectId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">TestTaskId</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        TestTaskId = staticDataAnalysisService.getReportDcjh(projectId);</span><br><span class="line">        <span class="keyword">if</span> (TestTaskId == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(TestTaskId)) &#123;</span><br><span class="line">            List&lt;Map&lt;String, String&gt;&gt; list = staticDataAnalysisService.getFirstDcjh(projectId);</span><br><span class="line">            <span class="keyword">if</span> (list == <span class="literal">null</span> || list.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                list = staticDataAnalysisService.getFirstDcjhNoData(projectId);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (list != <span class="literal">null</span> &amp;&amp; list.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                TestTaskId = list.get(list.size() - <span class="number">1</span>).get(<span class="string">&quot;id&quot;</span>).toString();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> TestTaskId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方式2（未经测试）"><a href="#方式2（未经测试）" class="headerlink" title="方式2（未经测试）"></a>方式2（未经测试）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUser</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        Book.user = user</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Spring </tag>
            
            <tag> 向静态类注入bean </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取相对路径下的配置文件信息</title>
      <link href="/posts/7685.html"/>
      <url>/posts/7685.html</url>
      
        <content type="html"><![CDATA[<p><strong>路径位置如下</strong><br><img src="https://s2.loli.net/2023/03/08/KYTOrVhgqFpHJa1.png" alt="202111091739023.png"></p><p><strong>配置文件信息</strong></p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">ureport.disableFileProvider</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">ureport.debug</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">ureport.disableHttpSessionReportCache</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ureport.fileStoreDir</span>=<span class="string">D:/hussar/hussar_v8/hussar-web/src/main/resources/ureportfiles/odms</span></span><br><span class="line"><span class="attr">filePath</span> = <span class="string">D:/DevelopKit/FILE</span></span><br><span class="line"><span class="attr">openOfficePath</span> = <span class="string">D:/Program Files (x86)/OpenOffice 4/program/soffice.exe -headless -accept=&quot;socket,host=127.0.0.1,port=8100;urp;&quot;</span></span><br><span class="line"><span class="attr">pdfPath</span> = <span class="string">D:/PDF/</span></span><br><span class="line"><span class="attr">fpPath</span> = <span class="string">D:/fenpian</span></span><br><span class="line"><span class="attr">pythonPath</span> = <span class="string">D:/pythoncode/</span></span><br><span class="line"><span class="attr">dataReaderName</span> = <span class="string">DWDataReaderLib64.dll</span></span><br></pre></td></tr></table></figure><p><strong>代码示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jxdinfo.hussar.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> PropertiesUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 获取文件的配置项, 返回配置文件对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Zhangyuhan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/11/9</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertiesUtil</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> getProperties();</span><br><span class="line">        System.out.println(properties.get(<span class="string">&quot;filePath&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Properties <span class="title function_">getProperties</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">// 使用ClassLoader加载properties配置文件生成对应的输入流</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> PropertiesUtil.class.getClassLoader().getResourceAsStream(<span class="string">&quot;ureport.properties&quot;</span>);) &#123;</span><br><span class="line">            <span class="comment">// 使用properties对象加载输入流</span></span><br><span class="line">            properties.load(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 获取相对路径下的配置文件信息 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速搭建v2ray</title>
      <link href="/posts/47358.html"/>
      <url>/posts/47358.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="709c27661cc766bb63f4e5a3f7052258588046709d9f5053b572b37806710873"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
          <category> v2ray </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> v2ray </tag>
            
            <tag> 快速搭建v2ray </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>检查文件是否存在</title>
      <link href="/posts/1906.html"/>
      <url>/posts/1906.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载文件,传入完成路径，先检查文件是否存在，如果存在就下载</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">path</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">downloadFileWithPath = <span class="keyword">function</span> (<span class="params">path</span>) &#123;</span><br><span class="line">  $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="title class_">Hussar</span>.<span class="property">ctxPath</span> + <span class="string">&#x27;/checkFileExist&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">async</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      path</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">500</span>) &#123;</span><br><span class="line">        <span class="title class_">Hussar</span>.<span class="title function_">valid</span>(res.<span class="property">msg</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果文件存在，那么就下载文件</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;/downLoadFile?path=&#x27;</span> + path</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">error</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title class_">Hussar</span>.<span class="title function_">valid</span>(<span class="string">&#x27;查询文件资源失败&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查文件是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/checkFileExist&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">checkFileExist</span><span class="params">(String path)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">                <span class="keyword">return</span> ReturnBodyUtil.returnError(<span class="string">&quot;下载所需的文件不存在&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> ReturnBodyUtil.returnSuccess(<span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ReturnBodyUtil.returnError(<span class="string">&quot;下载所需的文件不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> ReturnBodyUtil.returnError(<span class="string">&quot;查询文件路径失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 检查文件是否存在 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openFeign的全方位简单讲解</title>
      <link href="/posts/52837.html"/>
      <url>/posts/52837.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/agonie201218/article/details/121154769">OpenFeign 全方位讲解_Young 丶的博客-CSDN 博客_openfeign</a></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringCloud </tag>
            
            <tag> openFeign的全方位简单讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>toSee</title>
      <link href="/posts/30134.html"/>
      <url>/posts/30134.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0d0fa43be681545c0e79664512ba56ee5a584bd061ddb9d3822572f53ab92253">0783c7a821e71906579a5c8fae0b5765f7d19a65d5d7adf1d9fc89456874fb34f858a876b23a627e2727fe73d1bef0a9153a8fe8f680893be708c51b4e5c3cda6ad26904979e981dcd28750d599ea9765d2ef7ea6874f633d8d6d070435ad3abc7c93ad533f91f32ddd0908fe9f9e86e17400988b1a37f1eedf4d1f76e52b433f5e6ca2d48608c8446546ff4c7d19ef45cb419326e3cfb1a60f14825f2da50c557cc4e832097a2a96097223e78a6932011c025c7dd410571c90415ae15d199fd4a1dba44a75d9891f515852263b18e0a531131f5563b6716e394d6d7b84c471d70388a822b85a1e689e0405d57a5456ba8d56cfac28968e6b871b3daa44d6158840e5c6855a514b3fc95755b4c434da902791de15fd9b79013a071bfa4ad51b0a6d3dff6799da8a93cb7deed739057f9c4f2b5e9b977bab9640452ee7e53ba1cda29f720f7b0ed6e59345e6fff3e676f0e4a1852611ecddbc42e396e9f877b37e84651e463658238a0b5f0629e9ee99a6b8af5b485ac6180dc5053b5eb7078fe9fb64a26354204f3c10182e9f702fc696e2b813e364146e412391d6e35c6824b3a1e64adcfcf736909bd4cf454c3d08f976ca53074414a4fe33205b737363edb061a1d8398d9837a0371cdf71407c775322ad9b6e46e4804aafd4ae42e61209736c42c881366db53e9010fbdc248fca1cd1384e91f5bff7b05798d71bf1db2bb8931873797778b94a89d88cc2fa47e8a58e5948e193d4f727ce6d0714636747b97d2e3812d317829c244100845cca6e6c6d448ee8cfaa59f028cf67a6e8ba483232850fee658ee2b7d675659da9de39d9f02f09ceb819690963c073ead2438a0cadbf33a529ab65c55e121aaf7d67137ee504addc58c0dc5d29714e97212d363abee2516fa459391b009d25a8d450dea1c89ba3244ffaea25aaa4bcdaa431215a7f6cd67d42f5650eb4e39f4a6535ea569402126298b1f1274080fe0a7d0833d07fb15d57d4299ca0423a6f0465f4c5714452a31e1d2c43596ef5970f8bf5a777cdf1ba1b1aea54908fa7306c4bd712e2a83e015af47c07104c470132b168ec93d5ff2451ae88c7304d04dc75c7ae4e4ef57110e339971341b2f3def129933dc7e26296d6d206ce0851c46dd6ec9b83b58b980ed2798253aeba30744a25dac711c08bef757e9da5b6fdddf86f875b630d11c5d6aa0dc80d2ad7315117cc18141d50b552509481ea4308401fe80ec1b0600ebbab69870c4e65b4ca63710d997a423bd4f8d7852dd1d61760a97fe831b101822b81801d4200bbde6defb77fe715ee1cff7690c50bb15cf473bd48e1a7a22bc775949810196278b8fd48f774ed9193d2e1ea66128e3f5356a2b930a5d441b2743fdf8308a8405d0c39b507eef320fbe14c1e1c36b475af3e5613bc669f15fbdbd17e3074fac76da0425773d4278c1343a24434e2dfd3dfbe28a11116df62052f0f13d0cd3c9bbb30087096421a9a7bbe57668ea975e86fcc49c4c5d17bf9414eae282d55474393d21a326bacf741976d92a38c64a04b161b50e3e16fc2b4da04959b6c467810e766b88f36313ba5aba8bfd812cca11d2edd75ebb2c3c915830c4cd13cdc34eaf8fa47ce992caa9ee05ac6113d0eeb06ce9eed31867334484f9b38a64b6859919313570fb6daf936ff4fb5bffb34804a2b930150114ddbb96caab5e87e9610d2de6e28a87f5d803d94c4f1f316a8230658a89a34c03e5c3294a0b94194a48f442c8244d1db8d3102a6867132b6dc8a7de0c807c66f9bc6d2c7b9b1f89b5acc45b86c42aa2b612088fef19267b2aaef811d1a493844bda27b94e089451582c28cd2a0e1b2100408d84de7f37282ebbffcba5d2712d4a82fa15bda8fe10abb32ee475db9b5f105aaa3a4d91efcaaf41e37bea8a4c128ac60acd6fceeeaf4f69d1d89ffb46b0c730f528dd8704951ba752a3d0ba1ab1f208a8441ad8b96311b5021d94f58fb2d6fa5aff29a882fd9e8a32bfa044400cace1e5c3d11159ea78ce1c652c916bd4c4e09039d0aada0ff72a65c5ba43e494cb2cb7e6f186da7555feb83d7c0289565013910fa428256374a102d5a225d9ef3ed208ce042327fa16c207aebecd1f208842f18f110087d936cc9d8a7c49ee20afc67a234ce5381b627f43292ce8ed982bdc8ff39eb8d52f85948b7680535e5d6d2b7b5c146254b6c0841f8b2d986742b62c78287214f375c56304ca4f7b8dccd591406ca9792fcbea83cf60dbbd4c130b89d738f0921dd502ba7584290243b0920d827822160a6f792713ccb76d8c999ac8a2f298eec1b363ea4c462ea66bca5ab7355c4d67183988adffc41f0fce0e31f92d614dc2077e99bae65c7769ecfc3da912c58758a4856200b361d8091355e5e79f2dda3c1c95972ca3f841264081b7001f0815c34d8a035d3d3c980eada63a50ad06a5d09e12865f638f26a517deac57cd3ffc1a87dde296e330f0680fc7f45efd9cb3e5a3e340c7a9eee79f4fa8f86bf4a290a643ef8df0320d9983047491cb3c9829f1d8a822c487436865752df08a85ebe5d48e2c11e1034a4b2e40b3dbf1eb471dba64e7fa64bac4d277e49db332df15d4877288b1c0dcbe7ef8fbc0fd004d77e45bf3d6cc0475863cc284c67a2c8e7c1c369af6caabb2052eac553935172953d5846312b88593e57818d1942c7abcca753b1024ca3f66c8dd21bb43ef19aba52b85aca6c7af53d65105a847cf0b04af5ecf8f019a7d9575c3b8e5569285449298a3d0d28da719a756ca386562850d36780966925dd67478cba990af2732d1da717a12fccf73416eb68d458b6ebd91ae2a723d3caf7ad9ea09bcc667e9302c793c73ee054edf5906cb1a1cdb26f3eb6c0b974a477a3e4f04b2d53d6af71cb902cfe842bcea64cfbe62dd09cbf4f5fa692b4dad80f459c6477e24b6229604dd8531fea5dcbc6665ef9edf7511257a05f80e4b7bfdf59432fe959e8ab449947009bf90948ebc7c89384b0268060fee5a8ae8ab811dfe6e7219decc9b44de705cdc577693c56310e007332b2a3f335f055a52f68e84d73e9e9837eec29e5830b0e48420fac672bfc5bea4a59cdfc83769bc6d3787b5465e20cd5bed79250f9bf769efa70bfeab38763e2d62300ff7608675ed64f8d54cecf2f190463f67ed176e7fa1acf843716cd339ebddaaca168be6a51067621acafa44a441828fd153d1039a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
          <category> todo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> todo </tag>
            
            <tag> toSee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启gzip配置</title>
      <link href="/posts/2714.html"/>
      <url>/posts/2714.html</url>
      
        <content type="html"><![CDATA[<p>配置示例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">        listen 9005; ## nginx监听端口号</span><br><span class="line"></span><br><span class="line">        #开启gzip</span><br><span class="line">        gzip  on;</span><br><span class="line">        #vary header支持，该选项可以让前端的缓存服务器缓存经过gzip压缩的页面</span><br><span class="line">        gzip_vary on;</span><br><span class="line">        #设置允许压缩的页面最小字节数，页面字节数从header头的Content-Length中获取，默认值是0，不管页面是多大都进行压缩，建议设置成大于1K，如果小于1K可能会越压越大</span><br><span class="line">        gzip_min_length 612k;</span><br><span class="line">        #压缩缓冲区大小，表示申请4个单位为16K的内存作为压缩结果的流缓存，默认值是申请与原始数据大小相同的内存空间来存储gzip压缩结果</span><br><span class="line">        gzip_buffers 128 128k;</span><br><span class="line">        #压缩比率，用来指定gzip压缩比， 1：压缩比最小，速度最快；9：压缩比最大，传输速度最快，但处理也最慢，也比较的消耗CPU资源</span><br><span class="line">        gzip_comp_level 9;</span><br><span class="line">        #用来指定压缩的类型，text/html 默认是会被压缩的，所以不指定也可以。</span><br><span class="line">        gzip_types text/plain text/javascript application/javascript application/x-javascript text/css  application/json  application/x-httpd-php image/jpeg image/png image/gif image/x-icon application/xml;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                alias /usr/local/webserver/nginx/project/crtoms/;</span><br><span class="line">                index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> nginx </tag>
            
            <tag> 开启gzip配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反向代理后端项目并配置跨域</title>
      <link href="/posts/60598.html"/>
      <url>/posts/60598.html</url>
      
        <content type="html"><![CDATA[<p>后台服务占用端口为 9003，用本地的 9004 代理 9003 并且配置跨域</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen 9004; ## nginx监听端口号</span><br><span class="line">    location / &#123;</span><br><span class="line">            proxy_pass http://127.0.0.1:9003;</span><br><span class="line">            # 允许 所有头部 所有域 所有方法</span><br><span class="line">            add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;</span><br><span class="line">            add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;*&#x27;;</span><br><span class="line">            add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;*&#x27;;</span><br><span class="line">            # OPTIONS 直接返回204</span><br><span class="line">            if ($request_method = &#x27;OPTIONS&#x27;) &#123;</span><br><span class="line">                return 204;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> nginx </tag>
            
            <tag> 反向代理后端项目并配置跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>收藏</title>
      <link href="/posts/13230.html"/>
      <url>/posts/13230.html</url>
      
        <content type="html"><![CDATA[<p>Nginx 一网打尽：动静分离、压缩、缓存、黑白名单、跨域、高可用、性能优化…<br><a href="https://mp.weixin.qq.com/s/YhFaKTg5ZbzM8mkhclUnvQ">https://mp.weixin.qq.com/s/YhFaKTg5ZbzM8mkhclUnvQ</a></p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> nginx </tag>
            
            <tag> 收藏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>toDo</title>
      <link href="/posts/49496.html"/>
      <url>/posts/49496.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="8d47a5377b44d26ba903430ad97b3e526d041052cea27851781e0d705380c1e0">0783c7a821e71906579a5c8fae0b5765f7d19a65d5d7adf1d9fc89456874fb345fd45bf6a59111d263a347903155debee7cf4fc37800f9d5814590dea63ef1bb41e2b6a18a5bab40295246dd893a49fad09f72ba83632a8a1bfd512dfa78fa84c8c9813e2006ea100c4895893d762f78100f35dbc90a40eae3d9a708c39d682e9b95cde37cef7fad0df21c46f0205d4fe550bd8f64ff35d4190ed200052fb825df5897f41b858b222c05814e03fcc0aff1148a7e34c407342108f3d4b4f4081a7fdeb1ff1d848b52158c1db1ba305c42d4dcff7b63636e83fb300cbb9390245b45ea6aacaf02dc5e55a9db196c9f0410022dfbc4a461aa1e8114c72d1d65f69efd05b18c42b643cad9ab1067ed7604a7e61cbfea03e7a930403d48836274a1cf9a6172c01b14ed8800bcb01f910d83586aadce65f9bea7a442eb98bfb9f9655ffff4c0d661997976d01963170907d1ab91329e056ea18a0e938053d5086f4e898f2432024d3fda62970b0c5d4ec71853674df9a1bbcb9387cfaecdba56137ab37e3d9dbe5e5938487d9547b242628705572ce3a4490f0553d39689095fe9f2228ce57aa5156c537b0fa90b9f7e16816027c3d121df7630c029822b1327f0dad3c5b86968c4848cc008fc27062a0ffbe11f962a2f6f3f165c3c12430e6a201382e386fabf0ed7cfd5fc37cecba87c06b20bf42e5c97d433d6ad1da7b612218b6bdd04f56bef2ab3986302a6db3ae9fc332ec2c95dd4612b3a8ece33c738bdf2806758e0b713cb43ff91d11ca58bbbc0f11b1848ce2540af106784bc456470bce9a4fc2046c1612dcdeedeef0cdc965e6d2f48d03af7ba7e51ac7cc5ccd20b0b043f92a4c486727635cced28afa782c0c61b43e8d940bb4d4ea04c9439df7ce74431b928f2e1f969d66ed0831b8b8fd2b5ec1d7c81f7ea705d2358114cbc520882bc684a25ca7142e5fe0d0d898a520df3e7a6ba532ff6845e39891ad91ff515453f24baeb8f717f0c5111151e67844a3e31f993b3d499ff97fc9a010140e375fbe29be8714f59597b378176b8bf32a50d71ca6b2057af7cdf9aa22267b1c3733d25045bc9b59e23ba05f08ae56236ceffac497039f89f9ada17edaf3023cb61b796f609c8a4054e576b6e028609f477664d5b8cc8db0a0475e375818b9cc627e2437101f3e1baa5c231b29d3e2ed510156e5fd639fc6fd4037cacf1012ab2d79424d7721d223bf0892e5ba16ab5728fa327983980479069e56142fb4c1d268734121ed975a1d9cfd05a9911677fc0ecdf8752fcb4a24c23923b9308bc7c1b2c11cd65c49c023190b5c5d36094094b93c92fba7bfee09b78eee89c03932c59fb85c364f7f348afeefe46c6b1beae8c4e26fdbcb918757e0e3d9a49ed8850e3736af6a78ae88c1ec6a6243fb88bbc4df563779a6d7b5196479f66e8bc3cc535d69bf511648c0946bb8e0baddadfe1b2ca43b0303566e1f2a68f1a2f602b6cbab0cf043796ef1bdd3493a480567fcb246120ef4def25c24d81e4c937f8e7ab45653862570a0aec11cea02c79bae1a8652241691d65781532701137fb7172f1e1af369291198ccdff15da3c516643ad7da1eb4d1a468d270cd50a12d1a409632a6ec2def5df96db9ea5f811e597ceff1296637c74855b7191734f09a8d1864792a32e01ea69d9b01f9a02b1f900bf7a7bc57a791fc08a40343b90842a9c9a5880562bd82b3463d0ad28a5ac631c02f20f2992b8cce95ae2ad04425d108b156e3db9d0003836a2d4fe2c29fbca86468a3f3b697494f6da507a0f0b0a196a458302e69da5c1114822355b97f6577fcfa91025651912f750d6b31ead75ecb107c1e0df4ebd038540f16e1ada4f9b40026e4bde1837b51a684f8c478a3cb84ac53f4bb104575dccefc2762fb75c05068f0472b997a940053529a8cbc1498b3d6a983ea3f36b9776fdcba26e04720758c38e4bfecc363d475954c3abc145a5e70c879736970afcff4e39ba74caa70356d55673d7b8d9a8b7f9dd46239fb90aa64c8ee20ad6992271553036fef292c24bb0f60dd827f73290a03da8c80b8e5e6236b2b30db5fac05a9780423a60bae8e54bcff6894d5dfd8792b6c25b3228eb242293281bfb8845aa104ad98a8e7cb4d9f99e0251f412e0c721d43a0369cef7d91e461e33b4eac62e83fb007f477b4d27bd4e1f159324004053b2344d35faca0b24b217063d5160dc584b9c4e2aac804be2627c195ad38a67f589d036d527f038b6e500fabe1bd6e58fe390dc3e849fe57d856e44190f1a1ad28405516803ed34aaa1f080fae5397ccc8ac0b582176ec916793a0bd65c0a1b5f1e507e9608367ad1a272369398f737b97a3b3eecd2931aba65a2da5b65437c31662f0afd801ce5f5416f0465441c726db792b1f6be37f44ff2d3cf17071de996d734d8f2dc7900aa1aeff7f940e6d066c8ea1c10d07f443c45923669dba8ec3ba8facdf4b732ef74bf6c7ca78f9d63f0b73b15be03bc44d3a5643e9b9e6933c01a88b68c25ab92e9c7a7ccd6af63569f765e6739998721ca0b758fdb93848a3587888c3efe241c73183c82d42de8da465ccdf68d03b488540abd2f1bd5c1804af815f8a16e6ca317bd74ff1f522ae2756d4a9074fcf070167f68baa750b2b25c24776d1fc8323b303438d15d75dd07eab05e35b99ec2ecc5a868177331048e43ac7040a47d22a0c430190b9fba6df67fbd36573e8180a803adb242e92dc640219a3b06fcb43294952beea386d70350a322471100a49086bd7831811fdabc098b5ab7c4faa9bd03aa1d25a2f751890854425fe3d09333dd55e701954302ef141677b5ab33e8ee62e056b25703a29912d61565dcaa6fdae2ba758bf0cee2543815c54cffd897ff620b8b83283f8ae9440f9b8f48a7d1f8cf3f389f10c073620b080df260c9096357b870796654f7c750a0af3fd27e4d925a08248023c924eaff7bcb48423ea00c6a7871acc9754cdd5697e278c0a74c1f52ca8eb90e9798edf64f53fdd1169cf4d56da69c3eb282dd09fd1fcf5802ef969de926a8918754e2ca762494132a75da7be8bb1f19bcd8d47fda54a2a857db0ffa434c9ef63f75a78b907724d0a570192658a677f8bd7b44d25fc2a2b308be426b787d6c794a5b3e9c174bccae9384a6a544b86859d63ddf342bc7b12505791b01f9994609a4721642a7505e76727e8d56688d14264af46f844bca8ac06d432ee484a303ff61caa0ff0c4448eed87bf7e50f50b67dcb295e6758d351adfdb9da890eb0b384319a70264ab88189ab30d016e8de31c711947409ebdff84717563af594b34610bbeb18c5dce503999d740492b7e2f78e0ee51e5b8cd114f61d5c501bbf3fd5863bed5a3a929ce174acc82b09b2e9960fa6c5ef37af7e4808454ec80091399cd006b1b391bc0c78dd9fc624b111d642891c3f60ea586b2a9fcee6af9fe06dd23d4c5c46a8410814b316eca9ced780f077a0b68d1f6df96ee492dd66f31ab7fec029b7d0c3b0cbfcc8c5d0cbc152a891106bf2bb43aa823366ad7a8e2a27b8d18d46f9330f98f00f9816bc4d78afb34210c7fd53a3e3493f0421b030ebc5671fb68ae4c7c1d8b1f224d5711cf2b13544fd5e1553171ad6631e33584f107440064914cf07a1d9a84e504b55f5fe14d1ea7fc7f351761c9e8be0bf162b93f3ac9160e6b33a9eb70470e372908d2e35d823be71696f8cdf41129c87738b782719b1b939c63b106955f599d6ac834b50c0ec7bc3018dd098cd9018479605f345c647852ec30eade018be659cd61f1c0c9cd13b5bd2fe0e25cd54e10535d7b9eec72c9e879e754beaa9d7781b84ccf7e52087ea8a682972d3662011da26b76eb64c96c6f5587ea3f627ee490609d941f7922fe114557befd6eef74c28501cb2bc9bcadd3b6eaf14202296c69fa376a5cae29b8d5b8b375e38f7d8e5df887fa515bfada8a2501d3b36745eeb740ac557ab32420b291ef0e24b8886e1706ffc5265b26caceaf1033d0013e554d54a24ea1b0d2d0de34659f00034261c00a8e93d8807b9d3d6f5671d23641037260c9236707662c060cada655a9ffd12e0a8e84d761dc9801affa741222e121484b4f43fa7900c60429ed79c063d8f19bb387ee53fa7518c22366355adca06eb85d382ef6e04106496</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
          <category> todo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> todo </tag>
            
            <tag> toDo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署前端项目</title>
      <link href="/posts/1561.html"/>
      <url>/posts/1561.html</url>
      
        <content type="html"><![CDATA[<p>前端项目存储位置<br>/usr/local/webserver/nginx/project/crtoms<br><img src="https://s2.loli.net/2023/03/08/yvA4zeda6CVD3NX.png" alt="20230105171729.png"></p><p>配置 0（推荐）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">        listen 9005; ## nginx监听端口号</span><br><span class="line">        location / &#123;</span><br><span class="line">                root project/crtoms; # project在ngxin目录下，和html同级</span><br><span class="line">                try_files $uri $uri/ /index.html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 前端代理</span><br><span class="line">        location /api/ &#123; #api是同一请求后缀</span><br><span class="line">             proxy_pass http://192.168.10.235:8888/; #后台内网地址</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设服务器 ip 为 192.168.10.234<br>那么此时访问方式就是 http:192.168.10.234:9095/</p><p>配置 1</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">        listen 9005; ## nginx监听端口号</span><br><span class="line">        location / &#123;</span><br><span class="line">                alias /usr/local/webserver/nginx/project/crtoms/;</span><br><span class="line">                index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设服务器 ip 为 192.168.10.234<br>那么此时访问方式就是 http:192.168.10.234:9095/</p><p>配置 2</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">        listen 9005; ## nginx监听端口号</span><br><span class="line">        location /crtoms &#123;</span><br><span class="line">                alias /usr/local/webserver/nginx/project/crtoms/;</span><br><span class="line">                index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设服务器 ip 为 192.168.10.234<br>那么此时访问方式就是 http:192.168.10.234:9095/crtoms</p><p>配置 3</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">        listen 9005; ## nginx监听端口号</span><br><span class="line">        location /crtoms &#123;</span><br><span class="line">                root /usr/local/webserver/nginx/project/;</span><br><span class="line">                index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设服务器 ip 为 192.168.10.234<br>那么此时访问方式就是 http:192.168.10.234:9095/crtoms</p><hr><p>alias 是一个目录别名的定义，root 则是上层目录的定义<br>alias 后面必须要用“/”结束，否则会找不到文件的。而 root 则可有可无。</p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> nginx </tag>
            
            <tag> 部署前端项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置视频播放</title>
      <link href="/posts/20491.html"/>
      <url>/posts/20491.html</url>
      
        <content type="html"><![CDATA[<p>前提：nginx 需要安装 mp4 模块<br>假设服务器 ip 为 192.168.10.234</p><h2 id="播放-mp4-视频"><a href="#播放-mp4-视频" class="headerlink" title="播放 mp4 视频"></a>播放 mp4 视频</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       location /securityMp4 &#123;</span><br><span class="line">           alias /home/DevelopKit/FILE/securityFile/;</span><br><span class="line">           mp4;</span><br><span class="line">           mp4_buffer_size       1m;</span><br><span class="line">           mp4_max_buffer_size   2000m;</span><br><span class="line">           # mp4_limit_rate        on;</span><br><span class="line">           # mp4_limit_rate_after  30s;</span><br><span class="line">           limit_rate 260k;</span><br><span class="line">           limit_rate_after 3m;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设存在文件/home/DevelopKit/FILE/securityFile/a.mp4<br>那么访问 192.168.10.234:80/securityMp4/a.mp4 就能播放视频</p><h2 id="播放-ts-m3u8-视频"><a href="#播放-ts-m3u8-视频" class="headerlink" title="播放 ts-m3u8 视频"></a>播放 ts-m3u8 视频</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       location /securityHls &#123;</span><br><span class="line">           alias /home/DevelopKit/FILE/securityFile/;</span><br><span class="line">           types &#123;</span><br><span class="line">               application/vnd.apple.mpegurl m3u8;</span><br><span class="line">               video/mp2t ts;</span><br><span class="line">           &#125;</span><br><span class="line">           add_header Cache-Control no-cache;</span><br><span class="line">           add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设存在文件/home/DevelopKit/FILE/securityFile/test_0.ts<br>假设存在文件/home/DevelopKit/FILE/securityFile/test_1.ts<br>假设存在文件/home/DevelopKit/FILE/securityFile/test.m3u8<br>那么访问 192.168.10.234:80/securityMp4/test.m3u8 就能播放视频</p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> nginx </tag>
            
            <tag> 配置视频播放 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决单页面应用，刷新后出现404或者404的错误</title>
      <link href="/posts/12146.html"/>
      <url>/posts/12146.html</url>
      
        <content type="html"><![CDATA[<p>在 location 里加上 try_files $uri $uri/ /index.html;</p><p>具体配置如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       81;</span><br><span class="line">    server_name  project_mall;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">    root   study/project_mall;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">    # 解决单页面应用刷新出现403或者404错误</span><br><span class="line">    try_files  $uri $uri/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> nginx </tag>
            
            <tag> 解决单页面应用，刷新后出现404或者404的错误 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置文件下载，开启文件浏览列表</title>
      <link href="/posts/47689.html"/>
      <url>/posts/47689.html</url>
      
        <content type="html"><![CDATA[<p>文件存储<br><img src="https://s2.loli.net/2023/03/08/yDar2JNVn1LEmHU.png" alt="20230105173803.png"><br>配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        location /app &#123;</span><br><span class="line">            alias /usr/local/webserver/nginx/app/;</span><br><span class="line">            autoindex on;</span><br><span class="line">            #下面这个配置开不开启效果是一样的</span><br><span class="line">            #我还没发现有什么用</span><br><span class="line">            #建议先不加。</span><br><span class="line">            #猜测的应用场景：在网页上文件浏览时点击图片要求下载而不是预览就要打开下面的配置</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">default_type application/octet-stream;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>alias 指定虚拟目录</strong><br><strong>autoindex on;打开目录浏览功能</strong></p><p>假设服务器 ip 为 192.168.10.234<br>那么访问 192.168.10.234:80/app/cgjc.apk 就能直接下载文件<br>那么访问 192.168.10.234:80/app/cgjc-test.apk 就能直接下载文件</p><p>访问 192.168.10.234:80/app/，出现<br><img src="https://s2.loli.net/2023/03/08/fYkzrILRqTb751W.png" alt="20230105175652.png"><br>点击文件进行下载</p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> nginx </tag>
            
            <tag> 配置文件下载，开启文件浏览列表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux修改jar包文件</title>
      <link href="/posts/28105.html"/>
      <url>/posts/28105.html</url>
      
        <content type="html"><![CDATA[<ol><li>使用 jar tvf jar 名称 | grep 目标文件名 查询出目标文件在 war 包中的目录</li><li>使用 jar xvf jar 名称 目标文件名(copy 上面查出的全路径) 将目标文件及所在 war 包中的目录解压到当前路径</li><li>修改目标文件的内容，或者将要新的目标文件替换掉提取出来的目标文件</li><li>使用 jar uvf jar 名称 目标文件名（和步骤（2）中的目标文件名相同） 将新目标文件替换到 jar 包中</li></ol><h3 id="1、具体"><a href="#1、具体" class="headerlink" title="1、具体"></a>1、具体</h3><p>这里以 blog.jar 为例进行操作</p><p>1、首先，查找你需要修改的文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jar tvf blog-0.0.1-SNAPSHOT.jar | grep _fragments.html</span><br></pre></td></tr></table></figure><p>2、解压文件到当前目录（会是个文件夹，但是不用管文件夹的其他文件，只找我们要改的文件）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jar -xvf blog-0.0.1-SNAPSHOT.jar BOOT-INF/classes/templates/_fragments.html</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/14d118a7e11c40d9a0b88aff09ffee04.png" alt="在这里插入图片描述"></p><p>3、如果你有替换的文件就直接替换，没有则修改你需要修改的部分</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim _fragments.html</span><br><span class="line">cp 文件 目标文件</span><br></pre></td></tr></table></figure><p>4、将修改的新文件替换到 jar 包中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jar -uvf blog-0.0.1-SNAPSHOT.jar BOOT-INF/classes/templates/_fragments.html</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/66bc44fe8ddd4799bf0e089af5676142.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> JAVA </tag>
            
            <tag> linux修改jar包文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署java项目</title>
      <link href="/posts/26055.html"/>
      <url>/posts/26055.html</url>
      
        <content type="html"><![CDATA[<p>将运行的 jar 错误日志信息输出到 log.file 文件中，然后（&gt;&amp;1）就是继续输出到标准输出(前面加的&amp;，是为了让系统识别是标准输出)，最后一个&amp;,表示在后台运行。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup java -jar 包名.jar  &gt; log.file  2&gt;&amp;1 &amp;</span><br><span class="line">[1] 669 #669表示运行的pid</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> JAVA </tag>
            
            <tag> 部署java项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>存储zset的写法</title>
      <link href="/posts/59400.html"/>
      <url>/posts/59400.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ZSetOperations</span> <span class="variable">zSetOperations</span> <span class="operator">=</span> redisTemplate.opsForZSet();</span><br><span class="line">Set&lt;ZSetOperations.TypedTuple&lt;Map&lt;String, Double&gt;&gt;&gt; tuples = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">cycleNum</span> <span class="operator">=</span> dataShowMapper.getTrackDynamicGeometryDataNum(csrwId, xb) / <span class="number">10000</span> + <span class="number">1</span>;<span class="comment">// 循环次数</span></span><br><span class="line"></span><br><span class="line"><span class="type">CountDownLatch</span> <span class="variable">countDownLanch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(cycleNum);</span><br><span class="line"></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(cycleNum &gt; <span class="number">4</span> ? <span class="number">4</span> : cycleNum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; cycleNum; i++) &#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> i * <span class="number">10000</span>;</span><br><span class="line">  <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">  executor.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        List&lt;Map&lt;String, Double&gt;&gt; dataListTemp = dataShowMapper.getWaveEchartsCorrectDataNoSparse(csrwId, xb, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span>, start, num);</span><br><span class="line">        <span class="keyword">for</span> (Map&lt;String, Double&gt; dataMap : dataListTemp) &#123;</span><br><span class="line">          ZSetOperations.TypedTuple&lt;Map&lt;String, Double&gt;&gt; typedTuple = <span class="keyword">new</span> <span class="title class_">DefaultTypedTuple</span>&lt;&gt;(dataMap, dataMap.get(<span class="string">&quot;kms&quot;</span>));</span><br><span class="line">          tuples.add(typedTuple);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        countDownLanch.countDown();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  countDownLanch.await();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">executor.shutdown();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (tuples.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  zSetOperations.add(key, tuples);</span><br><span class="line">  redisTemplate.expire(key, <span class="number">3</span>, TimeUnit.HOURS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> redis </category>
          
          <category> ResidTemplate </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> redis </tag>
            
            <tag> ResidTemplate </tag>
            
            <tag> 存储zset的写法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在.gitignore中添加新的规则对已经被git管理了的文件不生效的解决办法</title>
      <link href="/posts/25743.html"/>
      <url>/posts/25743.html</url>
      
        <content type="html"><![CDATA[<p><strong>解决办法：清理下 git 缓存即可</strong><br>执行以下命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除git缓存</span></span><br><span class="line">git rm -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m &#x27;update .gitignore&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Arc </category>
          
          <category> git </category>
          
          <category> general </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arc </tag>
            
            <tag> git </tag>
            
            <tag> general </tag>
            
            <tag> 在.gitignore中添加新的规则对已经被git管理了的文件不生效的解决办法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows根据端口杀进程</title>
      <link href="/posts/48396.html"/>
      <url>/posts/48396.html</url>
      
        <content type="html"><![CDATA[<p>以 8088 端口为例：</p><p><code>netstat  -aon|findstr &quot;8088&quot;</code></p><p>最后一列是 pid。假设为 5544</p><p><code>taskkill /pid 5544 -t -f</code></p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> windows </tag>
            
            <tag> windows根据端口杀进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github高级搜索</title>
      <link href="/posts/56030.html"/>
      <url>/posts/56030.html</url>
      
        <content type="html"><![CDATA[<h2 id="github-搜索自己想要的项目-并添加更加详细的描述"><a href="#github-搜索自己想要的项目-并添加更加详细的描述" class="headerlink" title="github 搜索自己想要的项目,并添加更加详细的描述"></a>github 搜索自己想要的项目,并添加更加详细的描述</h2><p>github 上搜索的例子</p><p><code>in:name springboot forks:&gt;4000 language:java stars:&gt;4000 pushed:&gt;2020-01-01</code></p><p><code>in:readme springboot mybatis forks:&gt;4000 language:java stars:&gt;4000 pushed:&gt;2020-10-01</code></p><p>关键词</p><p><code>in:name xxx</code></p><p><code>in:description xxx</code></p><p><code>in:readme xxx</code></p><p><code>starts:&gt;2000</code></p><p><code>fork:&gt;3000</code></p><p><code>size:&gt;=5000 注意：单位是k</code></p><p><code>pushed:&gt;2020-01-01</code></p><p><code>language:xxx</code></p><p><code>user:xxx</code></p><p>搜索的方式可以组合,叠加，用空格分开条件</p><p><a href="https://github.com/search/advanced">更多高级搜索</a></p>]]></content>
      
      
      <categories>
          
          <category> Arc </category>
          
          <category> git </category>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arc </tag>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> github高级搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用api总结</title>
      <link href="/posts/50126.html"/>
      <url>/posts/50126.html</url>
      
        <content type="html"><![CDATA[<p>XXXTemplate 是 Spring 的一大设计特色，其中，RedisTemplate 功能是提供对 Redis 的支持。</p><p>RedisTemplate 是 Spring Boot 访问 Redis 的核心组件，是 SpringBoot 集成 Redis 的客户端方式。它的底层通过 RedisConnectionFactory 对多种 Redis 驱动进行集成，上层通过 XXXOperations 提供丰富的 API，并结合 Spring 基于泛型的 bean 注入，未开发提供了极大的便利。</p><p>一、Redis 常用的数据类型<br>String：字符串类型，可以存储多种类型，如：字符串，JSON 串，二进制，序列化对象等；<br>Hash：key-value 结构，就像 Java 里的 Map，特别适合存储对象；<br>List：双端链表的结构，即可以作为栈，又可以作为队列，可以进行集合的头部或者尾部添加删除元素；<br>Set：Set 集合是 String 类型的无序集合，通过 hashtable 实现，可以对集合取交集，并集，差集；<br>Sorted set：是 String 类型的有序集合，并且，每个元素都会关联一个 double 类型的分数，Redis 通过分数可以为集合中的成员进行从小到大的排序。有序集合的成员是唯一的，但分数(score)却可以重复。<br>二、RedisTemplate 常用方法</p><p>String 类型</p><p>1.1 判断是否有 key 所对应的值，有则返回 true，没有则返回 false；</p><p>redisTemplate.hasKey(key);<br>1.2 有则取出 key 值所对应的值；</p><p>redisTemplate.opsForValue().get(key);<br>1.3 删除单个 key 值；</p><p>redisTemplate.delete(key);<br>1.4 批量删除 key；</p><p>redisTemplate.delete(keys); //其中 keys:Collection<K> keys<br>1.5 将当前传入的 key 值序列化为 byte[]类型；</p><p>redisTemplate.dump(key);<br>1.6 设置过期时间；</p><p>Boolean redisTemplate.expire(key, timeout, unit); // 多久以后过期</p><p>Boolean redisTemplate.expireAt(key, date); // Date date 具体过期时间<br>1.7 查找匹配的 key 值，返回一个 Set 集合类型（ * 代表查询所有）；</p><p>Set<String> redisTemplate.keys(pattern); // pattern 为正则表达式<br>1.8 修改 redis 中 key 的名称；</p><p>void redisTemplate.rename(oldKey, newKey);</p><p>// 如果旧值存在时，将旧值改为新值<br>Boolean redisTemplate.renameIfAbsent(oldKey, newKey);<br>1.9 返回传入 key 所存储的值的类型；</p><p>DataType redisTemplate.type(key);<br>1.10 从 redis 中随机取出一个 key；</p><p>redisTemplate.randomKey();<br>1.11 返回当前 key 所对应的剩余过期时间；</p><p>Long redisTemplate.getExpire(key);</p><p>// TimeUnit unit 指定返回的时间的单位<br>Long redisTemplate.getExpire(key, unit);<br>1.12 将 key 持久化保存；</p><p>Boolean redisTemplate.persist(key);<br>1.13 将当前数据库的 key 移动到指定 redis 中数据库当中；</p><p>Boolean redisTemplate.move(key, dbIndex);<br>1.14 设置当前的 key 以及 value 值；</p><p>redisTemplate.opsForValue().set(key, value);</p><p>// 带过期时间 timeout，和时间单位 unit<br>redisTemplate.opsForValue().set(key, value, timeout, unit);<br>1.15 返回 key 中字符串 start~end 位置的子字符；</p><p>String redisTemplate.opsForValue().get(key, start, end);<br>1.16 将旧的 key 设置为 value，并且返回旧的 key；</p><p>String redisTemplate.opsForValue().getAndSet(key, value);<br>1.17 批量获取值；</p><p>List<String> redisTemplate.opsForValue().multiGet(keys); // Collection<String> keys<br>1.18 在原有的值基础上新增字符串到末尾;</p><p>redisTemplate.opsForValue().append(key, value);<br>1.19 给 key 对应的 value 值进行自增（正值则自增，负值则自减），如果该 key 没有 value 值，则默认为 0；</p><p>Double redisTemplate.opsForValue().increment(key, increment); // double increment</p><p>Long redisTemplate.opsForValue().increment(key, increment); // long increment<br>1.20 如果对应的 map 集合名称不存在，则添加否则不做修改;</p><p>Map valueMap = new HashMap();<br>valueMap.put(“valueMap1”,”map1”);<br>valueMap.put(“valueMap2”,”map2”);<br>valueMap.put(“valueMap3”,”map3”);<br>redisTemplate.opsForValue().multiSetIfAbsent(valueMap);<br>1.21 设置 map 集合到 redis;</p><p>Map valueMap = new HashMap();<br>valueMap.put(“valueMap1”,”map1”);<br>valueMap.put(“valueMap2”,”map2”);<br>valueMap.put(“valueMap3”,”map3”);<br>redisTemplate.opsForValue().multiSet(valueMap);<br>1.22 获取字符串的长度；</p><p>redisTemplate.opsForValue().size(key);<br>1.23 用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始；</p><p>redisTemplate.opsForValue().set(key, value, offset);<br>1.24 重新设置 key 对应的值，如果存在返回 false，否则返回 true;</p><p>redisTemplate.opsForValue().setIfAbsent(key, value);<br>1.25 将值 value 关联到 key，并将 key 的过期时间设为 timeout；</p><p>redisTemplate.opsForValue().set(key, value, timeout, unit);<br>1.26 对 key 所储存的字符串值，获取指定偏移量上的位(bit)；</p><p>redisTemplate.opsForValue().getBit(key, offset);<br>1.27 将二进制第 offset 位值变为 value；</p><p>redisTemplate.opsForValue().setBit(key, offset, value);</p><p>Hash 类型<br>2.1 以 map 集合的形式添加键值对；</p><p>redisTemplate.opsForHash().putAll(key, maps); // Map<String, String> maps<br>2.2 获取变量中的键值对;</p><p>Map<Object, Object> redisTemplate.opsForHash().entries(key);<br>2.3 查看 hash 表中指定字段是否存在;</p><p>Boolean redisTemplate.opsForHash().hasKey(key, field);<br>2.4 获取变量中的指定 map 键是否有值,如果存在该 map 键则获取值，没有则返回 null；</p><p>redisTemplate.opsForHash().get(key, field);<br>2.5 新增 hashMap 值;</p><p>redisTemplate.opsForHash().put(key, hashKey, value);<br>2.6 仅当 hashKey 不存在时才设置;</p><p>Boolean redisTemplate.opsForHash().putIfAbsent(key, hashKey, value);<br>2.7 删除一个或者多个 hash 表字段;</p><p>Long redisTemplate.opsForHash().delete(key, fields); // Object… fields<br>2.8 给哈希表 key 中的指定字段的整数值加上增量 increment；</p><p>public Double hIncrByDouble(String key, Object field, double delta) {<br>return redisTemplate.opsForHash().increment(key, field, delta);<br>}<br>public Long hashIncrBy(String key, Object field, long increment) {<br>return redisTemplate.opsForHash().increment(key, field, increment);<br>}<br>2.9 获取所有 hash 表中字段;</p><p>redisTemplate.opsForHash().keys(key);<br>2.10 获取 hash 表中字段的数量;</p><p>redisTemplate.opsForHash().size(key);<br>2.11 获取 hash 表中存在的多个值；</p><p>List<Object> redisTemplate.opsForHash().values(key);<br>2.12 匹配获取键值对，ScanOptions.NONE 为获取全部键对；</p><p>public Cursor<Entry<Object, Object>&gt; hashScan(String key, ScanOptions options) {<br>return redisTemplate.opsForHash().scan(key, options);<br>}</p><p>List 类型<br>3.1 通过索引获取列表中的元素；</p><p>redisTemplate.opsForList().index(key, index);<br>3.2 获取列表指定范围内的元素(start 开始位置, 0 是开始位置，end 结束位置, -1 返回所有);</p><p>redisTemplate.opsForList().range(key, start, end);<br>3.3 存储在 list 的头部，即添加一个就把它放在最前面的索引处;</p><p>redisTemplate.opsForList().leftPush(key, value);<br>3.4 把多个值存入 List 中(value 可以是多个值，也可以是一个 Collection value);</p><p>redisTemplate.opsForList().leftPushAll(key, value);<br>3.5 List 存在的时候再加入;</p><p>redisTemplate.opsForList().leftPushIfPresent(key, value);<br>3.6 如果 pivot 处值存在则在 pivot 前面添加;</p><p>redisTemplate.opsForList().leftPush(key, pivot, value);<br>3.7 按照先进先出的顺序来添加(value 可以是多个值，或者是 Collection var2)；</p><p>redisTemplate.opsForList().rightPush(key, value);</p><p>redisTemplate.opsForList().rightPushAll(key, value);<br>3.8 在 pivot 元素的右边添加值;</p><p>redisTemplate.opsForList().rightPush(key, pivot, value);<br>3.9 设置指定索引处元素的值;</p><p>redisTemplate.opsForList().set(key, index, value);<br>3.10 移除并获取列表中第一个元素(如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止)；</p><p>redisTemplate.opsForList().leftPop(key);</p><p>redisTemplate.opsForList().leftPop(key, timeout, unit);<br>3.11 移除并获取列表最后一个元素；</p><p>redisTemplate.opsForList().rightPop(key);</p><p>redisTemplate.opsForList().rightPop(key, timeout, unit);<br>3.12 从一个队列的右边弹出一个元素并将这个元素放入另一个指定队列的最左边；</p><p>redisTemplate.opsForList().rightPopAndLeftPush(sourceKey, destinationKey);</p><p>redisTemplate.opsForList().rightPopAndLeftPush(sourceKey, destinationKey, timeout, unit);<br>3.13 删除集合中值等于 value 的元素(index=0, 删除所有值等于 value 的元素; index&gt;0, 从头部开始删除第一个值等于 value 的元素; index&lt;0, 从尾部开始删除第一个值等于 value 的元素)；</p><p>redisTemplate.opsForList().remove(key, index, value);<br>3.14 将 List 列表进行剪裁；</p><p>redisTemplate.opsForList().trim(key, start, end);<br>3.15 获取当前 key 的 List 列表长度；</p><p>redisTemplate.opsForList().size(key);</p><p>Set 类型<br>4.1 添加元素；</p><p>redisTemplate.opsForSet().add(key, values);<br>4.2 移除元素(单个值、多个值)；</p><p>redisTemplate.opsForSet().remove(key, values);<br>4.3 删除并且返回一个随机的元素；</p><p>redisTemplate.opsForSet().pop(key);<br>4.4 获取集合的大小；</p><p>redisTemplate.opsForSet().size(key);<br>4.5 判断集合是否包含 value；</p><p>redisTemplate.opsForSet().isMember(key, value);<br>4.6 获取两个集合的交集(key 对应的无序集合与 otherKey 对应的无序集合求交集)；</p><p>redisTemplate.opsForSet().intersect(key, otherKey);<br>4.7 获取多个集合的交集(Collection var2)；</p><p>redisTemplate.opsForSet().intersect(key, otherKeys);<br>4.8 key 集合与 otherKey 集合的交集存储到 destKey 集合中(其中 otherKey 可以为单个值或者集合);</p><p>redisTemplate.opsForSet().intersectAndStore(key, otherKey, destKey);<br>4.9 key 集合与多个集合的交集存储到 destKey 无序集合中;</p><p>redisTemplate.opsForSet().intersectAndStore(key, otherKeys, destKey);<br>4.10 获取两个或者多个集合的并集(otherKeys 可以为单个值或者是集合);</p><p>redisTemplate.opsForSet().union(key, otherKeys);<br>4.11 key 集合与 otherKey 集合的并集存储到 destKey 中(otherKeys 可以为单个值或者是集合);</p><p>redisTemplate.opsForSet().unionAndStore(key, otherKey, destKey);<br>4.12 获取两个或者多个集合的差集(otherKeys 可以为单个值或者是集合);</p><p>redisTemplate.opsForSet().difference(key, otherKeys);<br>4.13 差集存储到 destKey 中(otherKeys 可以为单个值或者集合);</p><p>redisTemplate.opsForSet().differenceAndStore(key, otherKey, destKey);<br>4.14 随机获取集合中的一个/count 个元素;</p><p>redisTemplate.opsForSet().randomMember(key);</p><p>// 随机获取集合中 count 个元素<br>redisTemplate.opsForSet().randomMembers(key, count);<br>4.15 获取集合中的所有元素;</p><p>redisTemplate.opsForSet().members(key);<br>4.16 获取多个 key 无序集合中的元素（去重），count 表示个数;</p><p>redisTemplate.opsForSet().distinctRandomMembers(key, count);<br>4.17 遍历 set 类似于 Interator(ScanOptions.NONE 为显示所有的)；</p><p>redisTemplate.opsForSet().scan(key, options);</p><p>ZSet 类型<br>5.1 添加元素(有序集合是按照元素的 score 值由小到大进行排列)；</p><p>redisTemplate.opsForZSet().add(key, value, score);<br>5.2 删除对应的 value,value 可以为多个值；</p><p>redisTemplate.opsForZSet().remove(key, values);<br>5.3 增加元素的 score 值，并返回增加后的值；</p><p>redisTemplate.opsForZSet().incrementScore(key, value, delta);<br>5.4 返回元素在集合的排名,有序集合是按照元素的 score 值由小到大排列；</p><p>redisTemplate.opsForZSet().rank(key, value);<br>5.5 返回元素在集合的排名,按元素的 score 值由大到小排列；</p><p>redisTemplate.opsForZSet().reverseRank(key, value);<br>5.6 获取集合中给定区间的元素(start 开始位置，end 结束位置, -1 查询所有)；</p><p>redisTemplate.opsForZSet().reverseRangeWithScores(key, start,end);<br>5.7 按照分数范围升序输出名称；</p><p>rangebyscore key min max [withscores]<br>5.8 根据分数范围删除元素；</p><p>zremrangebyscore key min max [withscores]<br>5.9 按照分数范围降序输出名称；</p><p>redisTemplate.opsForZSet().reverseRangeByScore(key, min, max);</p><p>//返回值为:Set<ZSetOperations.TypedTuple<V>&gt;<br>redisTemplate.opsForZSet().reverseRangeByScoreWithScores(key, min, max);<br>5.10 从高到低的排序集中获取分数在最小和最大值之间的元素;</p><p>redisTemplate.opsForZSet().reverseRangeByScore(key, min, max, start, end);<br>5.11 根据 score 值获取集合元素数量;</p><p>redisTemplate.opsForZSet().count(key, min, max);<br>5.12 获取集合的大小;</p><p>redisTemplate.opsForZSet().size(key);</p><p>redisTemplate.opsForZSet().zCard(key);<br>5.13 获取集合中 key、value 元素对应的 score 值;</p><p>redisTemplate.opsForZSet().score(key, value);<br>5.14 移除指定索引位置处的成员;</p><p>redisTemplate.opsForZSet().removeRange(key, start, end);<br>5.15 移除指定 score 范围的集合成员;</p><p>redisTemplate.opsForZSet().removeRangeByScore(key, min, max);<br>5.16 获取 key 和 otherKey 的并集并存储在 destKey 中（其中 otherKeys 可以为单个字符串或者字符串集合）;</p><p>redisTemplate.opsForZSet().unionAndStore(key, otherKey, destKey);<br>5.17 获取 key 和 otherKey 的交集并存储在 destKey 中（其中 otherKeys 可以为单个字符串或者字符串集合）;</p><p>redisTemplate.opsForZSet().intersectAndStore(key, otherKey, destKey); 5.遍历集合（和 iterator 一模一样）</p><p>Cursor<TypedTuple<Object>&gt; scan = opsForZSet.scan(“test3”, ScanOptions.NONE);<br>while (scan.hasNext()){<br>ZSetOperations.TypedTuple<Object> item = scan.next();<br>System.out.println(item.getValue() + “:” + item.getScore());<br>}</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> redis </category>
          
          <category> ResidTemplate </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> redis </tag>
            
            <tag> ResidTemplate </tag>
            
            <tag> 常用api总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot中使用Quartz执行任务对象（job）中无法注入bean的问题</title>
      <link href="/posts/17422.html"/>
      <url>/posts/17422.html</url>
      
        <content type="html"><![CDATA[<p><strong>一、问题描述</strong><br>SpringBoot 整合  <a href="https://so.csdn.net/so/search?q=Quartz&amp;spm=1001.2101.3001.7020">Quartz</a>  进行定时任务开发时，job 中注入业务 Service，使用 @Autowired 注解获取对象为 null ，执行时报空指针异常</p><p><strong>二、分析</strong><br>Spring 容器可以管理 Bean，但是 Quartz 的 job 是自己管理的，job 无法被容器识别，即使在自定义的 job 上面加上@Component 注解，依然无效，原因是  <strong>job 对象在 spring 容器加载的时候，能够注入 bean，但是在调度时，job 对象会重新创建，此时就导致了已经注入的对象丢失，因此报空指针异常</strong>。</p><p><strong>三、解决办法</strong></p><p>3.1 采用自定义静态工具类的方式，创建 AppContextUtil 类，实现 ApplicationContextAware 接口，此工具类会在 spring 容器启动后，自动加载，使用其提供的 Bean 方法获取想要的 bean 即可，代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 自定义静态工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppContextUtil</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义静态ApplicationContext</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写接口方法，该方法的参数为框架自动加载的IOC容器对象</span></span><br><span class="line"><span class="comment">     * 该方法在启动项目的时候会自动执行，前提是该类上有IOC相关注解，例如<span class="doctag">@Component</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> applicationContext IOC容器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException e</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="comment">//将框架加载的IOC赋值给全局静态IOC</span></span><br><span class="line">        AppContextUtil.applicationContext = applicationContext;</span><br><span class="line">        log.info(<span class="string">&quot;==================ApplicationContext加载-----------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取 applicationContext</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title function_">getApplicationContext</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过name获取Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getBean</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  applicationContext.getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过class获取Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; clazz)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  applicationContext.getBean(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过name、Clazz返回指定Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(String name,Class&lt;T&gt; clazz)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  applicationContext.getBean(name,clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方式如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ReminderConfigService</span> <span class="variable">reminderConfigService</span> <span class="operator">=</span> AppContextUtil.getBean(ReminderConfigService.class);</span><br></pre></td></tr></table></figure><p>3.2 使用<strong>ContextLoader</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleJob</span> <span class="keyword">extends</span> <span class="title class_">QuartzJobBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">executeInternal</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">a</span> <span class="operator">=</span> ContextLoader.getCurrentWebApplicationContext();</span><br><span class="line">        System.out.println(a.getBean(APIController.class));</span><br><span class="line">        System.out.println(a.containsBean(<span class="string">&quot;APIController&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.3 使用 SpringContextHolder（我在项目中使用的）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJob</span> <span class="keyword">implements</span> <span class="title class_">BaseJob</span> &#123;</span><br><span class="line">    <span class="type">DtjhEndPoint</span> <span class="variable">dtjhEndPoint</span> <span class="operator">=</span> SpringContextHolder.getBean(DtjhEndPoint.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;spring组件注入是否成功,&#123;&#125;&quot;</span>, dtjhEndPoint.getFilePath());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> quartz </category>
          
          <category> 常见问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> quartz </tag>
            
            <tag> 常见问题 </tag>
            
            <tag> SpringBoot中使用Quartz执行任务对象（job）中无法注入bean的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitlab在服务器上的安装</title>
      <link href="/posts/14935.html"/>
      <url>/posts/14935.html</url>
      
        <content type="html"><![CDATA[<h1 id="阅前注意"><a href="#阅前注意" class="headerlink" title="阅前注意"></a>阅前注意</h1><p><strong>本文档对于 gitlab 仓库管理只适用于 http 协议。如需 ssh 协议。请自行百度生成和配置公钥和私钥</strong></p><p><strong>本文档适用于 linux 的发行版为 centos7。其他的发行版 ubuntu、debian 等请自行百度</strong></p><p><strong>整理 by:张雨晗</strong> <strong>2020.7.20</strong></p><p><strong><a href="https://www.cnblogs.com/you-men/p/13126530.html">参考博客 1</a></strong></p><p><strong><a href="https://blog.csdn.net/qiushisoftware/article/details/112754180">参考博客 2</a></strong></p><p><strong><a href="https://blog.csdn.net/wangyy130/article/details/85633303">参考博客 3</a></strong></p><hr><h1 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h1><p>[TOC]</p><hr><h1 id="1-安装过程"><a href="#1-安装过程" class="headerlink" title="1.安装过程"></a>1.安装过程</h1><h2 id="1-下载-rpm-文件"><a href="#1-下载-rpm-文件" class="headerlink" title="1.下载 rpm 文件"></a>1.下载 rpm 文件</h2><p><a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/">gitlab 的 rpm 包下载地址</a></p><p>ctrl+鼠标左键点击打开链接，下载最新的 rpm 包</p><p><img src="https://s2.loli.net/2023/03/08/VtZw3IuTHEmWsvo.png" alt="20210719165359.png"></p><h2 id="2-上传-rpm-文件。注意：linux-的运营规范里明确规定了第三方软件包放在-opt-文件夹下"><a href="#2-上传-rpm-文件。注意：linux-的运营规范里明确规定了第三方软件包放在-opt-文件夹下" class="headerlink" title="2.上传 rpm 文件。注意：linux 的运营规范里明确规定了第三方软件包放在/opt/文件夹下"></a>2.上传 rpm 文件。注意：linux 的运营规范里明确规定了第三方软件包放在/opt/文件夹下</h2><p>可以使用第三方工具。注意：xftp 禁用</p><p>也可以使用 win 下的 cmd 命令</p><p>示例</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -P 221 D:\download\gitlab-ce-14.0.4-ce.0.el7.x86_64.rpm root@123.123.122.138:/opt/</span><br></pre></td></tr></table></figure><p>之后再输入访问的密码即可。</p><h2 id="3-安装"><a href="#3-安装" class="headerlink" title="3.安装"></a>3.安装</h2><h3 id="1-安装所需要的环境"><a href="#1-安装所需要的环境" class="headerlink" title="1.安装所需要的环境"></a>1.安装所需要的环境</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install policycoreutils-python</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install openssh-server</span><br></pre></td></tr></table></figure><h3 id="2-安装-gitlab"><a href="#2-安装-gitlab" class="headerlink" title="2.安装 gitlab"></a>2.安装 gitlab</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt</span><br></pre></td></tr></table></figure><p>安装时间较长。请耐心等待。中途除非报错。否则不要中断</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -ivh gitlab-ce-14.0.4-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><h3 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3.修改配置文件"></a>3.修改配置文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure><p>按 G 跳到文件末尾</p><p>在文件末尾添加如下配置项</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">external_url</span> <span class="string">&#x27;http://123.123.122.138:8089&#x27;# gitlab服务器的url。同时也是使用git clone时的前缀</span></span><br><span class="line"><span class="attr">nginx[&#x27;listen_port&#x27;]</span> = <span class="string">8089# gitlab服务器监听的端口号。默认是80，但一般不用,因为会和nginx的默认端口冲突</span></span><br><span class="line"><span class="attr">gitlab_rails[&#x27;gitlab_email_enabled&#x27;]</span> = <span class="string">true</span></span><br><span class="line"><span class="attr">gitlab_rails[&#x27;gitlab_email_from&#x27;]</span> = <span class="string">&#x27;you_menz@163.com&#x27;</span></span><br><span class="line"><span class="attr">gitlab_rails[&#x27;gitlab_email_display_name&#x27;]</span> = <span class="string">&#x27;Admin&#x27;    # 待会邮箱收到邮件的发件人就是此处名字</span></span><br><span class="line"><span class="attr">gitlab_rails[&#x27;gitlab_email_reply_to&#x27;]</span> = <span class="string">&#x27;you_menz@163.com&#x27;</span></span><br><span class="line"><span class="attr">gitlab_rails[&#x27;gitlab_email_subject_suffix&#x27;]</span> = <span class="string">&#x27;gitlab[]&#x27;</span></span><br><span class="line"><span class="attr">gitlab_rails[&#x27;smtp_enable&#x27;]</span> = <span class="string">true</span></span><br><span class="line"><span class="attr">gitlab_rails[&#x27;smtp_address&#x27;]</span> = <span class="string">&quot;smtp.163.com&quot;</span></span><br><span class="line"><span class="attr">gitlab_rails[&#x27;smtp_port&#x27;]</span> = <span class="string">25</span></span><br><span class="line"><span class="attr">gitlab_rails[&#x27;smtp_user_name&#x27;]</span> = <span class="string">&quot;you_menz@163.com&quot;</span></span><br><span class="line"><span class="attr">gitlab_rails[&#x27;smtp_password&#x27;]</span> = <span class="string">&quot;zhoujian22&quot;  # 此处密码是邮箱客户端的授权密码</span></span><br><span class="line"><span class="attr">gitlab_rails[&#x27;smtp_domain&#x27;]</span> = <span class="string">&quot;163.com&quot;</span></span><br><span class="line"><span class="attr">gitlab_rails[&#x27;smtp_authentication&#x27;]</span> = <span class="string">&quot;login&quot;</span></span><br><span class="line"><span class="attr">gitlab_rails[&#x27;smtp_enable_starttls_auto&#x27;]</span> = <span class="string">true</span></span><br><span class="line"><span class="attr">gitlab_rails[&#x27;smtp_tls&#x27;]</span> = <span class="string">false</span></span><br></pre></td></tr></table></figure><p>保存退出</p><h3 id="4-运行启动"><a href="#4-运行启动" class="headerlink" title="4.运行启动"></a>4.运行启动</h3><p>确保关闭</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitlab-ctl stop            #停止全部服务</span><br></pre></td></tr></table></figure><p>更新配置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitlab-ctl  reconfigure    #更新配置</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitlab-ctl start           #启动全部服务</span><br></pre></td></tr></table></figure><p>每次更新 git-lab 配置。都要先停止全部服务，然后更改配置文件，然后更新配置，最后启动全部服务</p><h3 id="5-初始化-root-密码"><a href="#5-初始化-root-密码" class="headerlink" title="5.初始化 root 密码"></a>5.初始化 root 密码</h3><p>切换到 gitlab 下的 bin 目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt/gitlab/bin</span><br></pre></td></tr></table></figure><p>执行如下指令进入到 gitlab 的控制台（时间较长，请耐心等待)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gitlab-rails console</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/08/AmOIEMzrns5VSlw.png" alt="20210719172042.png"></p><p>出现上述结果证明进入控制台成功</p><p>输入如下指令，查看所有用户</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">u=User.all</span><br></pre></td></tr></table></figure><p>执行如下指令切换到 root 用户</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">u=User.where(id:1).first</span><br></pre></td></tr></table></figure><p>输入如下指令，设置的 root 用户的密码，如“123456cb”</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">u.password=&#x27;123456a?&#x27;</span><br></pre></td></tr></table></figure><p>输入如下指令，确认密码</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">u.password_confirmation=&#x27;123456a?&#x27;</span><br></pre></td></tr></table></figure><p>执行如下指令，保存设置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">u.save!</span><br></pre></td></tr></table></figure><p>如果返回结果为 true。输入 exit 退出。</p><p>至此。gitlab 初始化 root 密码结束</p><p>此时。即可输入 gitlab 的 ip:port 进行访问。</p><h1 id="2-gitlab-的-web-端的一些操作"><a href="#2-gitlab-的-web-端的一些操作" class="headerlink" title="2.gitlab 的 web 端的一些操作"></a>2.gitlab 的 web 端的一些操作</h1><h2 id="1-建立用户"><a href="#1-建立用户" class="headerlink" title="1.建立用户"></a>1.建立用户</h2><p>在安装的过程中已经重置了 root 的密码。</p><p>在 web 端使用 root 的账号和密码登陆。</p><p>点击左上角的 menu，在展开的下拉菜单中点击 admin。进入到管理者面板</p><p><img src="https://s2.loli.net/2023/03/08/bOSLQx3fgVMdBN4.png" alt="20210720090423.png"></p><p>点击 user 区域的 view lastest users 能够进入到用户管理区</p><p><img src="https://s2.loli.net/2023/03/08/WALUzO2h4r9QJ1m.png" alt="20210720090624.png"></p><p>点击 newUser 能够添加用户。可能新增的用户。无法直接为其设置密码。此时可以先设置姓名，用户名，邮箱等。保存并退出后再点击 edit 按钮即可手动指定新建用户的默认密码。</p><p><img src="https://s2.loli.net/2023/03/08/ujcYwyVi1I4SagO.png" alt="20210720090646.png"></p><p>注意：</p><ul><li>只有 root 账号才能建立用户。</li></ul><h2 id="2-建立项目"><a href="#2-建立项目" class="headerlink" title="2.建立项目"></a>2.建立项目</h2><p>建议 root 账号不要直接建立空白的项目，而是先建立各个项目的管理者账户（如 dtjc_root)，通过这些项目管理者账户去建立各自的项目。</p><p>建立项目无需特别说明。一切按照 web 端的提示正常一步一步执行。即可。</p><p>注意：</p><ul><li><p>如果是想先在 gitlab 建立空白项目，再把本地以有的项目 push 到空白项目。要保证 push 的用户具有 developer 之上的角色（developer 及之下的角色不行，push 会提示权限不足）</p></li><li><p>关于修改用户在某个项目的角色，请查看项目邀请成员的操作。</p></li></ul><h2 id="3-项目邀请成员"><a href="#3-项目邀请成员" class="headerlink" title="3.项目邀请成员"></a>3.项目邀请成员</h2><p>鼠标悬浮于右上角的 project information，点击弹出的菜单里的 members 选项即可邀请成员</p><p><img src="https://s2.loli.net/2023/03/08/qTQ7JxXdcphstuE.png" alt="20210720092603.png"></p><p>在 max role 列可以修改用户的角色。因为 Maintainer 相当于该项目的 root。所以建议一个项目最多两到三个 Maintainer 角色。</p><p><img src="https://s2.loli.net/2023/03/08/DdNIXuqZi9Wvkm8.png" alt="20210720093040.png"></p><h2 id="4-特别注意：取消-main-branch-protect"><a href="#4-特别注意：取消-main-branch-protect" class="headerlink" title="4.特别注意：取消 main branch protect"></a>4.特别注意：取消 main branch protect</h2><p>gitlab 默认对 main 分支提供保护。只有 Maintainer 才能对 main 分支执行 merge,push,pull 等操作。</p><p>如果希望 developer 也能对 main 执行开发中常见的 push,pull,fetch 等命令，需要手动取消 main 分支的保护</p><p>点击 settings 里的 Repositoy</p><p><img src="https://s2.loli.net/2023/03/08/zAYEjVi8cpSfJL2.png" alt="20210720094409.png"></p><p>点击 protected branches 右侧的 expand 可以在展开的下拉框里看到一条默认的 main 分支保护规则。</p><p>不建议直接点击 Unprotected。直接取消该规则。</p><p>建议在 Allowed to merge 和 Allowed to push 里添加 developer 角色。</p><p><img src="https://s2.loli.net/2023/03/08/UPHlhpZBoGV4JOg.png" alt="20210720094552.png"></p><hr><p><strong>以上就是 gitlab 的部署流程，及 web 端的一些使用说明和操作注意事项。</strong></p><p><strong>文档至此结束</strong></p>]]></content>
      
      
      <categories>
          
          <category> Arc </category>
          
          <category> git </category>
          
          <category> gitlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arc </tag>
            
            <tag> git </tag>
            
            <tag> gitlab </tag>
            
            <tag> Gitlab在服务器上的安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>业务开发时，接口不能对外暴露的解决办法</title>
      <link href="/posts/24216.html"/>
      <url>/posts/24216.html</url>
      
        <content type="html"><![CDATA[<h1 id="业务开发时，接口不能对外暴露怎么办？"><a href="#业务开发时，接口不能对外暴露怎么办？" class="headerlink" title="业务开发时，接口不能对外暴露怎么办？"></a>业务开发时，接口不能对外暴露怎么办？</h1><p>内外网接口微服务隔离</p><ul><li>网关 + redis 实现白名单机制</li><li>方案三 网关 + AOP</li><li>具体实操</li></ul><hr><p>在业务开发的时候，经常会遇到某一个接口不能对外暴露，只能内网服务间调用的实际需求。面对这样的情况，我们该如何实现呢？今天，我们就来理一理这个问题，从几个可行的方案中，挑选一个来实现。</p><h2 id="1-内外网接口微服务隔离"><a href="#1-内外网接口微服务隔离" class="headerlink" title="1. 内外网接口微服务隔离"></a><strong><em>1. 内外网接口微服务隔离</em></strong></h2><p>将对外暴露的接口和对内暴露的接口分别放到两个微服务上，一个服务里所有的接口均对外暴露，另一个服务的接口只能内网服务间调用。</p><p>该方案需要额外编写一个只对内部暴露接口的微服务，将所有只能对内暴露的业务接口聚合到这个微服务里，通过这个聚合的微服务，分别去各个业务侧获取资源。</p><p>该方案，新增一个微服务做请求转发，增加了系统的复杂性，增大了调用耗时以及后期的维护成本。</p><h2 id="2-网关-redis-实现白名单机制"><a href="#2-网关-redis-实现白名单机制" class="headerlink" title="2. 网关 + redis 实现白名单机制"></a><strong><em>2. 网关 + redis 实现白名单机制</em></strong></h2><p>在 redis 里维护一套接口白名单列表，外部请求到达网关时，从 redis 获取接口白名单，在白名单内的接口放行，反之拒绝掉。</p><p>该方案的好处是，对业务代码零侵入，只需要维护好白名单列表即可；</p><p>不足之处在于，白名单的维护是一个持续性投入的工作，在很多公司，业务开发无法直接触及到 redis，只能提工单申请，增加了开发成本；另外，每次请求进来，都需要判断白名单，增加了系统响应耗时，考虑到正常情况下外部进来的请求大部分都是在白名单内的，只有极少数恶意请求才会被白名单机制所拦截，所以该方案的性价比很低。</p><h2 id="3-方案三-网关-AOP"><a href="#3-方案三-网关-AOP" class="headerlink" title="3. 方案三 网关 + AOP"></a><strong><em>3. 方案三 网关 + AOP</em></strong></h2><p>相比于方案二对接口进行白名单判断而言，方案三是对请求来源进行判断，并将该判断下沉到业务侧。避免了网关侧的逻辑判断，从而提升系统响应速度。</p><p>我们知道，外部进来的请求一定会经过网关再被分发到具体的业务侧，内部服务间的调用是不用走外部网关的（走 k8s 的 service）。</p><p><strong>根据这个特点，我们可以对所有经过网关的请求的 header 里添加一个字段，业务侧接口收到请求后，判断 header 里是否有该字段，如果有，则说明该请求来自外部，没有，则属于内部服务的调用，再根据该接口是否属于内部接口来决定是否放行该请求。</strong></p><p>该方案将内外网访问权限的处理分布到各个业务侧进行，消除了由网关来处理的系统性瓶颈；同时，开发者可以在业务侧直接确定接口的内外网访问权限，提升开发效率的同时，增加了代码的可读性。</p><p>当然该方案会对业务代码有一定的侵入性，不过可以通过注解的形式，最大限度的降低这种侵入性。</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_jpg/knmrNHnmCLHeNQic2c4tQ3pwHOk9XgEmNiaUfUZC7EJnb0CIic4J6HqJSaL9D6tOoN4efzdZiaA07Tiasyl3yAtnPZw/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="Image"></p><h2 id="具体实操"><a href="#具体实操" class="headerlink" title="具体实操"></a><strong><em>具体实操</em></strong></h2><p>下面就方案三，进行具体的代码演示。</p><p>首先在网关侧，需要对进来的请求 header 添加外网标识符: from=public</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Mono &lt; Void &gt; filter ( ServerWebExchange exchange, GatewayFilterChain chain ) &#123;</span><br><span class="line">    <span class="keyword">return</span> chain.filter(</span><br><span class="line">      exchange.mutate().request(</span><br><span class="line">        exchange.getRequest().mutate().header(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;&quot;</span>).header(<span class="string">&quot;from&quot;</span>, <span class="string">&quot;public&quot;</span>).build())</span><br><span class="line">      .build()</span><br><span class="line">    )；</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span> <span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，编写内外网访问权限判断的 AOP 和注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OnlyIntranetAccessAspect</span> &#123;</span><br><span class="line">  <span class="meta">@Pointcut</span> ( <span class="string">&quot;@within(org.openmmlab.platform.common.annotation.OnlyIntranetAccess)&quot;</span> )</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onlyIntranetAccessOnClass</span> <span class="params">()</span> &#123;&#125;</span><br><span class="line">  <span class="meta">@Pointcut</span> ( <span class="string">&quot;@annotation(org.openmmlab.platform.common.annotation.OnlyIntranetAccess)&quot;</span> )</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onlyIntranetAccessOnMethed</span> <span class="params">()</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Before</span> ( value = <span class="string">&quot;onlyIntranetAccessOnMethed() || onlyIntranetAccessOnClass()&quot;</span> )</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span> <span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">hsr</span> <span class="operator">=</span> (( ServletRequestAttributes ) RequestContextHolder.getRequestAttributes()) .getRequest ();</span><br><span class="line">    <span class="type">String</span> <span class="variable">from</span> <span class="operator">=</span> hsr.getHeader ( <span class="string">&quot;from&quot;</span> );</span><br><span class="line">    <span class="keyword">if</span> ( !StringUtils.isEmpty( from ) &amp;&amp; <span class="string">&quot;public&quot;</span>.equals ( from )) &#123;</span><br><span class="line">      log.error ( <span class="string">&quot;This api is only allowed invoked by intranet source&quot;</span> );</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MMException</span> ( ReturnEnum.C_NETWORK_INTERNET_ACCESS_NOT_ALLOWED_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> OnlyIntranetAccess &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，在只能内网访问的接口上加上@OnlyIntranetAccess 注解即可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span> ( <span class="string">&quot;/role/add&quot;</span> )</span><br><span class="line"><span class="meta">@OnlyIntranetAccess</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">onlyIntranetAccess</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;该接口只允许内部服务调用&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> 业务开发时，接口不能对外暴露的解决办法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断访问设备的方法</title>
      <link href="/posts/27719.html"/>
      <url>/posts/27719.html</url>
      
        <content type="html"><![CDATA[<h2 id="java-版"><a href="#java-版" class="headerlink" title="java 版"></a>java 版</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// \b 是单词边界(连着的两个(字母字符 与 非字母字符) 之间的逻辑上的间隔),</span></span><br><span class="line"><span class="comment">// 字符串在编译时会被转码一次,所以是 &quot;\\b&quot;</span></span><br><span class="line"><span class="comment">// \B 是单词内部逻辑间隔(连着的两个字母字符之间的逻辑上的间隔)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PHONE_REG</span> <span class="operator">=</span> <span class="string">&quot;\\b(ip(hone|od)|android|opera m(ob|in)i&quot;</span></span><br><span class="line">    + <span class="string">&quot;|windows (phone|ce)|blackberry&quot;</span></span><br><span class="line">    + <span class="string">&quot;|s(ymbian|eries60|amsung)|p(laybook|alm|rofile/midp&quot;</span></span><br><span class="line">    + <span class="string">&quot;|laystation portable)|nokia|fennec|htc[-_]&quot;</span></span><br><span class="line">    + <span class="string">&quot;|mobile|up.browser|[1-4][0-9]&#123;2&#125;x[1-4][0-9]&#123;2&#125;)\\b&quot;</span>;<span class="comment">// 手记的正则表达式</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TABLE_REG</span> <span class="operator">=</span> <span class="string">&quot;\\b(ipad|tablet|(Nexus 7)|up.browser&quot;</span></span><br><span class="line">    + <span class="string">&quot;|[1-4][0-9]&#123;2&#125;x[1-4][0-9]&#123;2&#125;)\\b&quot;</span>;<span class="comment">// 拼版的正则表达式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 移动设备正则匹配：手机端、平板</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">PHONE_PAT</span> <span class="operator">=</span> Pattern.compile(PHONE_REG, Pattern.CASE_INSENSITIVE);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">TABLE_PAT</span> <span class="operator">=</span> Pattern.compile(TABLE_REG, Pattern.CASE_INSENSITIVE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登陆设备认证。判断前台请求的设备是pc，pad还是phone</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userAgent 用户代理信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">checkLoginDeviceType</span><span class="params">(String userAgent)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == userAgent) &#123;</span><br><span class="line">        userAgent = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 匹配</span></span><br><span class="line">    <span class="type">Matcher</span> <span class="variable">matcherPhone</span> <span class="operator">=</span> PHONE_PAT.matcher(userAgent);</span><br><span class="line">    <span class="type">Matcher</span> <span class="variable">matcherTable</span> <span class="operator">=</span> TABLE_PAT.matcher(userAgent);</span><br><span class="line">    <span class="keyword">if</span> (matcherPhone.find()) &#123;</span><br><span class="line">        <span class="keyword">return</span> PHONE_TYPE;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matcherTable.find()) &#123;</span><br><span class="line">        <span class="keyword">return</span> PAD_TYPE;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> PC_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="js-版"><a href="#js-版" class="headerlink" title="js 版"></a>js 版</h2><p><em>没经过项目测试，只是记录别人写的代码,而且好像只能区分移动端和桌面，不能区分移动端是 pad 还是 phone</em></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//智能检测登陆设备类型</span></span><br><span class="line"><span class="keyword">var</span> browser = &#123;</span><br><span class="line">  <span class="attr">versions</span>: (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> u = navigator.<span class="property">userAgent</span>,</span><br><span class="line">      app = navigator.<span class="property">appVersion</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">//移动终端浏览器版本信息</span></span><br><span class="line">      <span class="attr">trident</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Trident&#x27;</span>) &gt; -<span class="number">1</span>, <span class="comment">//IE内核</span></span><br><span class="line">      <span class="attr">presto</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Presto&#x27;</span>) &gt; -<span class="number">1</span>, <span class="comment">//opera内核</span></span><br><span class="line">      <span class="attr">webKit</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;AppleWebKit&#x27;</span>) &gt; -<span class="number">1</span>, <span class="comment">//苹果、谷歌内核</span></span><br><span class="line">      <span class="attr">gecko</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Gecko&#x27;</span>) &gt; -<span class="number">1</span> &amp;&amp; u.<span class="title function_">indexOf</span>(<span class="string">&#x27;KHTML&#x27;</span>) == -<span class="number">1</span>, <span class="comment">//火狐内核</span></span><br><span class="line">      <span class="attr">mobile</span>: !!u.<span class="title function_">match</span>(<span class="regexp">/AppleWebKit.*Mobile.*/</span>) || u.<span class="title function_">indexOf</span>(<span class="string">&#x27;iPad&#x27;</span>) &gt; -<span class="number">1</span>, <span class="comment">//是否为移动终端</span></span><br><span class="line">      <span class="attr">ios</span>: !!u.<span class="title function_">match</span>(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>), <span class="comment">//ios终端</span></span><br><span class="line">      <span class="attr">android</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Android&#x27;</span>) &gt; -<span class="number">1</span> || u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Linux&#x27;</span>) &gt; -<span class="number">1</span>, <span class="comment">//android终端或者uc浏览器</span></span><br><span class="line">      <span class="attr">iPhone</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;iPhone&#x27;</span>) &gt; -<span class="number">1</span>, <span class="comment">//是否为iPhone或者QQHD浏览器</span></span><br><span class="line">      <span class="attr">iPad</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;iPad&#x27;</span>) &gt; -<span class="number">1</span>, <span class="comment">//是否iPad</span></span><br><span class="line">      <span class="attr">webApp</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Safari&#x27;</span>) == -<span class="number">1</span> <span class="comment">//是否web应该程序，没有头部与底部</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(),</span><br><span class="line">  <span class="attr">language</span>: (navigator.<span class="property">browserLanguage</span> || navigator.<span class="property">language</span>).<span class="title function_">toLowerCase</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (browser.<span class="property">versions</span>.<span class="property">mobile</span>) &#123;</span><br><span class="line">  <span class="comment">//移动端</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//pc端</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> 判断访问设备的方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>word转pdf</title>
      <link href="/posts/27144.html"/>
      <url>/posts/27144.html</url>
      
        <content type="html"><![CDATA[<ol><li>poi(慢，格式回出问题)</li><li>openOffice（单线程，不支持并发)</li><li>jacob(效果好，但是不支持 linux）</li><li>docx4j（没试过)</li><li>asposeword(效果好，块，但是付费)</li></ol>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> word转pdf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以特定的编码读取文件，以特定的编码写入文件</title>
      <link href="/posts/9998.html"/>
      <url>/posts/9998.html</url>
      
        <content type="html"><![CDATA[<p>以下代码是针对 BufferedReader 和 BufferedWriter 的</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(inF),<span class="string">&quot;GB2312&quot;</span>));<span class="comment">// 以GB2312的编码读文件</span></span><br><span class="line"></span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(outFile), StandardCharsets.UTF_8));<span class="comment">// 以utf-8写文件</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> 以特定的编码读取文件，以特定的编码写入文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>告别非空判断</title>
      <link href="/posts/29009.html"/>
      <url>/posts/29009.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Objects-工具类"><a href="#1-Objects-工具类" class="headerlink" title="1 Objects 工具类"></a>1 Objects 工具类</h2><p>既然要解决空指针，自然就是提前对对象进行判空校验；通常情况下，会使用<code>if( null != obj )</code>进行对象校验；在 Java 7 中，专门提供工具类<code>java.util.Objects</code>，让对象的判空校验更加简单；</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>Java 7 自带，不需要额外的依赖</li><li>静态方法，使用简单</li><li>仅支持对象判空</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li><p>Objects.isNull</p><p>判断对象是否为空，为<code>null</code>返回<code>true</code>，否则返回<code>false</code></p><p><code>Object obj = null;   System.out.println(Objects.isNull(obj)); // true      obj = new Object();   System.out.println(Objects.isNull(obj)); // false</code></p></li><li><p>Objects.nonNull</p><p>和<code>Objects.isNull</code>相反；判断对象不为空，为<code>null</code>返回<code>false</code>，否则返回<code>true</code></p><p><code>Object obj = null;   System.out.println(Objects.nonNull(obj)); // false      obj = new Object();   System.out.println(Objects.nonNull(obj)); // true</code></p></li><li><p>Objects.requireNonNull</p><p>校验非空，一旦对象为空，就会抛出空指针异常（NullPointerException），改方法可以自定义异常描述，方便异常之后能快速定位问题所在：</p><p><code>Object obj = null;   Objects.requireNonNull(obj);   // 自定义错误描述   Objects.requireNonNull(obj,&quot;obj 对象为空&quot;);</code></p><p>执行输出：</p><p><code>Exception in thread &quot;main&quot; java.lang.NullPointerException: obj 对象为空    at java.util.Objects.requireNonNull(Objects.java:228)    at com.ehang.helloworld.controller.NullTest.t5(NullTest.java:97)    at com.ehang.helloworld.controller.NullTest.main(NullTest.java:23)</code></p></li></ul><h2 id="2-字符串判空"><a href="#2-字符串判空" class="headerlink" title="2 字符串判空"></a>2 字符串判空</h2><p>字符串是开发过程中使用最多一种数据类型，因此对字符串的判断、校验也就必不可少了，原生的方式都是通过空对象，长度进行判断：</p><p><code>String str = &quot;一行Java&quot;   if ( null != str &amp;&amp; s1.length() &gt; 0 )&#123;    // 对str字符串进行使用   &#125;</code></p><p>但是，对字符串的校验，除了判空之外，还有很多其他的场景，比如判断是不是空串（String str = <code>&quot;&quot;</code>），是不是只有空格（String str = <code>&quot; &quot;</code>）等等，那这些校验，就会麻烦一些了；不过木有关系，现成的工具类已经足够满足了；</p><h3 id="Spring-StringUtil-工具类"><a href="#Spring-StringUtil-工具类" class="headerlink" title="Spring StringUtil 工具类"></a>Spring StringUtil 工具类</h3><p><code>org.springframework.util.StringUtils</code>  是 String 框架自带的字符串工具类，功能比较单一，在教新的版本中，这个工具类的字符串判空方法已经被弃用了，所以不太建议使用了；</p><ul><li><p>StringUtils.isEmpty</p><p>空对象以及空串的校验；</p><p><code>String s1 = null;   String s2 = &quot;&quot;;   String s3 = &quot; &quot;;   System.out.println(StringUtils.isEmpty(s1)); // true   System.out.println(StringUtils.isEmpty(s2)); // true   System.out.println(StringUtils.isEmpty(s3)); // false</code></p></li></ul><h3 id="apache-lang3-StringUtil-工具类"><a href="#apache-lang3-StringUtil-工具类" class="headerlink" title="apache lang3 StringUtil 工具类"></a>apache lang3 StringUtil 工具类</h3><p>apache lang3 StringUtil 工具类（<code>org.apache.commons.lang3.StringUtils</code>） 相比于 Spring 框架带的工具类，要强大太对了，涵盖了对 String 操作的所有封装；</p><p>判空校验的话主要有 4 个<code>StringUtils.isEmpty</code>、<code>StringUtils.isNotEmpty</code>、<code>StringUtils.isBlank</code>、<code>StringUtils.isNotBlank</code></p><ul><li><p>依赖</p><p><code>&lt;dependency&gt;       &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;       &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;   &lt;/dependency&gt;</code></p></li><li><p><code>StringUtils.isEmpty</code>和<code>StringUtils.isNotEmpty</code></p><p>判断字符串对象是否为空，以及字符串长度是否为 0；isEmpty 和 isNotEmpty 校验结果相反；</p><p><code>String s1 = null;   String s2 = &quot;&quot;;   String s3 = &quot; &quot;;   System.out.println(StringUtils.isEmpty(s1)); // true   System.out.println(StringUtils.isEmpty(s2)); // true   System.out.println(StringUtils.isEmpty(s3)); // false   System.out.println();   System.out.println(StringUtils.isNotEmpty(s1)); // false   System.out.println(StringUtils.isNotEmpty(s2)); // false   System.out.println(StringUtils.isNotEmpty(s3)); // true</code></p></li><li><p><code>StringUtils.isBlank</code>、<code>StringUtils.isNotBlank</code></p><p>在  <code>StringUtils.isEmpty</code>和<code>StringUtils.isNotEmpty</code>  判断的基础上，还会将字符串开头，结尾的空格去掉之后，判断长度是否大于 0</p><p><code>String s1 = null;   String s2 = &quot;&quot;;   String s3 = &quot; &quot;;   String s4 = &quot; 1  2    &quot;;   System.out.println(StringUtils.isBlank(s1)); // true  空对象   System.out.println(StringUtils.isBlank(s2)); // true  长度等于0   System.out.println(StringUtils.isBlank(s3)); // true  去掉前后空格之后，长度也等于0   System.out.println(StringUtils.isBlank(s4)); // false 去掉前后空格（1  2），长度大于0   System.out.println();   System.out.println(StringUtils.isNotBlank(s1)); // false   System.out.println(StringUtils.isNotBlank(s2)); // false   System.out.println(StringUtils.isNotBlank(s3)); // false   System.out.println(StringUtils.isNotBlank(s4)); // true</code></p></li><li><p>其他功能</p><p>本文主要是探讨判空校验，lang3 的 StringUtil 工具类几乎涵盖了所有关于 String 操作的封装，大大降低了我们处理 String 的复杂度，更多功能可参考官方文档</p><blockquote><p><a href="https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html">https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html</a></p></blockquote></li></ul><h2 id="3-字符串比较"><a href="#3-字符串比较" class="headerlink" title="3 字符串比较"></a>3 字符串比较</h2><p>在对字符串进行比较的时候，也需要特别注意 NPE 异常；</p><p>如下示例：</p><p><code>public Boolean isEhang(String name) &#123;       if (name.equals(&quot;ehang&quot;)) &#123;           return true;       &#125;       return false;   &#125;</code></p><p>当如果 name 为 null 的时候，就会出现 NPE 异常；</p><p>可以做如下调整：</p><p><code>if (&quot;ehang&quot;.equals(name))   ...</code></p><p>这样就算 name 为 null，即不会出现 NPE 异常，也能正常的判断；</p><h2 id="4Map、List、Set-判空"><a href="#4Map、List、Set-判空" class="headerlink" title="4Map、List、Set 判空"></a>4Map、List、Set 判空</h2><p>Map、List、Set 是经常会用到的数据结构，虽然他们都包含有<code>isEmpty()</code>方法，能判断容器中是否包含了元素，但是无法判断自生对象是否为空，一旦对象没有实例化时，调用 isEmpty()就会报空指针异常；Spring 为我们提供了一个<code>org.springframework.util.CollectionUtils</code>工具类，其中的<code>isEmpty</code>就会优先判断对象是否为空，然后再通过 isEmpty()判断是否存在元素，能大大减少因为对象为空带来的空指针异常；</p><p><code>Map map = null;   System.out.println(map.isEmpty()); // 空指针异常   System.out.println(CollectionUtils.isEmpty(map)); // true   map = new HashMap();   System.out.println(map.isEmpty()); // true   System.out.println(CollectionUtils.isEmpty(map)); // true   map.put(&quot;1&quot;, &quot;2&quot;);   System.out.println(CollectionUtils.isEmpty(map)); // false   System.out.println(map.isEmpty()); // false      List list = null;   System.out.println(list.isEmpty()); // 空指针异常   System.out.println(CollectionUtils.isEmpty(list)); // true   list = new ArrayList();   System.out.println(list.isEmpty()); // true   System.out.println(CollectionUtils.isEmpty(list)); // true   list.add(&quot;1&quot;);   System.out.println(CollectionUtils.isEmpty(list)); // false   System.out.println(list.isEmpty()); // false      Set set = null;   System.out.println(set.isEmpty()); // 空指针异常   System.out.println(CollectionUtils.isEmpty(set)); // true   set = new TreeSet();   System.out.println(set.isEmpty()); // true   System.out.println(CollectionUtils.isEmpty(set)); // true   set.add(&quot;1&quot;);   System.out.println(CollectionUtils.isEmpty(set)); // false   System.out.println(set.isEmpty()); // false</code></p><p>除了判空之外，该工具类还包含了很多很实用的方法，比如获取第一个元素：firstElement() 、最后一个元素：lastElement()、是否包含某个元素：contains() 等等</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/GjuWRiaNxhnS2MndYxlDMJwWcbNzLciacPicRjupzVmsDX3kqN4lOCWuOrKAiaabNaicR6sh8BMv6KFoONQyBNK0UBg/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="Image"></p><h3 id="hutool-的-CollectionUtil"><a href="#hutool-的-CollectionUtil" class="headerlink" title="hutool 的 CollectionUtil"></a>hutool 的 CollectionUtil</h3><p>单纯判空，前面 Spring 的 CollectionUtils 已经足够，其他的功能也够满足绝大部分的使用场景；<code>hutool的CollectionUtil</code>提供了更加完善的功能，如果需要，也可以选用；</p><p>依赖：</p><p><code>&lt;dependency&gt;       &lt;groupId&gt;cn.hutool&lt;/groupId&gt;       &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;       &lt;version&gt;5.7.22&lt;/version&gt;   &lt;/dependency&gt;</code></p><p>方法列表：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/GjuWRiaNxhnS2MndYxlDMJwWcbNzLciacP1FBDEA231NOPu0NxDpLNs9JricgiagoXb1jdDv8f8DTepn1SibrHfeXmw/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="Image"></p><h2 id="5-赋初始值、尽量不要返回-null-对象"><a href="#5-赋初始值、尽量不要返回-null-对象" class="headerlink" title="5 赋初始值、尽量不要返回 null 对象"></a>5 赋初始值、尽量不要返回 null 对象</h2><p>当定于局部变量，定义对象的属性时，能赋初始值的就尽量带上初始值；</p><p><code>Map map = new HashMap();      private Integer age = 0;</code></p><p>当方法有返回值的时候，非必要的情况下，尽量不要返回 null；</p><p>比如一个方法的执行最终返回的是 List，当 List 没有值的时候，可以不返回 null 对象，而是可以返回一个空的 List</p><p><code>public List select()&#123;       // 这里处理其他逻辑       // 一旦返回的是null是，返回一个空List对象       return Collections.emptyList();   &#125;</code></p><h2 id="6Optional"><a href="#6Optional" class="headerlink" title="6Optional"></a>6Optional</h2><p>Optional 是 Java 8 提供的一个对象容器，目的就是为了能有效的解决这个烦人的空指针异常，我们可以将 Optional 看成一个对象给包装类；</p><ul><li><p>实例化 Optional 对象</p><p><code>Object o1 = null;   Optional&lt;Object&gt; op1 = Optional.of(o1);   Optional&lt;Object&gt; op2 = Optional.ofNullable(o1);</code></p><p><strong>Optional.of()</strong></p><p>当对象为 null 时，创建过程就会抛出 NPE 异常</p><p><strong>Optional.ofNullable()</strong></p><p>当对象为 null 时，也能正常返回 Optional 对象</p></li><li><p>判空 isPresent()</p><p><code>Integer i1 = null;   Optional&lt;Integer&gt; op1 = Optional.of(i1);   System.out.println(op1.isPresent()); // false      Integer i2 = 123;   Optional&lt;Integer&gt; op2 = Optional.ofNullable(i2);   System.out.println(op2.isPresent()); // true   op2.ifPresent(i-&gt;&#123;       System.out.println(i);   &#125;);</code></p><p>isPresent() 当对象为 null 返回 true，不为空时返回 false</p><p>lambda 表示式的链式处理：</p><p><code>op2.ifPresent(obj-&gt;&#123;       System.out.println(obj);   &#125;);</code></p></li><li><p>取值</p><p><code>// 取出原值，如果原对象为null会报NoSuchElementException异常   Integer integer = op2.get();   // 取出原值，如果原值为空，则返回指点的默认值   Integer integer1 = op1.orElse(456);   // 取出原值，如果原值为空，返回默认值，不过在返回之前还需要做一些其他的事情   Integer integer2 = op2.orElseGet(() -&gt; &#123;       // 在这里做一些其他的操作       return 456;   &#125;);      // 取出原值，如果原值为空，就抛出指定的异常   op2.orElseThrow(RuntimeException::new);   op2.orElseThrow(() -&gt; new RuntimeException(&quot;不好，我的值是空的！&quot;));</code></p></li><li><p>map() 和 flatMap()</p><p>编码过程中，经常会出现：a.xxx().yyy().zzz().mmm() 这样链式调用，这个过程，一旦中间有任意一环出现问题，就会 NPE 异常，因此，我们就可以借助 map() 和 flatMap()来避免这个问题；</p><p>测试对象：</p><p><code>@Data   @NoArgsConstructor   @AllArgsConstructor   static class User &#123;       private String name;          private Integer age;          private Optional&lt;String&gt; addr;   &#125;</code></p><p>测试：</p><p><code>// 得到姓名的长度，如果没有姓名就返回0   Integer nameLen = Optional.of(new User(null, 10, null))           .map(User::getName)           .map(String::length)           .orElse(0);   System.out.println(nameLen);      // 得到地址的长度，如果没有姓名就返回0   Integer addr = Optional.of(new User(null, 10, Optional.of(&quot;北京&quot;)))           .flatMap(User::getAddr)           .map(String::length)           .orElse(0);   System.out.println(addr);</code></p><p>map 会将返回的对象封装成 Optional 对象，如果返回的对象本身就是一个 Optional 对象了，那就使用 flatMap()</p></li></ul><h2 id="7-断言"><a href="#7-断言" class="headerlink" title="7 断言"></a>7 断言</h2><p>Spring 中的  <code>org.springframework.util.Assert</code>  翻译为中文为”<strong>断言</strong>“，它用来断定某一个实际的运行值和预期项是否一致，不一致就抛出异常。借助这个类，同样也可以做判空检验；</p><p>Assert 类提供了以下的静态方法：</p><p>方法名</p><p>描述</p><p>失败时抛出异常</p><p>isNull(Object object, String message)</p><p>object 不为空，抛出异常</p><p>IllegalArgumentException</p><p>notNull(Object object, String message)</p><p>object 为空，抛出异常</p><p>IllegalArgumentException</p><p>hasLength(String text, String message)</p><p>text 是空字符串，抛出异常</p><p>IllegalArgumentException</p><p>hasText(String text, String message)</p><p>不包含空白字符串，抛出异常</p><p>IllegalArgumentException</p><p>doesNotContain(String textToSearch, String substring, String message)</p><p>textToSearch 中包含 substring，抛出异常</p><p>IllegalArgumentException</p><p>notEmpty(Object[] array, String message)</p><p>array 为空或长度为 1，抛出异常</p><p>IllegalArgumentException</p><p>noNullElements(Object[] array, String message)</p><p>array 中包含 null 元系，抛异常</p><p>IllegalArgumentException</p><p>notEmpty(Collection collection, String message)</p><p>collection 不包含元素，抛出异常</p><p>IllegalArgumentException</p><p>notEmpty(Map map, String message)</p><p>map 中包含 null，抛出异常</p><p>IllegalArgumentException</p><p>isInstanceOf(Class type, Object obj, String message)</p><p>如果 obj 不是 type 类型，抛出异常</p><p>IllegalArgumentException</p><p>isAssignable(Class superType, Class subType, String message)</p><p>subType 不是 superType 子类，抛出异常</p><p>IllegalArgumentException</p><p>state(boolean expression, String message)</p><p>expression 不为 true 抛出异常</p><p>IllegalStateException</p><p>isTrue(boolean expression, String message)</p><p>expression 不为 true 抛出异常</p><p>IllegalArgumentException</p><p><code>Integer i1 = null;   Assert.notNull(i1,&quot;i1 不为空&quot;);      Map map = null;   Assert.notEmpty(map,&quot;map 不为空&quot;);</code></p><p>异常：</p><p><code>Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: map 不为空    at org.springframework.util.Assert.notEmpty(Assert.java:555)    at com.ehang.helloworld.controller.NullTest.t6(NullTest.java:119)    at com.ehang.helloworld.controller.NullTest.main(NullTest.java:23)</code></p><p>特别注意：</p><p>Assert 用来断定某一个实际的运行值和预期项是否一致，所以他和其他工具类的校验方式是反着在；比如<code>isNull</code>方法是期望对象为 null，如果不为空的时候，就会报错；<code>notNull</code>表示期望对象不为空，当对象为空时，就会报错；</p><h2 id="8-局部变量使用基本数据类型"><a href="#8-局部变量使用基本数据类型" class="headerlink" title="8 局部变量使用基本数据类型"></a>8 局部变量使用基本数据类型</h2><p>在之前的文章《<a href="http://mp.weixin.qq.com/s?__biz=MzU5MDgyMzc2OA==&amp;mid=2247529733&amp;idx=1&amp;sn=e7224db5ad19b40cb89ba55c4b28a04e&amp;chksm=fe3a5d32c94dd42419215a658f45dfaff0de4bb31d79c6d0721efdfaf9eb61ae5597e0f8f59b&amp;scene=21#wechat_redirect"><strong>阿里为何禁止在对象中使用基本数据类型</strong></a>》中，从性能的角度，推荐局部变量的定义尽量使用基本数据类型，能不用包装类就不用；那么从今天文章的角度来说，使用基本数据类型也能有效的避免空指针异常；</p><p>如下实例：</p><p><code>int x;   Integer y;   System.out.println( x + 1 );  // 编译失败   System.out.println( y + 1 );  // 编译失败      int i = 1;   Integer j = null;   System.out.println( i + 1 );  // 正常   System.out.println( j + 1 );  // 空指针异常   int m = i; // 正常   int n = j; // 空指针异常</code></p><p>当变量 x、y 只定义、不赋值的时候，x + 1 和 y + 1 是没办法通过编译的；而包装类 j 是可以指定<code>null</code>对象，当包装类参与运算的时候，首先会做拆箱操作，也就是调用 intValue() 方法，由于对象是空的，调用方法自然就会报空指针；同时，将一个包装类赋值给一个基本数据类型时，同样也会做拆箱操作，自然也就空指针异常了；</p><p>但是，基本数据类型就必须指定一个具体值，后续不管运算、还是赋值操作，都不会出现空指针异常；</p><h2 id="9-提前校验参数"><a href="#9-提前校验参数" class="headerlink" title="9 提前校验参数"></a>9 提前校验参数</h2><p>后台数据，绝大部分都是通过终端请求传递上来的，所以需要在最接近用户的地方，把该校验的参数都校验了；比如 StringBoot 项目，就需要在 Controller 层将客户端请求的参数做校验，一旦必传的参数没有传值，就应该直接给客户端报错并提醒用户，而不是将这些不符合要求的 null 值传到 Service 甚至保存到数据库，尽早的校验并拦截，就能大大降低出问题的概率</p><p>之前介绍的<code>hibernate-validator</code>就能完美解决参数校验问题，详见：<a href="http://mp.weixin.qq.com/s?__biz=MzU5MDgyMzc2OA==&amp;mid=2247485242&amp;idx=1&amp;sn=ef7d40542e8b2f0cf566d416147244d3&amp;chksm=fe392f0dc94ea61b9bf6b4bff1aefb15282bc61189f0a8429121f800102c23c08e2b3e6f0d77&amp;scene=21#wechat_redirect"><strong>SpringBoot！你的请求、响应、异常规范了吗？</strong></a></p><h2 id="10IDEA-提醒"><a href="#10IDEA-提醒" class="headerlink" title="10IDEA 提醒"></a>10IDEA 提醒</h2><p>IDEA 对空对象或者可能会出现 null 值的对象会有提醒，可以根据提醒来提前感知并预防</p><p><code>public static String t1(int i)&#123;       String name1 = null;       String name2 = null;       if(i&gt;0)&#123;           name2 = &quot;ehang&quot;;       &#125;       t2(name1);       t2(name2);       return name2;   &#125;</code></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/GjuWRiaNxhnS2MndYxlDMJwWcbNzLciacPRDMTrT2Zl7jJ2O4WQKmRXu10KC1eDIMgBD0keSyMGl4bGesrCzTSvQ/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="Image"></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> 告别非空判断 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的返回体封装工具类</title>
      <link href="/posts/23520.html"/>
      <url>/posts/23520.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回体工具</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DtoResult</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">STATUS_CODE_SUCCESS</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">STATUS_CODE_ERROR</span> <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DtoResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setCode(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DtoResult</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DtoResult</span><span class="params">(Integer code, String message, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setCode(code);</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DtoResult</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setCode(code);</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; DtoResult&lt;T&gt; <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DtoResult</span>&lt;T&gt;(<span class="number">0</span>, <span class="string">&quot;操作成功&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; DtoResult&lt;T&gt; <span class="title function_">ok</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DtoResult</span>&lt;T&gt;(<span class="number">0</span>, <span class="string">&quot;操作成功&quot;</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; DtoResult&lt;T&gt; <span class="title function_">ok</span><span class="params">(String message, T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DtoResult</span>&lt;T&gt;(<span class="number">0</span>, message, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; DtoResult&lt;T&gt; <span class="title function_">error</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DtoResult</span>&lt;T&gt;(<span class="number">500</span>, <span class="string">&quot;数据异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; DtoResult&lt;T&gt; <span class="title function_">error</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DtoResult</span>&lt;T&gt;(<span class="number">500</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; DtoResult&lt;T&gt; <span class="title function_">error</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DtoResult</span>&lt;T&gt;(code, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> 常用的返回体封装工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>执行简单的定时任务之ScheduledExecutorService</title>
      <link href="/posts/55320.html"/>
      <url>/posts/55320.html</url>
      
        <content type="html"><![CDATA[<p><code>ScheduledExecutorService</code>有线程池的特性，也可以实现任务循环执行，可以看作是一个简单地定时任务组件，因为有线程池特性，所以任务之间可以多线程并发执行，互不影响，当任务来的时候，才会真正创建线程去执行<br>我们在做一些普通定时循环任务时可以用它，比如定时刷新字典常量，只需要不断重复执行即可，这篇文章讲解一下它的用法以及注意事项，不涉及底层原理</p><p>注意：我们都知道，在使用线程池的时候，如果我们的任务出现异常没有捕获，那么线程会销毁被回收，不会影响其他任务继续提交并执行，但是在这里，如果你的任务出现异常没有捕获，会导致后续的任务不再执行，所以一定要<code>try...catch</code></p><h3 id="1-延迟不循环任务schedule方法"><a href="#1-延迟不循环任务schedule方法" class="headerlink" title="1. 延迟不循环任务schedule方法"></a>1. 延迟不循环任务<code>schedule</code>方法</h3><p><code>schedule(Runnable command, long delay, TimeUnit unit)</code><br>参数 1：任务<br>参数 2：方法第一次执行的延迟时间<br>参数 3：延迟单位<br>说明：延迟任务，只执行一次(不会再次执行)，参数 2 为延迟时间</p><p><strong>案例说明：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MineExecutors</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">ScheduledExecutorService</span> <span class="variable">scheduler</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:sss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        scheduler.schedule(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;开始执行...time &#123;&#125;&quot;</span>, format.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                log.info(<span class="string">&quot;执行结束...time &#123;&#125;&quot;</span>, format.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;定时任务执行出错&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">log.info(<span class="string">&quot;初始化成功 &#123;&#125;&quot;</span>, format.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>可以看到任务执行时间为初始化完成后 5s 才开始执行，且只执行一次</strong><br><img src="https://img-blog.csdnimg.cn/b712abc87287474b9d24d3639b05d161.png" alt="在这里插入图片描述"></p><h3 id="2-延迟且循环cheduleAtFixedRate方法"><a href="#2-延迟且循环cheduleAtFixedRate方法" class="headerlink" title="2. 延迟且循环cheduleAtFixedRate方法"></a>2. 延迟且循环<code>cheduleAtFixedRate</code>方法</h3><p><code>cheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)</code><br>参数 1：任务<br>参数 2：初始化完成后延迟多长时间执行第一次任务<br>参数 3：任务时间间隔<br>参数 4：单位<br>方法解释：是以上一个任务开始的时间计时，比如<code>period</code>为 5，那 5 秒后，检测上一个任务是否执行完毕，如果上一个任务执行完毕，则当前任务立即执行，如果上一个任务没有执行完毕，则需要等上一个任务执行完毕后立即执行，如果你的任务执行时间超过 5 秒，那么任务时间间隔参数将无效，任务会不停地循环执行，由此可得出该方法不能严格保证任务按一定时间间隔执行</p><p><strong>错误：任务连续执行案例：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MineExecutors</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">ScheduledExecutorService</span> <span class="variable">scheduler</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        scheduler.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;开始执行...time &#123;&#125;&quot;</span>, format.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                log.info(<span class="string">&quot;执行结束...time &#123;&#125;&quot;</span>, format.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;定时任务执行出错&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>, <span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">        log.info(<span class="string">&quot;初始化成功 &#123;&#125;&quot;</span>, format.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由上面代码可以看出，任务执行需要 3 秒，而我们设定的任务时间间隔为 2 秒，如此就会导致任务连续执行，该方法不能严格保证任务按照规定的时间间隔执行，如果你的任务执行时间可以保证忽略不计，则可以使用该方法，我们可以看到下面日志，上一个任务的执行结束时间与下一个任务的开始时间一致，所以任务连续循环执行了<br><img src="https://img-blog.csdnimg.cn/342f374f94ef437ebbdd0701a77ea511.png" alt="在这里插入图片描述"><br><strong>正确案例：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MineExecutors</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">ScheduledExecutorService</span> <span class="variable">scheduler</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        scheduler.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;开始执行...time &#123;&#125;&quot;</span>, format.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                log.info(<span class="string">&quot;执行结束...time &#123;&#125;&quot;</span>, format.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;定时任务执行出错&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">        log.info(<span class="string">&quot;初始化成功 &#123;&#125;&quot;</span>, format.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到任务以上一次任务的开始时间，按 3 秒一次的方式执行<br><img src="https://img-blog.csdnimg.cn/1d9a4328e296470da79d9623009b1765.png" alt="在这里插入图片描述"></p><h3 id="3-严格按照一定时间间隔执行"><a href="#3-严格按照一定时间间隔执行" class="headerlink" title="3. 严格按照一定时间间隔执行``"></a>3. 严格按照一定时间间隔执行``</h3><p><code>scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit);</code><br>参数 1：任务<br>参数 2：初始化完成后延迟多长时间执行第一次任务<br>参数 3：任务执行时间间隔<br>参数 4：单位<br>解释：以上一次任务执行结束时间为准，加上任务时间间隔作为下一次任务开始时间，由此可以得出，任务可以严格按照时间间隔执行</p><p><strong>案例：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MineExecutors</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">ScheduledExecutorService</span> <span class="variable">scheduler</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        scheduler.scheduleWithFixedDelay(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;开始执行...time &#123;&#125;&quot;</span>, format.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                log.info(<span class="string">&quot;执行结束...time &#123;&#125;&quot;</span>, format.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;定时任务执行出错&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">        log.info(<span class="string">&quot;初始化成功 &#123;&#125;&quot;</span>, format.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由下图日志可以看出，下次任务的开始时间是在上一次任务结束时间+任务时间间隔为准的，严格按照任务时间间隔，规律执行，如果你的任务需要保证严格的时间间隔，可以用该方法启动任务<br><img src="https://img-blog.csdnimg.cn/fb439ae9f2f4441ca611a83d24dc1a6a.png" alt="在这里插入图片描述"></p><p>其他用法与线程池没有差异了，例如<code>ThreadFactory</code>作为参数传入，<a href="https://so.csdn.net/so/search?q=%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E6%B1%A0&amp;spm=1001.2101.3001.7020">自定义线程池</a>内线程名称之类的，不多解释了。</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> 执行简单的定时任务之ScheduledExecutorService </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字处理</title>
      <link href="/posts/6824.html"/>
      <url>/posts/6824.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-double-的向上，向下，四舍五入，以及转为-int"><a href="#1-double-的向上，向下，四舍五入，以及转为-int" class="headerlink" title="1.double 的向上，向下，四舍五入，以及转为 int"></a>1.double 的向上，向下，四舍五入，以及转为 int</h2><h3 id="1-向输出上取整"><a href="#1-向输出上取整" class="headerlink" title="1.向输出上取整"></a>1.向输出上取整</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mathCeil</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Double</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">5.3</span>;</span><br><span class="line">    <span class="comment">// Double 向上取整</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">ceil</span> <span class="operator">=</span> Math.ceil(number);</span><br><span class="line">    System.out.println(<span class="string">&quot;number:&quot;</span> + number);</span><br><span class="line">    System.out.println(<span class="string">&quot;ceil:&quot;</span> + ceil);</span><br><span class="line">    <span class="type">int</span> <span class="variable">ceilRes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Double</span>(ceil).intValue();</span><br><span class="line">    System.out.println(<span class="string">&quot;ceilRes:&quot;</span> + ceilRes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">number:<span class="number">5.3</span></span><br><span class="line">ceil:<span class="number">6.0</span></span><br><span class="line">ceilRes:<span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="2-向下取整"><a href="#2-向下取整" class="headerlink" title="2.向下取整"></a>2.向下取整</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mathFloor</span> <span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Double</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">5.9</span>;</span><br><span class="line">    <span class="comment">// Double 向下取整</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">floor</span> <span class="operator">=</span> Math.floor(number);</span><br><span class="line">    System.out.println(<span class="string">&quot;number:&quot;</span> + number);</span><br><span class="line">    System.out.println(<span class="string">&quot;floor:&quot;</span> + floor);</span><br><span class="line">    <span class="type">int</span> <span class="variable">floorRes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Double</span>(floor).intValue();</span><br><span class="line">    System.out.println(<span class="string">&quot;floorRes:&quot;</span> + floorRes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">number:<span class="number">5.9</span></span><br><span class="line">floor:<span class="number">5.0</span></span><br><span class="line">floorRes:<span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="3-四舍五入"><a href="#3-四舍五入" class="headerlink" title="3.四舍五入"></a>3.四舍五入</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mathRound</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Double</span> <span class="variable">number1</span> <span class="operator">=</span> <span class="number">5.9</span>;</span><br><span class="line">    <span class="type">Double</span> <span class="variable">number2</span> <span class="operator">=</span> <span class="number">5.3</span>;</span><br><span class="line">    <span class="comment">// Double number1 四舍五入</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">round1</span> <span class="operator">=</span> Math.round(number1);</span><br><span class="line">    System.out.println(<span class="string">&quot;number1:&quot;</span> + number1);</span><br><span class="line">    System.out.println(<span class="string">&quot;round1:&quot;</span> + round1);</span><br><span class="line">    <span class="type">int</span> <span class="variable">round1Res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Double</span>(round1).intValue();</span><br><span class="line">    System.out.println(<span class="string">&quot;round1Res:&quot;</span> + round1Res);</span><br><span class="line">    <span class="comment">// Double number2 四舍五入</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">round2</span> <span class="operator">=</span> Math.round(number2);</span><br><span class="line">    System.out.println(<span class="string">&quot;number1:&quot;</span> + number2);</span><br><span class="line">    System.out.println(<span class="string">&quot;round2:&quot;</span> + round2);</span><br><span class="line">    <span class="type">int</span> <span class="variable">round2Res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Double</span>(round2).intValue();</span><br><span class="line">    System.out.println(<span class="string">&quot;round2Res:&quot;</span> + round2Res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">number1:<span class="number">5.9</span></span><br><span class="line">round1:<span class="number">6.0</span></span><br><span class="line">round1Res:<span class="number">6</span></span><br><span class="line"></span><br><span class="line">number1:<span class="number">5.3</span></span><br><span class="line">round2:<span class="number">5.0</span></span><br><span class="line">round2Res:<span class="number">5</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> 数字处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决cookie跨域问题</title>
      <link href="/posts/40883.html"/>
      <url>/posts/40883.html</url>
      
        <content type="html"><![CDATA[<p>业务需求：当前网站想要访问第三方网站的页面，第三方网站的页面接口都需要使用 cookie 认证授权<br>遇到的问题：当前网站和第三方网站不同域。在当前网站使用 iframe。跳转到第三方时。后台通过接口得到的 cookie 无法传递</p><p>解决方式 1:<br>nginx 反向代理，用当前网站的域代理第三方网站,然后用当前网站的域+第三方网站的接口 url 就能获取第三方网站的页面或数据<br>示例：<br>nginx.conf</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen  19100;</span><br><span class="line">        #server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://47.95.34.252:8084;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>js</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;http://127.0.0.1:19100/JcjcGl/Dcztjctky/Dcztbx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initPage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="title class_">Hussar</span>.<span class="property">ctxPath</span> + <span class="string">&#x27;/tTzJzdcDmjcd/jiuzhouAuth&#x27;</span>,</span><br><span class="line">    <span class="attr">async</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">code</span> == <span class="number">200</span>) &#123;</span><br><span class="line">        $(<span class="string">&#x27;#page&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, url)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title class_">Hussar</span>.<span class="title function_">error</span>(<span class="string">&#x27;九州系统认证失败,请刷新重试&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">error</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title class_">Hussar</span>.<span class="title function_">error</span>(<span class="string">&#x27;九州系统认证失败，请刷新重试&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/jiuzhouAuth&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">jiuzhouAuth</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; res = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cookieStr</span> <span class="operator">=</span> dmjcdService.callRemoteInterfaceGetCookie();</span><br><span class="line">        response.setHeader(<span class="string">&quot;Set-Cookie&quot;</span>, cookieStr);</span><br><span class="line">        res.put(<span class="string">&quot;code&quot;</span>, HttpCode.OK);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        res.put(<span class="string">&quot;code&quot;</span>, HttpCode.INTERNAL_SERVER_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> 解决cookie跨域问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取当前系统的文件分隔符</title>
      <link href="/posts/26054.html"/>
      <url>/posts/26054.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">outPath</span> <span class="operator">=</span> parentFile.getCanonicalPath() + File.separator + <span class="string">&quot;temp-&quot;</span> + fileName;<span class="comment">// File.separator会根据当前的系统自动获得&#x27;/&#x27;或者&#x27;\\&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> 获取当前系统的文件分隔符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间日期整理</title>
      <link href="/posts/57711.html"/>
      <url>/posts/57711.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java-中的-Timestamp-对应-mysql-中的-dateTime-类型"><a href="#Java-中的-Timestamp-对应-mysql-中的-dateTime-类型" class="headerlink" title="Java 中的 Timestamp 对应 mysql 中的 dateTime 类型"></a>Java 中的 Timestamp 对应 mysql 中的 dateTime 类型</h2><p>比如：java 的 bean 类型是 Timestamp<br>插入的时候这么写,这样插入完成后。mysql 数据库里就是 datatime 类型的数据了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">setUpdateTime(<span class="keyword">new</span> <span class="title class_">Timestamp</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().getTime()));</span><br></pre></td></tr></table></figure><p>也可以分开写如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.util.<span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Date();   <span class="comment">// 获取一个Date对象</span></span><br><span class="line"><span class="type">Timestamp</span> <span class="variable">timeStamp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timestamp</span>(date.getTime());  <span class="comment">// 给对象赋值该值插入就行了</span></span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/mybloging/p/8067698.html"><strong>Java：String 和 Date、Timestamp 之间的转换</strong></a></p><h2 id="String-与-Date（java-util-Date）互转"><a href="#String-与-Date（java-util-Date）互转" class="headerlink" title="String 与 Date（java.util.Date）互转"></a>String 与 Date（java.util.Date）互转</h2><p>String -&gt; Date</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> <span class="string">&quot;2010/05/04 12:34:23&quot;</span>;</span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="comment">//注意format的格式要与日期String的格式相匹配</span></span><br><span class="line"><span class="type">DateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    date = sdf.parse(dateStr);</span><br><span class="line">    System.out.println(date.toString());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Date -&gt; String</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"> <span class="comment">//format的格式可以任意</span></span><br><span class="line"> <span class="type">DateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>);</span><br><span class="line"> <span class="type">DateFormat</span> <span class="variable">sdf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH/mm/ss&quot;</span>);</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> dateStr = sdf.format(date);</span><br><span class="line"> System.out.println(dateStr);</span><br><span class="line"> dateStr = sdf2.format(date);</span><br><span class="line"> System.out.println(dateStr);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="String-与-Timestamp-互转"><a href="#String-与-Timestamp-互转" class="headerlink" title="String 与 Timestamp 互转"></a>String 与 Timestamp 互转</h2><p>String -&gt;Timestamp:使用 Timestamp 的 valueOf()方法<br>注：String 的类型必须形如： yyyy-mm-dd hh:mm:ss[.f…] 这样的格式，中括号表示可选，否则报错！！！<br>如果 String 为其他格式，可考虑重新解析下字符串，再重组~~</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Timestamp</span> <span class="variable">ts</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timestamp</span>(System.currentTimeMillis());</span><br><span class="line">       <span class="type">String</span> <span class="variable">tsStr</span> <span class="operator">=</span> <span class="string">&quot;2011-05-09 11:49:45&quot;</span>;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             ts = Timestamp.valueOf(tsStr);</span><br><span class="line">             System.out.println(ts);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>Timestamp -&gt; String:使用 Timestamp 的 toString()方法或者借用 DateFormat</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Timestamp</span> <span class="variable">ts</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timestamp</span>(System.currentTimeMillis());</span><br><span class="line">       <span class="type">String</span> <span class="variable">tsStr</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">         <span class="type">DateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>);</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="comment">//方法一</span></span><br><span class="line">             tsStr = sdf.format(ts);</span><br><span class="line">             System.out.println(tsStr);</span><br><span class="line">             <span class="comment">//方法二</span></span><br><span class="line">             tsStr = ts.toString();</span><br><span class="line">             System.out.println(tsStr);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure><h2 id="Date（-java-util-Date-）和-Timestamp-互转"><a href="#Date（-java-util-Date-）和-Timestamp-互转" class="headerlink" title="Date（ java.util.Date ）和 Timestamp 互转"></a>Date（ java.util.Date ）和 Timestamp 互转</h2><p>声明：查 API 可知，Date 和 Timestamp 是父子类关系,Date 是 Timestamp 的父类</p><p>Timestamp -&gt; Date<br>ate 对象指向的实体是一个 Timestamp，即 date 拥有 Date 类的方法，但被覆盖的方法的执行实体在 Timestamp 中。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Timestamp</span> <span class="variable">ts</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timestamp</span>(System.currentTimeMillis());</span><br><span class="line">         <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             date = ts;</span><br><span class="line">             System.out.println(date);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>Date -&gt; Timestamp（父类不能直接向子类转化）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Timestamp</span> <span class="variable">ts</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timestamp</span>(date.getTime());</span><br></pre></td></tr></table></figure><hr><p>以上都是旧的。过期的，因为 Date 类是非线程安全的<br>在 java8 里<br>mysql 的 date 对应 java 的 LoacalDate<br>mysql 的 dateTime 对应 java 的 LocalDateTime</p><h2 id="获取-LoacalDateTime-或-LocalDate"><a href="#获取-LoacalDateTime-或-LocalDate" class="headerlink" title="获取 LoacalDateTime 或 LocalDate"></a>获取 LoacalDateTime 或 LocalDate</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">System.out.println(localDateTime);<span class="comment">// 2021-06-15T18:29:23.215(返回给前台展示时T会自动变成空格)</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">localDate</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">System.out.println(localDate);<span class="comment">// 2021-06-16</span></span><br></pre></td></tr></table></figure><h2 id="LocalDateTime-与-LocalDate-获取时间戳-如果要比较大小的话可以用计算出的时间戳来比较"><a href="#LocalDateTime-与-LocalDate-获取时间戳-如果要比较大小的话可以用计算出的时间戳来比较" class="headerlink" title="LocalDateTime 与 LocalDate 获取时间戳(如果要比较大小的话可以用计算出的时间戳来比较)"></a>LocalDateTime 与 LocalDate 获取时间戳(如果要比较大小的话可以用计算出的时间戳来比较)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认时区是</span></span><br><span class="line">ZoneId.systemDefault()</span><br><span class="line"><span class="comment">//北京时区</span></span><br><span class="line"><span class="type">ZoneId</span> <span class="variable">bjZone</span> <span class="operator">=</span> ZoneId.of(<span class="string">&quot;GMT+08:00&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LocalDate获取时间戳</span></span><br><span class="line"><span class="comment">//创建localDate：2021-06-16</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">localDate</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line"><span class="comment">//localDate 转 LocalDateTime ：2021-06-16T00:00</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> localDate.atStartOfDay();</span><br><span class="line"><span class="comment">//LocalDateTime  epoch-second 值，它是从 1970-01-01T00:00:00Z 开始经过的秒数。</span></span><br><span class="line"><span class="type">long</span> <span class="variable">l1</span> <span class="operator">=</span> localDateTime.atZone(ZoneId.systemDefault()).toEpochSecond();</span><br><span class="line"><span class="comment">//toEpochMilli: 自 1970-01-01T00:00:00Z 纪元以来的毫秒数</span></span><br><span class="line"><span class="type">long</span> <span class="variable">l2</span> <span class="operator">=</span> localDateTime.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli();</span><br><span class="line">System.out.println(<span class="string">&quot;秒 : &quot;</span>+l1);</span><br><span class="line">System.out.println(<span class="string">&quot;毫秒 : &quot;</span>+l2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// LocalDateTime获取时间戳</span></span><br><span class="line"><span class="comment">// 获取秒</span></span><br><span class="line"><span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> LocalDateTime.now().atZone(ZoneId.systemDefault()).toEpochSecond();</span><br><span class="line"><span class="comment">//获取毫秒</span></span><br><span class="line"><span class="type">long</span> <span class="variable">l1</span> <span class="operator">=</span> LocalDateTime.now().atZone(ZoneId.systemDefault()).toInstant().toEpochMilli();</span><br><span class="line">System.out.println(<span class="string">&quot;秒： &quot;</span>+l);</span><br><span class="line">System.out.println(<span class="string">&quot;毫秒： &quot;</span>+l1);</span><br></pre></td></tr></table></figure><h2 id="LocalDateTime-与-LocalDate-的相互转化"><a href="#LocalDateTime-与-LocalDate-的相互转化" class="headerlink" title="LocalDateTime 与 LocalDate 的相互转化"></a>LocalDateTime 与 LocalDate 的相互转化</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LocalDateTime-&gt;LocalDate</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">localDate</span> <span class="operator">=</span> now.toLocalDate();</span><br><span class="line"></span><br><span class="line"><span class="comment">// LocalDate-&gt;LocalDateTime</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">localDate</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime1</span> <span class="operator">=</span> localDate.atStartOfDay();</span><br><span class="line"><span class="comment">//23时1分2秒</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime2</span> <span class="operator">=</span> localDate.atTime(<span class="number">23</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">//localTime ：时、分、秒、毫秒 ： 10:18:43.639</span></span><br><span class="line"><span class="type">LocalTime</span> <span class="variable">localTime</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line"><span class="comment">//拼接当前时间</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime3</span> <span class="operator">=</span> localDate.atTime(localTime);</span><br><span class="line">System.out.println(<span class="string">&quot;atStartOfDay:日期后面拼接 00点00分 ： &quot;</span>+localDateTime</span><br><span class="line">System.out.println(<span class="string">&quot;atTime：参数分别代表 时、分、秒： &quot;</span>+localDateTime2);</span><br><span class="line">System.out.println(<span class="string">&quot;atTime:拼接当前localTime : &quot;</span>+localDateTime3);</span><br></pre></td></tr></table></figure><h2 id="LocalDateTime-与-String-的相互转化"><a href="#LocalDateTime-与-String-的相互转化" class="headerlink" title="LocalDateTime 与 String 的相互转化"></a>LocalDateTime 与 String 的相互转化</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.具有转换功能的对象`</span></span><br><span class="line"></span><br><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">df</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(``<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>``);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.要转换的对象`    </span></span><br><span class="line"></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">time</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.发动功能`</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">localTime</span> <span class="operator">=</span> df.format(time);`</span><br><span class="line"></span><br><span class="line">System.out.println(``<span class="string">&quot;LocalDateTime转成String类型的时间：&quot;</span>``+localTime);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.LocalDate发动，将字符串转换成  df格式的LocalDateTime对象，的功能`</span></span><br><span class="line"></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">LocalTime</span> <span class="operator">=</span> LocalDateTime.parse(localTime,df)</span><br><span class="line"></span><br><span class="line">System.out.println(``<span class="string">&quot;String类型的时间转成LocalDateTime：&quot;</span>``+LocalTime);</span><br></pre></td></tr></table></figure><h2 id="LocalDate-与-String-的相互转化"><a href="#LocalDate-与-String-的相互转化" class="headerlink" title="LocalDate 与 String 的相互转化"></a>LocalDate 与 String 的相互转化</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">struct</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(``<span class="string">&quot;yyyy-MM-dd&quot;</span>``)</span><br><span class="line"></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">localDate</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> struct.format(localDate)</span><br><span class="line"></span><br><span class="line">System.out.println(``<span class="string">&quot;LocalDate转成String类型的时间：&quot;</span>``+format)</span><br><span class="line"></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">parse</span> <span class="operator">=</span> LocalDate.parse(format,struct)</span><br><span class="line"></span><br><span class="line">System.out.println(``<span class="string">&quot;String类型的时间转成LocalDateTime：&quot;</span>``+parse);</span><br></pre></td></tr></table></figure><h2 id="LocalDateTime-与-Date-的相互转化"><a href="#LocalDateTime-与-Date-的相互转化" class="headerlink" title="LocalDateTime 与 Date 的相互转化"></a>LocalDateTime 与 Date 的相互转化</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Date-&gt;LocalDateTime</span></span><br><span class="line">java.util.<span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span>` `<span class="keyword">new</span>` `java.util.Date();</span><br><span class="line"></span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> date.toInstant();</span><br><span class="line"></span><br><span class="line"><span class="type">ZoneId</span> <span class="variable">zone</span> <span class="operator">=</span> ZoneId.systemDefault();</span><br><span class="line"></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.ofInstant(instant, zone);</span><br><span class="line"></span><br><span class="line"><span class="comment">// LocalDateTime-&gt;Date</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"></span><br><span class="line"><span class="type">ZoneId</span> <span class="variable">zone</span> <span class="operator">=</span> ZoneId.systemDefault();</span><br><span class="line"></span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> localDateTime.atZone(zone).toInstant();</span><br><span class="line"></span><br><span class="line">java.util.<span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> Date.from(instant);</span><br></pre></td></tr></table></figure><h2 id="LocalDate-与-Date-的相互转化"><a href="#LocalDate-与-Date-的相互转化" class="headerlink" title="LocalDate 与 Date 的相互转化"></a>LocalDate 与 Date 的相互转化</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LocalDate-&gt;Date</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">localDate</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line"></span><br><span class="line"><span class="type">ZoneId</span> <span class="variable">zone</span> <span class="operator">=</span> ZoneId.systemDefault();</span><br><span class="line"></span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> localDate.atStartOfDay().atZone(zone).toInstant();</span><br><span class="line"></span><br><span class="line">java.util.<span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> Date.from(instant);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Date-&gt;LocalDate</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> date.toInstant();</span><br><span class="line"><span class="type">ZoneId</span> <span class="variable">zoneId</span> <span class="operator">=</span> ZoneId.systemDefault();</span><br><span class="line"><span class="comment">// atZone()方法返回在指定时区从此Instant生成的ZonedDateTime。</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">localDate</span> <span class="operator">=</span> instant.atZone(zoneId).toLocalDate();</span><br></pre></td></tr></table></figure><h2 id="调整时间"><a href="#调整时间" class="headerlink" title="调整时间"></a>调整时间</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"><span class="comment">//明天</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">plusDays</span> <span class="operator">=</span> now.plusDays(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//昨天</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">plusDays2</span> <span class="operator">=</span> now.plusDays(-<span class="number">1</span>);</span><br><span class="line"><span class="comment">//还有时分等同理</span></span><br></pre></td></tr></table></figure><h2 id="间隔计算"><a href="#间隔计算" class="headerlink" title="间隔计算"></a>间隔计算</h2><p>使用 Duration 进行 day,hour,minute,second 等的计算<br>使用 Period 进行 Year,Month 的计算</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Duration</span> <span class="variable">duration</span> <span class="operator">=</span> Duration.between(localDateTime,localDateTime4);</span><br><span class="line">duration.toDays();</span><br><span class="line">duration.toHours();</span><br><span class="line">duration.toMinutes();</span><br><span class="line"></span><br><span class="line"><span class="type">Period</span> <span class="variable">period2</span> <span class="operator">=</span> Period.between(localDateTime.toLocalDate(),localDateTime4.toLocalDate());</span><br><span class="line">period2.getYears();</span><br><span class="line">period2.getMonths();</span><br><span class="line">period2.toTotalMonths();</span><br></pre></td></tr></table></figure><h2 id="判断是否是今天或昨天"><a href="#判断是否是今天或昨天" class="headerlink" title="判断是否是今天或昨天"></a>判断是否是今天或昨天</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">time</span> <span class="operator">=</span> <span class="string">&quot;2018-08-09 11:20:45&quot;</span>;</span><br><span class="line">  <span class="type">DateTimeFormatter</span> <span class="variable">dtf</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;uuuu-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">  <span class="type">LocalDateTime</span> <span class="variable">localTime</span> <span class="operator">=</span> LocalDateTime.parse(time, dtf);</span><br><span class="line">  <span class="type">LocalDateTime</span> <span class="variable">startTime</span> <span class="operator">=</span> LocalDate.now().atTime(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="type">LocalDateTime</span> <span class="variable">endTime</span> <span class="operator">=</span> LocalDate.now().atTime(<span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>);</span><br><span class="line">  <span class="type">LocalDateTime</span> <span class="variable">startYesterday</span> <span class="operator">=</span> LocalDate.now().plusDays(-<span class="number">1</span>).atTime(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="type">LocalDateTime</span> <span class="variable">endYesterday</span> <span class="operator">=</span> LocalDate.now().plusDays(-<span class="number">1</span>).atTime(<span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//如果小于昨天的开始日期</span></span><br><span class="line">  <span class="keyword">if</span> (localTime.isBefore(startYesterday)) &#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;时间是过去&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//时间是昨天</span></span><br><span class="line">  <span class="keyword">if</span> (localTime.isAfter(startYesterday) &amp;&amp; localTime.isBefore(endYesterday)) &#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;时间是昨天&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果大于今天的开始日期，小于今天的结束日期</span></span><br><span class="line">  <span class="keyword">if</span> (localTime.isAfter(startTime) &amp;&amp; localTime.isBefore(endTime)) &#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;时间是今天&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果大于今天的结束日期</span></span><br><span class="line">  <span class="keyword">if</span> (localTime.isAfter(endTime)) &#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;时间是未来&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="循环某段时间"><a href="#循环某段时间" class="headerlink" title="循环某段时间"></a>循环某段时间</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDate</span> <span class="variable">start</span> <span class="operator">=</span> LocalDate.of(<span class="number">2019</span>, <span class="number">4</span>, <span class="number">29</span>);</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">end</span> <span class="operator">=</span> LocalDate.of(<span class="number">2019</span>, <span class="number">7</span>, <span class="number">29</span>);</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">System.out.println(start);</span><br><span class="line">start = start.plusDays(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (start.toEpochDay() &lt;= end.toEpochDay());</span><br></pre></td></tr></table></figure><h2 id="获取最近-7-天每天开始和结束时间戳"><a href="#获取最近-7-天每天开始和结束时间戳" class="headerlink" title="获取最近 7 天每天开始和结束时间戳"></a>获取最近 7 天每天开始和结束时间戳</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDate</span> <span class="variable">start</span> <span class="operator">=</span> LocalDate.now().plusDays(-<span class="number">7</span>);</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">end</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">start.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant().toEpochMilli();</span><br><span class="line">start.atTime(LocalTime.MAX).atZone(ZoneId.systemDefault())</span><br><span class="line">.toInstant().toEpochMilli();</span><br><span class="line">start = start.plusDays(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (start.toEpochDay() &lt;= end.toEpochDay());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> 时间日期整理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获得文件路径三种方法以及区别</title>
      <link href="/posts/44339.html"/>
      <url>/posts/44339.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;.\\test.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回构造File对象时的路径</span></span><br><span class="line"><span class="comment">// 因此，如果File对象是使用相对路径创建的，则返回的值也将是相对路径。如果是绝对路径就返回绝对路径。</span></span><br><span class="line">System.out.println(file.getPath());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该方法返回文件的绝对路径。请注意！这里是有大坑的。如果你的文件在Java工程内，路径是按照编译后的路径计算的。</span></span><br><span class="line"><span class="comment">// 该方法只解析当前目录（代码所在的目录）的相对路径，如果初始化中的路径包含了速记符，速记符将不会被解析。</span></span><br><span class="line">System.out.println(file.getAbsolutePath());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 速记符不被解析有时候是很痛苦的事，我们可能需要知道具体的路径。getCanonicalPath()方法解决了这个问题。由于getCanonicalPath()读取的是文件系统，因此会降低性能。</span></span><br><span class="line"><span class="comment">// 如果我们确定没有使用速记符，并且驱动器号大小写已标准化（如果使用Windows OS），我们应该首选使用getAbsoultePath(),除非你的项目中必须使用getCanonicalPath()。</span></span><br><span class="line">System.out.println(file.getCanonicalPath());</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.\test.txt</span><br><span class="line">E:\workspace\Test\.\test.txt</span><br><span class="line">E:\workspace\Test\test.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> 获得文件路径三种方法以及区别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批量删除特定前缀key</title>
      <link href="/posts/11739.html"/>
      <url>/posts/11739.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli --scan --pattern &quot;ops-coffee-*&quot; | xargs -L 2000 redis-cli del</span><br></pre></td></tr></table></figure><p>其中 xargs -L 指令表示 xargs 一次读取的行数，也就是每次删除的 key 数量，一次读取太多 xargs 会报错</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> redis </category>
          
          <category> redis-cli </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> redis </tag>
            
            <tag> redis-cli </tag>
            
            <tag> 批量删除特定前缀key </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka生产者、消费者的消息可靠性方案实现</title>
      <link href="/posts/60348.html"/>
      <url>/posts/60348.html</url>
      
        <content type="html"><![CDATA[<p>以下代码基于 SpringKafka 2.3.13.RELEASE + Boot 2.2.9.RELEASE 实现</p><h1 id="Producer-消息的可靠性"><a href="#Producer-消息的可靠性" class="headerlink" title="Producer 消息的可靠性"></a>Producer 消息的可靠性</h1><p>实现方案：ack 模式调整 + 重试机制 + 规避重试机制下带来的问题</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.kafka:</span></span><br><span class="line"><span class="attr">producer:</span></span><br><span class="line">      <span class="comment">#这个参数可以是任意字符串，它是broker用来识别消息是来自哪个客户端的。在broker进行打印日志、衡量指标或者配额限制时会用到。</span></span><br><span class="line">      <span class="attr">clientId:</span> <span class="string">$&#123;spring.application.name&#125;</span> <span class="comment">#方便kafkaserver打印日志定位请求来源</span></span><br><span class="line">      <span class="attr">bootstrap-servers:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8080</span> <span class="comment">#kafka服务器地址，多个以逗号隔开</span></span><br><span class="line">      <span class="comment">#acks=0：生产者把消息发送到broker即认为成功，不等待broker的处理结果。这种方式的吞吐最高，但也是最容易丢失消息的。</span></span><br><span class="line">      <span class="comment">#acks=1：生产者会在该分区的leader写入消息并返回成功后，认为消息发送成功。如果群首写入消息失败，生产者会收到错误响应并进行重试。这种方式能够一定程度避免消息丢失，但如果leader宕机时该消息没有复制到其他副本，那么该消息还是会丢失。另外，如果我们使用同步方式来发送，延迟会比前一种方式大大增加（至少增加一个网络往返时间）；如果使用异步方式，应用感知不到延迟，吞吐量则会受异步正在发送中的数量限制。</span></span><br><span class="line">      <span class="comment">#acks=all：生产者会等待所有副本成功写入该消息，这种方式是最安全的，能够保证消息不丢失，但是延迟也是最大的。</span></span><br><span class="line">      <span class="attr">acks:</span> <span class="string">all</span> <span class="comment">#默认值：1</span></span><br><span class="line">      <span class="comment">#当生产者发送消息收到一个可恢复异常时，会进行重试，这个参数指定了重试的次数。在实际情况中，这个参数需要结合retry.backoff.ms来使用，建议总的重试时间比集群重新选举leader的时间长，这样可以避免生产者过早结束重试导致失败。</span></span><br><span class="line">      <span class="comment">#另外需注意，当开启重试时，若未设置max.in.flight.requests.per.connection=1，则可能出现发往同一个分区的两批消息的顺序出错，比如，第一批发送失败了，第二批成功了，然后第一批重试成功了，此时两者的顺序就颠倒了。</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">2</span>  <span class="comment">#发送失败时重试多少次，0=禁用重试（默认值）</span></span><br><span class="line">      <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">retry-backoff-ms:</span> <span class="number">1000</span> <span class="comment">#重试等待间隔</span></span><br><span class="line">      <span class="comment">#默认情况下消息是不压缩的，此参数可指定采用何种算法压缩消息，可取值：none,snappy,gzip,lz4。snappy压缩算法由Google研发，这种算法在性能和压缩比取得比较好的平衡；相比之下，gzip消耗更多的CPU资源，但是压缩效果也是最好的。通过使用压缩，我们可以节省网络带宽和Kafka存储成本。</span></span><br><span class="line">      <span class="attr">compressionType:</span> <span class="string">&quot;none&quot;</span> <span class="comment">#如果不开启压缩，可设置为none（默认值），比较大的消息可开启。</span></span><br><span class="line">      <span class="comment">#当多条消息发送到一个分区时，Producer会进行批量发送，这个参数指定了批量消息大小的上限（以字节为单位）。当批量消息达到这个大小时，Producer会一起发送到broker；但即使没有达到这个大小，生产者也会有定时机制来发送消息，避免消息延迟过大。</span></span><br><span class="line">      <span class="attr">batch-size:</span> <span class="number">16384</span> <span class="comment">#默认16K，值越小延迟越低，但是吞吐量和性能会降低。0=禁用批量发送</span></span><br><span class="line">      <span class="comment">#这个参数设置Producer暂存待发送消息的缓冲区内存的大小，如果应用调用send方法的速度大于Producer发送的速度，那么调用会阻塞一定（max.block.ms）时间后抛出异常。</span></span><br><span class="line">      <span class="attr">buffer-memory:</span> <span class="number">33554432</span> <span class="comment">#缓冲区默认大小32M</span></span><br></pre></td></tr></table></figure><p>生产者：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//该类需要为多列类型</span></span><br><span class="line"><span class="meta">@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerFuture</span> <span class="keyword">implements</span> <span class="title class_">FailureCallback</span>, SuccessCallback&lt;SendResult&lt;String, Object&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(ProducerFuture.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;String, Object&gt; kafkaTemplate;</span><br><span class="line">    <span class="keyword">private</span> String uniqueId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步发送消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topicLcs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">async</span><span class="params">(String topicLcs, String value)</span> &#123;</span><br><span class="line">        uniqueId = MDC.get(<span class="string">&quot;UNIQUE_ID&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;send &#123;&#125; data:&#123;&#125;&quot;</span>, topicLcs, value);</span><br><span class="line">        ListenableFuture&lt;SendResult&lt;String, Object&gt;&gt; listenableFuture = kafkaTemplate.send(topicLcs, value);</span><br><span class="line">        listenableFuture.addCallback(<span class="built_in">this</span>, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Throwable ex)</span> &#123;</span><br><span class="line">        MDC.put(UNIQUE_ID, uniqueId);</span><br><span class="line">        <span class="comment">//重试策略失败后，将进入该方法。在该重试方法中，可以做其他响应的业务逻辑，如告警、投放其他队列或落地失败的消息内容等</span></span><br><span class="line">        logger.error(<span class="string">&quot;sendFailure:&quot;</span>, ex);</span><br><span class="line">        MDC.remove(UNIQUE_ID);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(SendResult&lt;String, Object&gt; result)</span> &#123;</span><br><span class="line">        MDC.put(UNIQUE_ID, uniqueId);</span><br><span class="line">        logger.info(<span class="string">&quot;sendSuccess &#123;&#125; &quot;</span>, result.getRecordMetadata().topic() + result.getRecordMetadata().offset());</span><br><span class="line">        MDC.remove(UNIQUE_ID);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启用重试机制后带来的问题"><a href="#启用重试机制后带来的问题" class="headerlink" title="启用重试机制后带来的问题"></a>启用重试机制后带来的问题</h2><ol><li>重试过程中，<strong>一条消息只会向同一个分区进行重试发送</strong>，所以在重试的机制下，也能保证消息的全局幂等性</li><li>由于重试，可能导致消息在 Node 中的顺序和 Producer 发送时的顺序不一致。可以对 max.in.flight.requests.per.connectio（限制每个连接（指客户端与 Node 之间的 per.connection 连接）最多缓存  <strong>已发送但未收到响应的请求数</strong>，默认为 5）设置为 1，即可保证在重试机制下的消息顺序。</li></ol><h1 id="Consumer-消息的可靠性"><a href="#Consumer-消息的可靠性" class="headerlink" title="Consumer 消息的可靠性"></a>Consumer 消息的可靠性</h1><p>实现方案：手动提交 offset + 重试机制 + 死信队列（告警） + 死信队列消息采用其他策略去处理消息</p><p><a href="https://so.csdn.net/so/search?q=kafka&amp;spm=1001.2101.3001.7020">kafka</a>配置：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#kafka配置，更多配置请参考：KafkaProperties</span></span><br><span class="line"><span class="attr">spring.kafka:</span></span><br><span class="line">  <span class="comment">#消费者的配置，可参考：org.apache.kafka.clients.consumer.ConsumerConfig</span></span><br><span class="line">  <span class="attr">consumer:</span></span><br><span class="line">    <span class="comment">#暂不用提供clientId，2.x版本可放出来，1.x有多个topic且concurrency&gt;1会出现JMX注册时异常</span></span><br><span class="line">    <span class="comment">#clientId: $&#123;spring.application.name&#125; #方便kafkaserver打印日志定位请求来源</span></span><br><span class="line">    <span class="comment"># kafka集群</span></span><br><span class="line">    <span class="attr">bootstrap-servers:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8080</span> <span class="comment">#kafka服务器地址，多个以逗号隔开</span></span><br><span class="line">    <span class="comment">#指定了当消费者第一次读取分区或者无offset时拉取那个位置的消息，可以取值为latest（从最新的消息开始消费）,earliest（从最早的消息开始消费）,none（如果无offset就抛出异常）</span></span><br><span class="line">    <span class="attr">autoOffsetReset:</span> <span class="string">latest</span> <span class="comment">#默认值：latest</span></span><br><span class="line">    <span class="comment">#指定了消费者是否自动提交消费位移，默认为true。如果为true，你可能需要关注自动提交的时间间隔，该间隔由auto.commit.interval.ms设置。</span></span><br><span class="line">    <span class="attr">enable-auto-commit:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#周期性自动提交的间隔，单位毫秒</span></span><br><span class="line">    <span class="attr">auto-commit-interval:</span> <span class="number">2000</span> <span class="comment">#默认值：5000</span></span><br><span class="line">    <span class="comment">#参数允许消费者指定从broker读取消息时最小的Payload的字节数。当消费者从broker读取消息时，如果数据字节数小于这个阈值，broker会等待直到有足够的数据，然后才返回给消费者。对于写入量不高的主题来说，这个参数可以减少broker和消费者的压力，因为减少了往返的时间。而对于有大量消费者的主题来说，则可以明显减轻broker压力。</span></span><br><span class="line">    <span class="attr">fetchMinSize:</span> <span class="number">1</span> <span class="comment">#默认值： 1</span></span><br><span class="line">    <span class="comment">#上面的fetch.min.bytes参数指定了消费者读取的最小数据量，而这个参数则指定了消费者读取时最长等待时间，从而避免长时间阻塞。这个参数默认为500ms。</span></span><br><span class="line">    <span class="attr">fetchMaxWait:</span> <span class="number">500</span> <span class="comment">#默认值：500毫秒</span></span><br><span class="line">    <span class="comment">#这个参数控制一个poll()调用返回的记录数，即consumer每次批量拉多少条数据。</span></span><br><span class="line">    <span class="attr">maxPollRecords:</span> <span class="number">500</span> <span class="comment">#默认值：500</span></span><br></pre></td></tr></table></figure><p>配置类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">    <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(Config.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String error_topic=<span class="string">&quot;error_topic&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ConcurrentKafkaListenerContainerFactory <span class="title function_">listenerContainerFactory</span><span class="params">(ConsumerFactory consumerFactory, KafkaTemplate&lt;String,Object&gt; template)</span> &#123;</span><br><span class="line">        <span class="type">ConcurrentKafkaListenerContainerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcurrentKafkaListenerContainerFactory</span>();</span><br><span class="line">        factory.setConsumerFactory(consumerFactory);</span><br><span class="line">        <span class="comment">// 最大重试次数5次，每次间隔5s(该配置需要参考 Broker.leader 切换的平均时间去设置)</span></span><br><span class="line">        <span class="type">SeekToCurrentErrorHandler</span> <span class="variable">seekToCurrentErrorHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SeekToCurrentErrorHandler</span>((consumerRecord, e) -&gt; &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;重试机制后异常，consumerRecord：&#123;&#125;&quot;</span>, consumerRecord.toString(), e);</span><br><span class="line">            <span class="comment">//做其他业务操作，如记录异常信息到表，发送信息到其他的队列人工核对处理等</span></span><br><span class="line">            template.send(error_topic,consumerRecord.toString());</span><br><span class="line">        &#125;, <span class="keyword">new</span> <span class="title class_">FixedBackOff</span>(<span class="number">5000</span>, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//       批量获取消息的时候，使用该方式</span></span><br><span class="line"><span class="comment">//        SeekToCurrentBatchErrorHandler batchErrorHandler = new SeekToCurrentBatchErrorHandler();</span></span><br><span class="line"></span><br><span class="line">        factory.setErrorHandler(seekToCurrentErrorHandler);</span><br><span class="line">        <span class="comment">//设置提交偏移量的方式 ,否则出现异常的时候, 会报错No Acknowledgment available as an argument, the listener container must have a MANUAL AckMode to populate the Acknowledgment.</span></span><br><span class="line">        factory.getContainerProperties().setAckMode(ContainerProperties.AckMode.MANUAL_IMMEDIATE);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerKafka</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CONSUMER_GROUP_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;MOCK-A-GROUP&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@KafkaListener(topics = &#123;&quot;$&#123;kafka.topic.topic4Test&#125;&quot;&#125;, groupId = CONSUMER_GROUP_PREFIX, containerFactory = &quot;listenerContainerFactory&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(ConsumerRecord&lt;String,Object&gt; consumerRecord, Acknowledgment acknowledgeMode)</span> &#123;</span><br><span class="line"><span class="comment">//处理业务逻辑......</span></span><br><span class="line">        acknowledgeMode.acknowledge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> kafka </category>
          
          <category> 与springboot的整合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> kafka </tag>
            
            <tag> 与springboot的整合 </tag>
            
            <tag> Kafka生产者、消费者的消息可靠性方案实现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Date类型</title>
      <link href="/posts/39843.html"/>
      <url>/posts/39843.html</url>
      
        <content type="html"><![CDATA[<h2 id="两个日期之间相差的天数，日期为单位（比如相差两秒，可能就相差一天，12-23-59：59-和-13-01-00：00-就相差一天）"><a href="#两个日期之间相差的天数，日期为单位（比如相差两秒，可能就相差一天，12-23-59：59-和-13-01-00：00-就相差一天）" class="headerlink" title="两个日期之间相差的天数，日期为单位（比如相差两秒，可能就相差一天，12:23:59：59 和 13:01:00：00 就相差一天）"></a>两个日期之间相差的天数，日期为单位（比如相差两秒，可能就相差一天，12:23:59：59 和 13:01:00：00 就相差一天）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * date2比date1多的天数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">differentDays</span><span class="params">(Date date1,Date date2)</span> &#123;</span><br><span class="line">  <span class="type">Calendar</span> <span class="variable">cal1</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">  cal1.setTime(date1);</span><br><span class="line"></span><br><span class="line">  <span class="type">Calendar</span> <span class="variable">cal2</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">  cal2.setTime(date2);</span><br><span class="line">  <span class="type">int</span> day1= cal1.get(Calendar.DAY_OF_YEAR);</span><br><span class="line">  <span class="type">int</span> <span class="variable">day2</span> <span class="operator">=</span> cal2.get(Calendar.DAY_OF_YEAR);</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="variable">year1</span> <span class="operator">=</span> cal1.get(Calendar.YEAR);</span><br><span class="line">  <span class="type">int</span> <span class="variable">year2</span> <span class="operator">=</span> cal2.get(Calendar.YEAR);</span><br><span class="line">  <span class="keyword">if</span>(year1 != year2) &#123;<span class="comment">//同一年</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">timeDistance</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> year1 ; i &lt; year2 ; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(i%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; i%<span class="number">100</span>!=<span class="number">0</span> || i%<span class="number">400</span>==<span class="number">0</span>)    <span class="comment">//闰年</span></span><br><span class="line">      &#123;</span><br><span class="line">        timeDistance += <span class="number">366</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>    <span class="comment">//不是闰年</span></span><br><span class="line">      &#123;</span><br><span class="line">        timeDistance += <span class="number">365</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> timeDistance + (day2-day1) ;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;<span class="comment">// 不同年</span></span><br><span class="line">    System.out.println(<span class="string">&quot;判断day2 - day1 : &quot;</span> + (day2-day1));</span><br><span class="line">    <span class="keyword">return</span> day2-day1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两个日期之间相差的天数，以毫秒数精确计算（比如相差-22-小时可能是同一天）"><a href="#两个日期之间相差的天数，以毫秒数精确计算（比如相差-22-小时可能是同一天）" class="headerlink" title="两个日期之间相差的天数，以毫秒数精确计算（比如相差 22 小时可能是同一天）"></a>两个日期之间相差的天数，以毫秒数精确计算（比如相差 22 小时可能是同一天）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过秒毫秒数判断两个时间的间隔的天数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">differentDaysByMillisecond</span><span class="params">(Date date1,Date date2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">days</span> <span class="operator">=</span> (<span class="type">int</span>) ((date2.getTime() - date1.getTime()) / (<span class="number">1000</span>*<span class="number">3600</span>*<span class="number">24</span>));</span><br><span class="line">  <span class="keyword">return</span> days;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两个日期是否是同一天"><a href="#两个日期是否是同一天" class="headerlink" title="两个日期是否是同一天"></a>两个日期是否是同一天</h2><p><a href="https://blog.csdn.net/w605283073/article/details/103335373">判断同一天的博客</a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isSameDay</span><span class="params">(Date date1, Date date2)</span> &#123;</span><br><span class="line">  <span class="type">LocalDate</span> <span class="variable">localDate1</span> <span class="operator">=</span> date1.toInstant()</span><br><span class="line">    .atZone(ZoneId.systemDefault())</span><br><span class="line">    .toLocalDate();</span><br><span class="line">  <span class="type">LocalDate</span> <span class="variable">localDate2</span> <span class="operator">=</span> date2.toInstant()</span><br><span class="line">    .atZone(ZoneId.systemDefault())</span><br><span class="line">    .toLocalDate();</span><br><span class="line">  <span class="keyword">return</span> localDate1.isEqual(localDate2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种方式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isSameDay</span><span class="params">(Date date1, Date date2)</span> &#123;</span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">fmt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMdd&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> fmt.format(date1).equals(fmt.format(date2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> util </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> util </tag>
            
            <tag> Date类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于消费的同步异步问题，以及多个方法监听同一个topic</title>
      <link href="/posts/38173.html"/>
      <url>/posts/38173.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@KafkaListener(topics = &quot;test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">consumerTest1</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    log.info(<span class="string">&quot;收到消息1：&quot;</span> + msg);</span><br><span class="line">    TimeUnit.MILLISECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@KafkaListener(topics = &quot;test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">consumerTest2</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    log.info(<span class="string">&quot;收到消息2：&quot;</span> + msg);</span><br><span class="line">    TimeUnit.MILLISECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上所示<br>多个方法消费同一个 topic<br>那么，只会在一个方法中消费，不会两个方法都消费消息，即不会重复消费</p><p>同时当只有<code>consumerTest1()</code>方法时，如果手动阻塞线程，那么消息的消费也会变慢<br>即如果向 test 发送 500 条消息。执行过程是第一条消息，等 10ms，第二条消息，等 10ms…<br>结论：针对同一个 topic 消息的消费是同步的</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> kafka </category>
          
          <category> 与springboot的整合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> kafka </tag>
            
            <tag> 与springboot的整合 </tag>
            
            <tag> 关于消费的同步异步问题，以及多个方法监听同一个topic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stream用法整理</title>
      <link href="/posts/31338.html"/>
      <url>/posts/31338.html</url>
      
        <content type="html"><![CDATA[<h2 id="stream-流处理将用-拼接的字符串转为-Double-集合"><a href="#stream-流处理将用-拼接的字符串转为-Double-集合" class="headerlink" title="stream 流处理将用,拼接的字符串转为 Double 集合"></a>stream 流处理将用<code>,</code>拼接的字符串转为 Double 集合</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将用&#x27;,&#x27;拼接的字符串转为Double集合</span></span><br><span class="line">List&lt;Double&gt; singlePoint = Arrays.asList(pointStr.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">                                .stream()</span><br><span class="line">                                .map(str -&gt; Double.parseDouble(str.trim()))</span><br><span class="line">                                .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> stream </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> stream </tag>
            
            <tag> stream用法整理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>过滤枚举</title>
      <link href="/posts/59869.html"/>
      <url>/posts/59869.html</url>
      
        <content type="html"><![CDATA[<p>枚举类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户角色的枚举类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">RoleEnum</span> &#123;</span><br><span class="line">    <span class="comment">// 仓储角色</span></span><br><span class="line">    LABORATORY_PERSON(<span class="string">&quot;LABORATORY_PERSON&quot;</span>,</span><br><span class="line">                      <span class="string">&quot;实验室人员&quot;</span>,</span><br><span class="line">                      <span class="string">&quot;365ef7b96870d8acdd4a016866193278&quot;</span>,</span><br><span class="line">                      <span class="string">&quot;laboratoryPersonIndex.html&quot;</span>,</span><br><span class="line">                      <span class="string">&quot;goods&quot;</span>),</span><br><span class="line">    EQUIPMENT_MANAGEMENT_PERSON(<span class="string">&quot;EQUIPMENT_MANAGEMENT_PERSON&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;设备管理员&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;34ea46330ea7757982a1bde76d6f33bd&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;equipmentManagePersonIndex.html&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;goods&quot;</span>),</span><br><span class="line">    NORMAL_PERSON(<span class="string">&quot;NORMAL_PERSON&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;普通用户&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;7d9414e9a89692843acde8870de586d0&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;normalPersonIndex.html&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;goods&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 业务角色</span></span><br><span class="line">    BUY_PERSON(</span><br><span class="line">        <span class="string">&quot;BUY_PERSON&quot;</span>,</span><br><span class="line">        <span class="string">&quot;采购人员&quot;</span>,</span><br><span class="line">        <span class="string">&quot;9cec100a371ab680b1c26284d423a416&quot;</span>,</span><br><span class="line">        <span class="string">&quot;buyPersonIndex.html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;biz&quot;</span>),</span><br><span class="line">    GOODS_MANAGEMENT_PERSON(<span class="string">&quot;GOODS_MANAGEMENT_PERSON&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;物资管理员&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;d21575130f577013a307a1e5aa8ca1fe&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;goodsManagementPersonIndex.html&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;biz&quot;</span>),</span><br><span class="line">    SELL_PERSON(<span class="string">&quot;SELL_PERSON&quot;</span>,</span><br><span class="line">                <span class="string">&quot;出库人员&quot;</span>,</span><br><span class="line">                <span class="string">&quot;b65766942f5ec940476c93530ad2eea3&quot;</span>,</span><br><span class="line">                <span class="string">&quot;sellPerson.html&quot;</span>,</span><br><span class="line">                <span class="string">&quot;biz&quot;</span>),</span><br><span class="line">    SELL_PERSON_LEADER(<span class="string">&quot;SELL_PERSON_LEADER&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;出库人员领导&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;8ac454ce1338c811d7d83b4006a77bc1&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;sellPerson.html&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;biz&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 管理员</span></span><br><span class="line">    SUPER_ADMIN(<span class="string">&quot;SUPER_ADMIN&quot;</span>,</span><br><span class="line">                <span class="string">&quot;超级管理员&quot;</span>,</span><br><span class="line">                <span class="string">&quot;superadmin_role&quot;</span>,</span><br><span class="line">                <span class="string">&quot;superAdmin.html&quot;</span>,</span><br><span class="line">                <span class="string">&quot;sys&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String role;</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line">    <span class="keyword">private</span> String roleId;</span><br><span class="line">    <span class="keyword">private</span> String welcomePage;</span><br><span class="line">    <span class="keyword">private</span> String <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    RoleEnum() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    RoleEnum(String role, String roleName, String roleId, String welcomePage, String <span class="keyword">module</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.role = role;</span><br><span class="line">        <span class="built_in">this</span>.roleName = roleName;</span><br><span class="line">        <span class="built_in">this</span>.roleId = roleId;</span><br><span class="line">        <span class="built_in">this</span>.welcomePage = welcomePage;</span><br><span class="line">        <span class="built_in">this</span>.<span class="keyword">module</span> = <span class="keyword">module</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得用户的角色枚举</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roleId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> RoleEnum <span class="title function_">getUserRole</span><span class="params">(String roleId)</span> &#123;</span><br><span class="line">    <span class="type">RoleEnum</span> <span class="variable">roleEnum</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    Optional&lt;RoleEnum&gt; optional = Arrays.stream(RoleEnum.values()).filter(e -&gt; roleId.equals(e.getRoleId())).findFirst();</span><br><span class="line">    <span class="keyword">if</span> (optional.isPresent()) &#123;</span><br><span class="line">        roleEnum = optional.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这里应该用orElse优化</span></span><br><span class="line">    <span class="keyword">return</span> roleEnum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> stream </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> stream </tag>
            
            <tag> 过滤枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>删除文件</title>
      <link href="/posts/21569.html"/>
      <url>/posts/21569.html</url>
      
        <content type="html"><![CDATA[<h2 id="删除单个文件"><a href="#删除单个文件" class="headerlink" title="删除单个文件"></a>删除单个文件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 删除单个文件</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> fileName 被删除文件的文件名</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 单个文件删除成功返回true, 否则返回false</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">deleteFile</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">     <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fileName);</span><br><span class="line">     <span class="keyword">if</span> (file.isFile() &amp;&amp; file.exists()) &#123;</span><br><span class="line">         file.delete();</span><br><span class="line">         System.out.println(<span class="string">&quot;删除单个文件&quot;</span> + fileName + <span class="string">&quot;成功！&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;删除单个文件&quot;</span> + fileName + <span class="string">&quot;失败！&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="删除某个文件夹及其之内的所有文件-需要和上面删除单个文件的方法配合使用"><a href="#删除某个文件夹及其之内的所有文件-需要和上面删除单个文件的方法配合使用" class="headerlink" title="删除某个文件夹及其之内的所有文件(需要和上面删除单个文件的方法配合使用)"></a>删除某个文件夹及其之内的所有文件(需要和上面删除单个文件的方法配合使用)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文件夹及之下的所有文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dir</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">deleteDirectory</span><span class="params">(String dir)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果dir不以文件分隔符结尾，自动添加文件分隔符</span></span><br><span class="line">        <span class="keyword">if</span> (!dir.endsWith(File.separator)) &#123;</span><br><span class="line">            dir = dir + File.separator;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">File</span> <span class="variable">dirFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir);</span><br><span class="line">        <span class="comment">// 如果dir对应的文件不存在，或者不是一个目录，则退出</span></span><br><span class="line">        <span class="keyword">if</span> (!dirFile.exists() || !dirFile.isDirectory()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;删除目录失败&quot;</span> + dir + <span class="string">&quot;目录不存在！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 删除文件夹下的所有文件(包括子目录)</span></span><br><span class="line">        File[] files = dirFile.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; files.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 删除子文件</span></span><br><span class="line">            <span class="keyword">if</span> (files[i].isFile()) &#123;</span><br><span class="line">                flag = deleteFile(files[i].getAbsolutePath());</span><br><span class="line">                <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 删除子目录</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                flag = deleteDirectory(files[i].getAbsolutePath());</span><br><span class="line">                <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;删除目录失败&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除当前目录</span></span><br><span class="line">        <span class="keyword">if</span> (dirFile.delete()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;删除目录&quot;</span> + dir + <span class="string">&quot;成功！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;删除目录&quot;</span> + dir + <span class="string">&quot;失败！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> util </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> util </tag>
            
            <tag> 删除文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的工具包</title>
      <link href="/posts/36582.html"/>
      <url>/posts/36582.html</url>
      
        <content type="html"><![CDATA[<ul><li>预览 word 或者 pdf 的内容：TiKa</li><li>数学运算：joinery</li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> 常用的工具包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unzip解压</title>
      <link href="/posts/9281.html"/>
      <url>/posts/9281.html</url>
      
        <content type="html"><![CDATA[<h2 id="无论压缩文件下有多少层级，所有解压后的文件都统一放在-outFileDir-文件夹下，且只保留压缩的文件，压缩的文件夹不保留"><a href="#无论压缩文件下有多少层级，所有解压后的文件都统一放在-outFileDir-文件夹下，且只保留压缩的文件，压缩的文件夹不保留" class="headerlink" title="无论压缩文件下有多少层级，所有解压后的文件都统一放在 outFileDir 文件夹下，且只保留压缩的文件，压缩的文件夹不保留"></a>无论压缩文件下有多少层级，所有解压后的文件都统一放在 outFileDir 文件夹下，且只保留压缩的文件，压缩的文件夹不保留</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipEntry;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipFile;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(unzip(<span class="string">&quot;C:\\Users\\13551\\Desktop\\a\\a.zip&quot;</span>, <span class="string">&quot;C:\\Users\\13551\\Desktop\\a&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">unzip</span><span class="params">(String inFilePath, String outDirPath)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先对目标文件夹做一些判定</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">destFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(outDirPath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (destFile.isFile()) &#123;<span class="comment">// 目标是文件错过</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!destFile.exists()) &#123;<span class="comment">// 目标文件夹不存在，先创建</span></span><br><span class="line">            destFile.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再对源文件做一些判定</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">sourceFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(inFilePath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sourceFile.isDirectory() || !sourceFile.exists()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> sourceFile.getName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileType</span> <span class="operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;.zip&quot;</span>.equals(fileType)) &#123;<span class="comment">// 源文件不是zip格式的</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一次读取1k</span></span><br><span class="line">        <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ZipInputStream</span> <span class="variable">zin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(inFilePath), Charset.forName(<span class="string">&quot;GBK&quot;</span>));</span><br><span class="line">                <span class="type">ZipFile</span> <span class="variable">zipFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipFile</span>(sourceFile, Charset.forName(<span class="string">&quot;GBK&quot;</span>))) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">ZipEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span> (((entry = zin.getNextEntry()) != <span class="literal">null</span>)) &#123;<span class="comment">// 如果entry不为空，并不在同一个目录下</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (entry.isDirectory()) &#123;<span class="comment">// 如果是文件夹不考虑，直接跳过</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">entryName</span> <span class="operator">=</span> entry.getName().substring(entry.getName().lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                <span class="type">File</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(outDirPath + <span class="string">&quot;/&quot;</span> + entryName);<span class="comment">// 解压出的文件路径</span></span><br><span class="line">                <span class="keyword">if</span> (!tmp.exists()) &#123;<span class="comment">// 如果文件不存在</span></span><br><span class="line">                    <span class="type">File</span> <span class="variable">parentDir</span> <span class="operator">=</span> tmp.getParentFile();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!parentDir.exists()) &#123;</span><br><span class="line">                        parentDir.mkdirs();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> (<span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(tmp); <span class="comment">// 将文件目录中的文件放入输出流</span></span><br><span class="line">                            <span class="comment">// 用输入流读取压缩文件中制定目录中的文件</span></span><br><span class="line">                            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> zipFile.getInputStream(entry)) &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">while</span> ((readLen = in.read(buff)) != -<span class="number">1</span>) &#123;<span class="comment">// 如有输入流可以读取到数值</span></span><br><span class="line">                            os.write(buff, <span class="number">0</span>, readLen);<span class="comment">// 输出流写入</span></span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                zin.closeEntry();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> util </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> util </tag>
            
            <tag> unzip解压 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区段合并算法</title>
      <link href="/posts/45970.html"/>
      <url>/posts/45970.html</url>
      
        <content type="html"><![CDATA[<p>需求：将不连续的一维数组整合为多个连续的二维数组<br>示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Integer[] arr = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="comment">// Integer[] arr = &#123;1, 2&#125;;</span></span><br><span class="line">    <span class="comment">// Integer[] arr = &#123;1, 3&#125;;    // Integer[] arr = &#123;1, 2, 4&#125;;    // Integer[] arr = &#123;1, 3, 4&#125;;    // Integer[] arr = &#123;1, 2, 3&#125;;    // Integer[] arr = &#123;1, 2, 4, 5&#125;;    // Integer[] arr = &#123;1, 2, 4, 6, 7&#125;;    // Integer[] arr = &#123;1, 4, 6, 7&#125;;    // Integer[] arr = &#123;1, 2, 4, 5, 7&#125;;    List&lt;Integer&gt; mileRepeatArr = Arrays.asList(arr);</span></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; markArr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 筛选出各个区段</span></span><br><span class="line">    List&lt;Integer&gt; tempArr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mileRepeatArr.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            tempArr.add(mileRepeatArr.get(i));</span><br><span class="line">            <span class="keyword">if</span> (i == mileRepeatArr.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                markArr.add(tempArr);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mileRepeatArr.get(i) - mileRepeatArr.get(i - <span class="number">1</span>) != <span class="number">1</span>) &#123;</span><br><span class="line">            markArr.add(tempArr);</span><br><span class="line">            tempArr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tempArr.add(mileRepeatArr.get(i));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i == mileRepeatArr.size() - <span class="number">1</span>) &#123;</span><br><span class="line">            markArr.add(tempArr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(markArr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> algorithmCollection </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> algorithmCollection </tag>
            
            <tag> 区段合并算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lambda用法整理</title>
      <link href="/posts/53080.html"/>
      <url>/posts/53080.html</url>
      
        <content type="html"><![CDATA[<h2 id="使用-lambda-表达式建立子线程任务并阻塞主线程"><a href="#使用-lambda-表达式建立子线程任务并阻塞主线程" class="headerlink" title="使用 lambda 表达式建立子线程任务并阻塞主线程"></a>使用 lambda 表达式建立子线程任务并阻塞主线程</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 阻塞主线程的计数器</span></span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">countDownLanch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(cycleNum);</span><br><span class="line">       <span class="comment">// 局部的线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(cycleNum &gt; <span class="number">4</span> ? <span class="number">4</span> : cycleNum);</span><br><span class="line">      <span class="comment">// cycleNum是要执行子线程的次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; cycleNum; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> i * <span class="number">10000</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">            executor.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        List&lt;Map&lt;String, Double&gt;&gt; dataListTemp = dataShowMapper.getWaveEchartsCorrectDataNoSparse(csrwId, xb, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span>, start, num);</span><br><span class="line">                        <span class="keyword">for</span> (Map&lt;String, Double&gt; dataMap : dataListTemp) &#123;</span><br><span class="line">                            ZSetOperations.TypedTuple&lt;Map&lt;String, Double&gt;&gt; typedTuple = <span class="keyword">new</span> <span class="title class_">DefaultTypedTuple</span>&lt;&gt;(dataMap, dataMap.get(<span class="string">&quot;kms&quot;</span>));</span><br><span class="line">                            tuples.add(typedTuple);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 每执行一次子线程（计数器减一）</span></span><br><span class="line">                   countDownLanch.countDown();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 阻塞主线程</span></span><br><span class="line">            countDownLanch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// 子线程都执行完后，关闭局部线程池</span></span><br><span class="line">        executor.shutdown();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> lambda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> lambda </tag>
            
            <tag> lambda用法整理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后台运行jar包与停止运行</title>
      <link href="/posts/5084.html"/>
      <url>/posts/5084.html</url>
      
        <content type="html"><![CDATA[<p>将运行的 jar 错误日志信息输出到 log.file 文件中，然后（&gt;&amp;1）就是继续输出到标准输出(前面加的&amp;，是为了让系统识别是标准输出)，最后一个&amp;,表示在后台运行。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup java -jar 包名.jar  &gt; log.file  2&gt;&amp;1 &amp;</span><br><span class="line">[1] 669 #669表示运行的pid</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> command </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> Java command </tag>
            
            <tag> 后台运行jar包与停止运行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相同数据整合示例</title>
      <link href="/posts/49919.html"/>
      <url>/posts/49919.html</url>
      
        <content type="html"><![CDATA[<p>需求：多个对象，这些对象中的部分某个特定的属性相同。把所有的对象根据这个特定的属性整合成多个分组（或统计其他）</p><p>方法示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo1</span><span class="params">(List&lt;Integer&gt; ids)</span> &#123;</span><br><span class="line">    List&lt;TYwglYsXlfinfo&gt; tYwglYsXlfinfos = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;WlHzVO&gt; exportList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tYwglYsXlfinfos.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">WlHzVO</span> <span class="variable">wlHzVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WlHzVO</span>();</span><br><span class="line">        BeanUtils.copyProperties(tYwglYsXlfinfos.get(<span class="number">0</span>), wlHzVO);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tYwglYsXlfinfos.size(); i++) &#123;</span><br><span class="line">            <span class="type">TYwglYsXlfinfo</span> <span class="variable">tYwglYsXlfinfo</span> <span class="operator">=</span> tYwglYsXlfinfos.get(i);</span><br><span class="line">            <span class="keyword">if</span> (!tYwglYsXlfinfo.getWlbm().equals(wlHzVO.getWlbm())) &#123;</span><br><span class="line">                exportList.add(wlHzVO);</span><br><span class="line">                wlHzVO = <span class="keyword">new</span> <span class="title class_">WlHzVO</span>();</span><br><span class="line">                BeanUtils.copyProperties(tYwglYsXlfinfo, wlHzVO);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            setHzhj(tYwglYsXlfinfo, wlHzVO);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i == tYwglYsXlfinfos.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                exportList.add(wlHzVO);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHzhj</span><span class="params">(TYwglYsXlfinfo tYwglYsXlfinfo, WlHzVO wlHzVO)</span> &#123;</span><br><span class="line"><span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> algorithmCollection </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> algorithmCollection </tag>
            
            <tag> 相同数据整合示例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区段过滤算法</title>
      <link href="/posts/44147.html"/>
      <url>/posts/44147.html</url>
      
        <content type="html"><![CDATA[<p>需求：<br>一个大的区段<br>有小半径曲线段，复合曲线，平曲线和竖曲线各个不同数量不同长度的多个区段<br>这些区段可能覆盖，交叉或完全不重叠</p><p>求：不与任意特殊区段有关联的多个直线段</p><p>公共方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;ImportSectionVO&gt; <span class="title function_">filterQd</span><span class="params">(List&lt;ImportSectionVO&gt; filterList, List&lt;ImportSectionVO&gt; zxdList, String name)</span> &#123;</span><br><span class="line">    ImportSectionVO zxd;</span><br><span class="line">    ImportSectionVO filter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; filterList.size(); i++) &#123;</span><br><span class="line">        filter = filterList.get(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> zxdList.size() - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            zxd = zxdList.get(j);</span><br><span class="line">            <span class="keyword">if</span> (filter.getEndMile() &lt;= zxd.getStartMile() || filter.getStartMile() &gt;= zxd.getEndMile()) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (filter.getStartMile() &lt;= zxd.getStartMile() &amp;&amp; filter.getEndMile() &gt;= zxd.getEndMile()) &#123;</span><br><span class="line">                zxdList.remove(j);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (filter.getStartMile() &gt;= zxd.getStartMile() &amp;&amp; filter.getEndMile() &lt;= zxd.getEndMile()) &#123;</span><br><span class="line">                zxdList.remove(j);</span><br><span class="line">                zxdList.add(j, <span class="keyword">new</span> <span class="title class_">ImportSectionVO</span>(name, zxd.getStartMile(), filter.getStartMile()));</span><br><span class="line">                zxdList.add(j + <span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">ImportSectionVO</span>(name, filter.getEndMile(), zxd.getEndMile()));</span><br><span class="line">                j += <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (filter.getStartMile() &gt; zxd.getStartMile() &amp;&amp; filter.getStartMile() &lt; zxd.getEndMile()) &#123;</span><br><span class="line">                zxdList.remove(j);</span><br><span class="line">                zxdList.add(<span class="keyword">new</span> <span class="title class_">ImportSectionVO</span>(name, zxd.getStartMile(), filter.getStartMile()));</span><br><span class="line">                j += <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (filter.getEndMile() &gt; zxd.getStartMile() &amp;&amp; filter.getEndMile() &lt; zxd.getEndMile()) &#123;</span><br><span class="line">                zxdList.remove(j);</span><br><span class="line">                zxdList.add(<span class="keyword">new</span> <span class="title class_">ImportSectionVO</span>(name, filter.getEndMile(), zxd.getEndMile()));</span><br><span class="line">                j += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> zxdList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>公共方法的应用：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;ImportSectionVO&gt;&gt; <span class="title function_">selectXlxx</span><span class="params">(String xianbie, String xingbie, Double startMile, Double endMile)</span> &#123;</span><br><span class="line">    List&lt;List&lt;ImportSectionVO&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 顺序依次是竖曲线，平曲线，复合曲线，小半径曲线</span></span><br><span class="line">    List&lt;ImportSectionVO&gt; sqx = baseMapper.selectSqx(xianbie,</span><br><span class="line">            xingbie,</span><br><span class="line">            startMile,</span><br><span class="line">            endMile);</span><br><span class="line">    List&lt;ImportSectionVO&gt; pqx = baseMapper.selectPqx(xianbie,</span><br><span class="line">            xingbie,</span><br><span class="line">            startMile,</span><br><span class="line">            endMile);</span><br><span class="line">    List&lt;ImportSectionVO&gt; fhqx = baseMapper.selectFhqx(xianbie,</span><br><span class="line">            xingbie,</span><br><span class="line">            startMile,</span><br><span class="line">            endMile);</span><br><span class="line">    List&lt;ImportSectionVO&gt; xbjqx = baseMapper.selectSmallRadiusSection(xianbie,</span><br><span class="line">            xingbie,</span><br><span class="line">            startMile,</span><br><span class="line">            endMile);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;复合曲线&quot;</span>;</span><br><span class="line">    fhqx = filterQd(xbjqx, fhqx, name);</span><br><span class="line"></span><br><span class="line">    name = <span class="string">&quot;平曲线&quot;</span>;</span><br><span class="line">    pqx = filterQd(xbjqx, pqx, name);</span><br><span class="line">    pqx = filterQd(fhqx, pqx, name);</span><br><span class="line"></span><br><span class="line">    name = <span class="string">&quot;竖曲线&quot;</span>;</span><br><span class="line">    sqx = filterQd(xbjqx, sqx, name);</span><br><span class="line">    sqx = filterQd(fhqx, sqx, name);</span><br><span class="line">    sqx = filterQd(pqx, sqx, name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 直线段：筛选出所有不是任何特殊区段的区段就是直线段</span></span><br><span class="line">    List&lt;ImportSectionVO&gt; zxd = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    name = <span class="string">&quot;直线段&quot;</span>;</span><br><span class="line">    zxd.add(<span class="keyword">new</span> <span class="title class_">ImportSectionVO</span>(name, startMile, endMile));</span><br><span class="line">    filterQd(xbjqx, zxd, name);</span><br><span class="line">    filterQd(fhqx, zxd, name);</span><br><span class="line">    filterQd(pqx, zxd, name);</span><br><span class="line">    filterQd(sqx, zxd, name);</span><br><span class="line"></span><br><span class="line">    res.add(sqx);</span><br><span class="line">    res.add(pqx);</span><br><span class="line">    res.add(fhqx);</span><br><span class="line">    res.add(xbjqx);</span><br><span class="line">    res.add(zxd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> algorithmCollection </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> algorithmCollection </tag>
            
            <tag> 区段过滤算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm常用命令</title>
      <link href="/posts/34123.html"/>
      <url>/posts/34123.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>检查前 NPM 源：<br>npm get registry</p></li><li><p>设置镜像命令<br>npm config set registry <a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org/</a> #设置淘宝镜像<br>npm config set registry<a href="https://registry.npmjs.org">https://registry.npmjs.org</a> #设置默认镜像</p></li><li><p>初始化项目<br>建立一个空文件夹，在命令提示符进入该文件夹 执行命令初始化<br>npm init<br>按照提示输入相关信息，如果是用默认值则直接回车即可。<br>name: 项目名称<br>name: 项目名称<br>description: 项目描述<br>keywords: {Array}关键词，便于用户搜索到我们的项目<br>最后会生成 package.json 文件，这个是包的配置文件，相当于 maven 的 pom.xml<br>我们之后也可以根据需要进行修改。<br>如果想直接生成 package.json 文件，那么可以使用命令<br>npm init -y</p></li><li><p>当从 git/svn 下载源码的时候，此时没有 node_modules 目录，使用此命令能根据 package.json 里的配置的依赖版本下载所有的依赖包<br>npm install</p></li><li><p>(老版本)将模块安装到项目的 node_modules 目录中，但不写入 package.json<br>(新版本)默认带—save 参数。效果和 npm install —save x 一样<br>npm install x</p></li><li><p>如果想替换版本，那么直接加@并以相同的命令执行即可。不用先执行卸载命令<br>没有@安装最新版本，有了@安装指定版本的依赖<br>npm install x@1.2.3</p></li><li><p>如果想安装 0.18 版本的最后一个小版本，那么写<br>npm install x@0.18.x</p></li><li><p>全局安装模块<br>不会将模块安装到项目的 node_modules，而是会安装到 node.js 的 node_modules 目录中<br>npm install —global x</p></li><li><p>安装项目运行依赖<br>将模块安装进项目的 node_modules 目录中，并写入 package.json 的 dependencies 中<br>npm install —save x</p></li><li><p>安装项目开发依赖<br>将模块安装进项目的 node_modules 目录中，并写入 package.json 的 devDependencies 中<br>npm install —save-dev x</p></li><li><p>dependencies 和 devDependencies 的区别<br>devDependencies 保存的是开发环境的依赖。比如 webpack，gulp 这些模块，都只是在开发阶段使用<br>dependencies 保存的是生产环境的依赖，比如 vue，vue-router 等</p></li><li><p>更新包（更新到最新版本）<br>针对项目的 node_modules 目录来说的，而且无论是开发依赖还是运行依赖都能生效<br>npm update 包名</p></li><li><p>卸载包<br>针对项目的 node_modules 目录来说的，而且无论是开发依赖还是运行依赖都能生效<br>npm uninstall 包名</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> node </category>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> node </tag>
            
            <tag> npm </tag>
            
            <tag> npm常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java.lang.UnsupportedOperationException：null 使用List.Add()或List.addALL() 报错</title>
      <link href="/posts/60898.html"/>
      <url>/posts/60898.html</url>
      
        <content type="html"><![CDATA[<p>还原现场：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; agentTeamIdsList =Arrays.asList(agentIdArray);</span><br><span class="line">agentTeamIdsList.add(<span class="number">123011</span>);</span><br></pre></td></tr></table></figure><p>将一个 Integer 类型数组转成 List， 上面的 Arrays.asList 是可以转成功的；</p><p>然后往转成功的 list 里面继续添加 值；</p><p>IDEA 里面并没有检测出错误，实则报错：</p><p>java.lang.UnsupportedOperationException: null</p><p>原因：</p><p>Arrays.asList 转成的 ArrayList 实际上跟往常我们创建的 new ArrayList 是不同的。</p><p>这个是 Arrays 的内部类 ArrayList：</p><p><img src="https://www.freesion.com/images/372/12fde77461883b51add3859c5bfdc23c.png" alt="img"></p><p>而我们往常使用的</p><p><img src="https://www.freesion.com/images/810/64f6f88277254496994cc617bb46e4f2.png" alt="img"></p><p>解决方案：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; agentTeamIdsList =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(agentIdArray));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> Java </category>
          
          <category> exception </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> Java </tag>
            
            <tag> exception </tag>
            
            <tag> java.lang.UnsupportedOperationException：null 使用List.Add()或List.addALL() 报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用jQuery实现让容器的滚动条滚动到某个内部元素的位置。让内部元素本来在中间，一下子跑到最上面</title>
      <link href="/posts/3285.html"/>
      <url>/posts/3285.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:50px;overflow:auto&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;children&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:25px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;children&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:25px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;children&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:25px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;children&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:25px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.parent&#x27;</span>).<span class="title function_">scrollTop</span>(</span><br><span class="line">  $(<span class="string">&#x27;.children:eq(2)&#x27;</span>).<span class="title function_">offset</span>().<span class="property">top</span> -</span><br><span class="line">    $(<span class="string">&#x27;.parent&#x27;</span>).<span class="title function_">offset</span>().<span class="property">top</span> +</span><br><span class="line">    $(<span class="string">&#x27;.parent&#x27;</span>).<span class="title function_">scrollTop</span>()</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 上面的例子就是让父容器的滚动条滚动，让第三个孩子跑到最上面</span></span><br><span class="line"><span class="comment">// 其中parent是父容器</span></span><br><span class="line"><span class="comment">// children是子元素。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
            <tag> 利用jQuery实现让容器的滚动条滚动到某个内部元素的位置。让内部元素本来在中间，一下子跑到最上面 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件委托</title>
      <link href="/posts/16284.html"/>
      <url>/posts/16284.html</url>
      
        <content type="html"><![CDATA[<p>拼接的元素对于 jQ 的 click 无响应，此时就需要事件委托</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.file_container&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;.file_del&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 此时就能获取被点击的子元素，获取不到尝试加个parent()或children()试试</span></span><br><span class="line">  <span class="comment">// 如过target里面还有元素，那么点击该元素也会触发，即会有事件冒泡</span></span><br><span class="line">  <span class="keyword">let</span> dom = $(event.<span class="property">target</span>)</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">&#x27;.file_container&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;.file_del&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 或者不用event对象，直接用$(this)正常来说也能获取到</span></span><br><span class="line">  <span class="keyword">let</span> dom = $(<span class="variable language_">this</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
            <tag> 事件委托 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax前后台参数传递</title>
      <link href="/posts/64611.html"/>
      <url>/posts/64611.html</url>
      
        <content type="html"><![CDATA[<h2 id="contentType-的类型"><a href="#contentType-的类型" class="headerlink" title="contentType 的类型"></a>contentType 的类型</h2><ul><li><p>ajax 的默认 contentType 是：</p><p>“application/x-www-form-urlencoded;charset=utf-8”</p><p>它是最普通的{key-value,key-value}的格式</p><p>无论 get 还是 post，springboot 可以默认封装成一个简单的 bean,此时不用添加任何注解。但是如果 bean 的属性有数组等复杂属性。那么会封装失败</p><p>后台也可以用@RequestParam 注解来提取某个简单的参数，如果同名该注解可以省略。但是对于 get 请求。不能提取数组。</p><p>想要提取数组。请求方式必须为 post 并且语法如下@RequestParam(“ids[]”)</p></li><li><p>如果为</p><p>contentType:”application/json;charset=utf-8”,</p><p>data:JSON.stringfy(data),</p><p>此时，请求方式必须为 post，后台用@RequestBody(JavaBean javaBean)</p><p>来接收，该方式几乎是除了文件外的万能方式。</p></li><li><p>如果为 false</p><p>那么一般就是上传文件，详见 ssmpj 的图片上传与回显的例子</p></li><li><p>如果为</p><p>text/xml</p><p>就看这篇博客的解析：</p><p><a href="https://blog.csdn.net/nicexibeidage/article/details/84070290">原文链接</a></p><p>因为实际情况很少遇到</p></li></ul><h2 id="前后台传值的例子"><a href="#前后台传值的例子" class="headerlink" title="前后台传值的例子"></a>前后台传值的例子</h2><ol><li><p>get 方式传递普通数组和其他单独的参数<br>前台 js 代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个测试数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boxIds = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line"></span><br><span class="line">boxIds.<span class="title function_">push</span>(<span class="number">12182</span>)</span><br><span class="line"></span><br><span class="line">boxIds.<span class="title function_">push</span>(<span class="number">12183</span>)</span><br><span class="line"></span><br><span class="line">boxIds.<span class="title function_">push</span>(<span class="number">12184</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//向后台交互</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/xxx&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">boxIds</span>: boxIds,</span><br><span class="line"></span><br><span class="line">    <span class="attr">boxType</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">time</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">traditional</span>: <span class="literal">true</span>, <span class="comment">//当有数组的时候这里设置为true，没有数组的时候这里可以不设置</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">//do sth...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>后台 controller 代码（SpringMVC）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/box/changeLock&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">changeLock</span><span class="params">(Long[] boxIds, <span class="type">int</span> boxType)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> locker_ChangeLockService.changeLock(boxIds, boxType);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>post 方式向后台传递数组和普通参数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个测试数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boxIds = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"></span><br><span class="line">boxIds.<span class="title function_">push</span>(<span class="number">12182</span>);</span><br><span class="line"></span><br><span class="line">boxIds.<span class="title function_">push</span>(<span class="number">12183</span>);</span><br><span class="line"></span><br><span class="line">boxIds.<span class="title function_">push</span>(<span class="number">12184</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//向后台交互</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">url</span>: <span class="string">&quot;/xxx&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">contentType</span>:<span class="string">&#x27;application/www-form-urlencoded;charset=utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;boxIds&quot;</span>: boxIds,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;boxType&quot;</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;time&quot;</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//do sth...</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>后台 controller 代码（SpringMVC）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/box/changeLock&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">changeLock</span><span class="params">(Long[] boxIds, <span class="type">int</span> boxType)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> locker_ChangeLockService.changeLock(boxIds, boxType);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>post 方式向后台传递复杂参数后台使用@RequestBody 封装</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个测试数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boxIds = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"></span><br><span class="line">boxIds.<span class="title function_">push</span>(<span class="number">12182</span>);</span><br><span class="line"></span><br><span class="line">boxIds.<span class="title function_">push</span>(<span class="number">12183</span>);</span><br><span class="line"></span><br><span class="line">boxIds.<span class="title function_">push</span>(<span class="number">12184</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;boxIds&quot;</span>: boxIds,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;boxType&quot;</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;time&quot;</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向后台交互</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">url</span>: <span class="string">&quot;/xxx&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">contentType</span>:<span class="string">&#x27;application/json;charset=utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">data</span>: <span class="title class_">JSON</span>.<span class="title function_">stringfy</span>(obj)</span><br><span class="line"></span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//do sth...</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>后台 controller 代码（SpringMVC 和 bean）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/box/changeLock&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">changeLock</span><span class="params">(<span class="meta">@RequestBody</span> MyObj obj)</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> locker_ChangeLockService.changeLock(boxIds, boxType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyObj</span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer[] boxIds;<span class="comment">// 这里用数组还是List都可以</span></span><br><span class="line"><span class="keyword">private</span> Integer boxType;</span><br><span class="line"><span class="keyword">private</span> LocalDateTime time;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>post 方式向后台对象数组，后台直接封装为 list<br>前台代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sbUseHistory = table.<span class="property">cache</span>[<span class="string">&#x27;SbUseHistoryInfoTable&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> sbUseHistoryList = [] <span class="comment">// 这就是json对象数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; sbUseHistory.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> sbinfoProject = &#123;&#125;</span><br><span class="line">  <span class="comment">// 下面是把对象的属性和后台实体的属性对应起来，然后在吧json对象push进list数组中</span></span><br><span class="line">  sbinfoProject.<span class="property">xmName</span> = sbUseHistory[i].<span class="property">xm</span></span><br><span class="line">  sbinfoProject.<span class="property">sbId</span> = sbId</span><br><span class="line">  sbinfoProject.<span class="property">syTime</span> = sbUseHistory[i].<span class="property">sj</span></span><br><span class="line">  sbinfoProject.<span class="property">syStatus</span> = sbUseHistory[i].<span class="property">zt</span></span><br><span class="line">  <span class="comment">// sbinfoProject.createTime =</span></span><br><span class="line">  sbUseHistoryList.<span class="title function_">push</span>(sbinfoProject)</span><br><span class="line">&#125;</span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="title class_">Hussar</span>.<span class="property">ctxPath</span> + <span class="string">&#x27;/sbinfoProject/add&#x27;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">  <span class="attr">async</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">data</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(sbUseHistoryList), <span class="comment">// 这里把json数组用stringfy()方法转成字符串，后台就能封装成对应的实体的集合</span></span><br><span class="line">  <span class="attr">contentType</span>: <span class="string">&#x27;application/json;charset=utf-8&#x27;</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">result</span>) &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>后台代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/add&quot;)</span></span><br><span class="line"><span class="meta">@BussinessLog(key = &quot;/sbinfoProject/add&quot;, type = BussinessLogType.INSERT, value = &quot;新增设备项目履历&quot;)</span></span><br><span class="line"><span class="meta">@RequiresPermissions(&quot;sbinfoProject:add&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;SbinfoProject&gt; list)</span> &#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    Boolean flag;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        flag = sbinfoProjectService.saveBatch(list);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        map.put(<span class="string">&quot;code&quot;</span>, <span class="number">500</span>);</span><br><span class="line">        map.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        map.put(<span class="string">&quot;code&quot;</span>, <span class="number">200</span>);</span><br><span class="line">        map.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        map.put(<span class="string">&quot;code&quot;</span>, <span class="number">500</span>);</span><br><span class="line">        map.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>上传文件并监听上传进度</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line"><span class="comment">// 这里的file对象可以用其他的框架上传插件来获取，比如layui的或者bootstrap的,或者只是input type=&#x27;file&#x27;的等等等等。</span></span><br><span class="line"><span class="comment">// 这里只是获取到文件对象，并不用框架来上传，真正上传文件还在下面的代码中</span></span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, file) <span class="comment">// 这里的这个file就是前台的文件对象，后台用MultipartFile类接收的</span></span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;fileInfo&#x27;</span>, fileInfo)</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;id&#x27;</span>, newId)</span><br><span class="line"><span class="keyword">let</span> aj = &#123;</span><br><span class="line">  <span class="comment">//上传文件数据</span></span><br><span class="line">  <span class="attr">url</span>: <span class="title class_">Hussar</span>.<span class="property">ctxPath</span> + <span class="string">&#x27;/dtjcResources/uploadFile&#x27;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">cache</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">data</span>: formData,</span><br><span class="line">  <span class="attr">processData</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">contentType</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">async</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="title function_">xhr</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    xhr.<span class="property">upload</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;progress&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> progressRate = <span class="title class_">Math</span>.<span class="title function_">round</span>((e.<span class="property">loaded</span> / e.<span class="property">total</span>) * <span class="number">100</span>) + <span class="string">&#x27;%&#x27;</span> <span class="comment">// 获取到百分比</span></span><br><span class="line">      $(<span class="string">&quot;[fileId=&#x27;&quot;</span> + domId + <span class="string">&quot;&#x27;] .progress_num&quot;</span>).<span class="title function_">text</span>(progressRate) <span class="comment">// 让前台的dom元素显示这个百分比</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> xhr</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">code</span> == <span class="string">&#x27;200&#x27;</span>) &#123;</span><br><span class="line">      $(<span class="string">&quot;[fileId=&#x27;&quot;</span> + domId + <span class="string">&quot;&#x27;] .file_progress&quot;</span>).<span class="title function_">text</span>(<span class="string">&#x27;上传成功&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $(<span class="string">&quot;[fileId=&#x27;&quot;</span> + domId + <span class="string">&quot;&#x27;] .file_progress&quot;</span>).<span class="title function_">text</span>(<span class="string">&#x27;上传失败&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">error</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;[fileId=&#x27;&quot;</span> + domId + <span class="string">&quot;&#x27;] .file_progress&quot;</span>).<span class="title function_">text</span>(<span class="string">&#x27;上传失败&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">$.<span class="title function_">ajax</span>(aj)</span><br></pre></td></tr></table></figure><p>后台使用@RequestParam 一个个提取参数</p></li><li><p>上传一个或多个文件完整示例（按照 3 的方式微调可以监听上传进度）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;layui-form addArea&quot;</span> <span class="attr">lay-filter</span>=<span class="string">&quot;addForm&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-inline&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;</span>线别<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-inline&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;add-xianbie&quot;</span> <span class="attr">lay-filter</span>=<span class="string">&quot;addXianbie&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-inline&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;</span>行别<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-inline&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;add-xingbie&quot;</span> <span class="attr">lay-filter</span>=<span class="string">&quot;addXingbie&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-inline&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;</span>期次<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-inline&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;add-period&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-inline&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-inline&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;add-file-name&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;layui-input&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">readonly</span></span></span><br><span class="line"><span class="tag">          <span class="attr">placeholder</span>=<span class="string">&quot;点击选择文件&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-mid&quot;</span> <span class="attr">style</span>=<span class="string">&quot;padding: 0!important;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;layui-btn button-delete&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;removeFile&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          删除文件</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 这里的accept特指接收.xlsx文件,如果加上multipart属性还能多选文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;file&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;add-file&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;layui-hide&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">accept</span>=<span class="string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-block&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;confirmAdd&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-btn-primary&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">&quot;cancelAdd&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        取消</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 显示的input和隐藏的input type=file的交互</span></span><br><span class="line">$(<span class="string">&#x27;#add-file-name&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  $(<span class="string">&#x27;#add-file&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#add-file&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> event = e || <span class="variable language_">window</span>.<span class="property">event</span></span><br><span class="line">  <span class="comment">//获取 文件 个数 取消的时候使用</span></span><br><span class="line">  <span class="keyword">let</span> files = event.<span class="property">target</span>.<span class="property">files</span></span><br><span class="line">  <span class="keyword">if</span> (files &amp;&amp; files.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#add-file-name&#x27;</span>).<span class="title function_">val</span>(files[<span class="number">0</span>].<span class="property">name</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $(<span class="string">&#x27;#add-file-name&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#removeFile&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  $(<span class="string">&#x27;#add-file&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  $(<span class="string">&#x27;#add-file-name&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ajax文件和参数一起请求的方法</span></span><br><span class="line">$(<span class="string">&#x27;#confirmAdd&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!$(<span class="string">&#x27;#add-xianbie&#x27;</span>).<span class="title function_">val</span>()) &#123;</span><br><span class="line">    <span class="title class_">Hussar</span>.<span class="title function_">info</span>(<span class="string">&#x27;请选择线别&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!$(<span class="string">&#x27;#add-xingbie&#x27;</span>).<span class="title function_">val</span>()) &#123;</span><br><span class="line">    <span class="title class_">Hussar</span>.<span class="title function_">info</span>(<span class="string">&#x27;请选择行别&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!$(<span class="string">&#x27;#add-period&#x27;</span>).<span class="title function_">val</span>()) &#123;</span><br><span class="line">    <span class="title class_">Hussar</span>.<span class="title function_">info</span>(<span class="string">&#x27;请选择期次&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!$(<span class="string">&#x27;#add-file&#x27;</span>).<span class="title function_">val</span>()) &#123;</span><br><span class="line">    <span class="title class_">Hussar</span>.<span class="title function_">info</span>(<span class="string">&#x27;请选择文件&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 拼接form数据</span></span><br><span class="line">  <span class="keyword">let</span> param = <span class="keyword">new</span> <span class="title class_">FormData</span>() <span class="comment">//创建form对象</span></span><br><span class="line">  param.<span class="title function_">append</span>(<span class="string">&#x27;xianbie&#x27;</span>, $(<span class="string">&#x27;#add-xianbie&#x27;</span>).<span class="title function_">val</span>()) <span class="comment">//通过append向form对象添加数据</span></span><br><span class="line">  param.<span class="title function_">append</span>(<span class="string">&#x27;xingbie&#x27;</span>, $(<span class="string">&#x27;#add-xingbie&#x27;</span>).<span class="title function_">val</span>()) <span class="comment">//通过append向form对象添加数据</span></span><br><span class="line">  param.<span class="title function_">append</span>(<span class="string">&#x27;period&#x27;</span>, $(<span class="string">&#x27;#add-period&#x27;</span>).<span class="title function_">val</span>()) <span class="comment">//通过append向form对象添加数据</span></span><br><span class="line">  <span class="comment">// 这里如果写.files而不是.files[0]那么就能就能向后台一次发送多个文件</span></span><br><span class="line">  param.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, $(<span class="string">&#x27;#add-file&#x27;</span>)[<span class="number">0</span>].<span class="property">files</span>[<span class="number">0</span>]) <span class="comment">//通过append向form对象添加数据</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> load = layer.<span class="title function_">msg</span>(<span class="string">&#x27;正在读取文件并保存数据，请耐心等待&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">icon</span>: <span class="number">16</span>,</span><br><span class="line">    <span class="attr">shade</span>: <span class="number">0.7</span>,</span><br><span class="line">    <span class="attr">time</span>: <span class="number">0</span></span><br><span class="line">  &#125;)</span><br><span class="line">  $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="title class_">Hussar</span>.<span class="property">ctxPath</span> + <span class="string">&#x27;/tJcsjCjLj/addNewLjcjRecord&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">async</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">contentType</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">processData</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">data</span>: param,</span><br><span class="line">    <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!res) &#123;</span><br><span class="line">        layer.<span class="title function_">close</span>(load)</span><br><span class="line">        <span class="title class_">Hussar</span>.<span class="title function_">error</span>(<span class="string">&#x27;新增失败&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      layer.<span class="title function_">closeAll</span>()</span><br><span class="line">      <span class="title class_">Hussar</span>.<span class="title function_">success</span>(<span class="string">&#x27;新增成功&#x27;</span>)</span><br><span class="line">      <span class="title function_">initTable</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">error</span>(<span class="params"></span>) &#123;</span><br><span class="line">      layer.<span class="title function_">close</span>(load)</span><br><span class="line">      <span class="title class_">Hussar</span>.<span class="title function_">error</span>(<span class="string">&#x27;新增失败&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上传文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/addNewLjcjRecord&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">// 这里文件的接收能通过这种写法@RequestParam(&quot;file[]&quot;) MultipartFile[] file来接收多个文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addNewLjcjRecord</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file,</span></span><br><span class="line"><span class="params">                                <span class="meta">@RequestParam(&quot;xianbie&quot;)</span> String xianbie,</span></span><br><span class="line"><span class="params">                                <span class="meta">@RequestParam(&quot;xingbie&quot;)</span> String xingbie,</span></span><br><span class="line"><span class="params">                                <span class="meta">@RequestParam(&quot;period&quot;)</span> String period)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> cjLjService.addNewLjcjRecord(xianbie, xingbie, period, file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多文件上传（一起上传,监听上传进度）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--上传按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;uploadBtn&quot;</span>&gt;</span>点击我进行多文件上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--#uploadFileInputDiv是html里一个隐藏的div--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--多文件上传需要用到该容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;uploadFileInputDiv&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-hide&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#uploadBtn&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 在隐藏的div里拼接dom元素</span></span><br><span class="line">  <span class="keyword">let</span> html =</span><br><span class="line">    <span class="string">&#x27;&lt;input type=&quot;file&quot; id=&quot;multiInput&quot; name=&quot;filename&quot; multiple=&quot;multiple&quot; hidden&gt;&#x27;</span></span><br><span class="line">  $(<span class="string">&#x27;#uploadFileInputDiv&#x27;</span>).<span class="title function_">html</span>(html)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 给拼接的dom元素监听事件</span></span><br><span class="line">  $(<span class="string">&#x27;#uploadFileInputDiv input&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>() <span class="comment">//每一次需重新创建</span></span><br><span class="line">    <span class="keyword">let</span> files = $(<span class="string">&#x27;#uploadFileInputDiv input&#x27;</span>)[<span class="number">0</span>].<span class="property">files</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; files.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> file = files[i]</span><br><span class="line">      formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, file)</span><br><span class="line">    &#125;</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&#x27;testTaskId&#x27;</span>, $(<span class="string">&#x27;#csrw_id&#x27;</span>).<span class="title function_">val</span>())</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&#x27;fileId&#x27;</span>, fileId)</span><br><span class="line">    <span class="title function_">uploadMultiFile</span>(formData)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 触发dom元素的点击事件</span></span><br><span class="line">  $(<span class="string">&#x27;#uploadFileInputDiv input&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件上传的前台代码</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">uploadMultiFile</span>(<span class="params">formData</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> aj = &#123;</span><br><span class="line">    <span class="comment">//上传文件数据</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/MultiFileUpload&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">cache</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">data</span>: formData,</span><br><span class="line">    <span class="attr">processData</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">contentType</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">async</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="title function_">xhr</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">      xhr.<span class="property">upload</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;progress&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> progressRate = <span class="title class_">Math</span>.<span class="title function_">round</span>((e.<span class="property">loaded</span> / e.<span class="property">total</span>) * <span class="number">100</span>) + <span class="string">&#x27;%&#x27;</span> <span class="comment">// 上传进度</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> xhr</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">      layer.<span class="title function_">close</span>(progressLayer)</span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">500</span>) &#123;</span><br><span class="line">        <span class="title class_">Hussar</span>.<span class="title function_">info</span>(<span class="string">&#x27;上传文件失败&#x27;</span>)</span><br><span class="line">        fileUpload.<span class="title function_">reload</span>()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="title class_">Hussar</span>.<span class="title function_">success</span>(<span class="string">&#x27;上传成功！&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">error</span>(<span class="params"></span>) &#123;</span><br><span class="line">      layer.<span class="title function_">close</span>(progressLayer)</span><br><span class="line">      <span class="title class_">Hussar</span>.<span class="title function_">info</span>(<span class="string">&#x27;上传文件失败&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  $.<span class="title function_">ajax</span>(aj)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/MultiFileUpload&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">noiseFileUpload</span><span class="params">(<span class="meta">@RequestParam(&quot;file[]&quot;)</span> MultipartFile[] file,</span></span><br><span class="line"><span class="params">                                           <span class="meta">@RequestParam(&quot;testTaskId&quot;)</span> String testTaskId,</span></span><br><span class="line"><span class="params">                                           <span class="meta">@RequestParam(&quot;fileId&quot;)</span> String fileId)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收的参数有二进制的文件数组，还有其他的参数</span></span><br><span class="line">   <span class="comment">// 自己做处理</span></span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回</span></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：如果不限于jQuery,比如vue，通用情况下，RequestHeader里面的Content-Type为<code>multipart/form-data</code><br>后台不能用<code>@RequestParam(&quot;file[]&quot;) MultipartFile[] file</code>这种方式接收文件，要用一个对象来接收，下面是例子</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue代码 上传文件组件，采用element-plus</span></span><br><span class="line">&lt;el-upload</span><br><span class="line">    ref=<span class="string">&quot;upload&quot;</span></span><br><span class="line">    <span class="keyword">class</span>=<span class="string">&quot;upload-files&quot;</span></span><br><span class="line">    action=<span class="string">&quot;&quot;</span></span><br><span class="line">    name=<span class="string">&quot;files&quot;</span></span><br><span class="line">    multiple</span><br><span class="line">    :auto-upload=<span class="string">&quot;false&quot;</span></span><br><span class="line">    :file-list=<span class="string">&quot;fileList&quot;</span></span><br><span class="line">    :on-change=<span class="string">&quot;handleChange&quot;</span></span><br><span class="line">    style=<span class="string">&quot;margin-top: 20px&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">slot</span>=<span class="string">&quot;trigger&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>选取文件<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line">&lt;/el-upload&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submitUpload&quot;</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里采用的是手动上传，选取文件后，点击保存才会触发上传操作</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 上传文件数组</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> fileList = <span class="title function_">ref</span>([]) </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 文件改变时回调钩子</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> <span class="title function_">handleChange</span> = (<span class="params">file, files</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// file是当前上传的文件，files是当前所有的文件，</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 不懂得话可以打印一下这两个数据 就能明白</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    fileList.<span class="property">value</span> = files</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 测试多文件上传</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> <span class="title function_">submitUpload</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    formData.<span class="title function_">append</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;myk&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    fileList.<span class="property">value</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 这里有个坑，在将文件append到formData的时候， item其实并不是真是数据 item.raw才是</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      formData.<span class="title function_">append</span>(<span class="string">&#x27;files&#x27;</span>, item.<span class="property">raw</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 这里是发送请求，注意 headers: &#123;&#x27;Content-Type&#x27;: &#x27;multipart/form-data&#x27;&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> result = <span class="keyword">await</span> requestUtil.<span class="title function_">fileUpload</span>(<span class="string">&#x27;/testUpload&#x27;</span>, formData)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUpload</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/testUpload&quot;)</span></span><br><span class="line">    <span class="comment">// 不需要添加@requestBody 因为这是前端Content-Type不是application/json</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testUpload</span><span class="params">(TestUploadVo testUploadVo)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (MultipartFile file : testUploadVo.getFiles()) &#123;</span><br><span class="line">            System.out.println(file.getOriginalFilename());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(testUploadVo.getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUploadVo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MultipartFile[] files;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：有的时候<code>@RequestParam(&quot;file[]&quot;) MultipartFile[] file</code>获取到的文件数组的长度为 0<br>此时，可以用如下的方式获取文件数组 or 集合</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/import_v1&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Tip <span class="title function_">import_v1</span><span class="params">(<span class="meta">@RequestParam(&quot;xianbie&quot;)</span> Integer xianbie,</span></span><br><span class="line"><span class="params">                     <span class="meta">@RequestParam(&quot;xingbie&quot;)</span> Integer xingbie,</span></span><br><span class="line"><span class="params">                     <span class="meta">@RequestParam(&quot;lx&quot;)</span> Integer lx,</span></span><br><span class="line"><span class="params">                     <span class="meta">@RequestParam(&quot;jcfs&quot;)</span> Integer jcfs,</span></span><br><span class="line"><span class="params">                     <span class="meta">@RequestParam(&quot;jcrq&quot;)</span> String jcrq,</span></span><br><span class="line"><span class="params">                     <span class="meta">@RequestParam(&quot;jcry&quot;)</span> String jcry,</span></span><br><span class="line"><span class="params">                     HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">SjfxMhJcjl</span> <span class="variable">jcjl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SjfxMhJcjl</span>();</span><br><span class="line">    jcjl.setXianbie(xianbie);</span><br><span class="line">    jcjl.setXingbie(xingbie);</span><br><span class="line">    jcjl.setLx(lx);</span><br><span class="line">    jcjl.setJcfs(jcfs);</span><br><span class="line">    jcjl.setJcrq(Timestamp.valueOf(jcrq));</span><br><span class="line">    jcjl.setJcry(jcry);</span><br><span class="line">    <span class="type">MultipartHttpServletRequest</span> <span class="variable">multipartRequest</span> <span class="operator">=</span> (MultipartHttpServletRequest) request;</span><br><span class="line">    List&lt;MultipartFile&gt; files = multipartRequest.getFiles(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> sjfxMhJcjlService.Import_v1(files, jcjl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
            <tag> ajax前后台参数传递 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实时监听input或textarea值发生变化（不需要失去焦点）</title>
      <link href="/posts/23464.html"/>
      <url>/posts/23464.html</url>
      
        <content type="html"><![CDATA[<p>暂时只对 input 和 textarea 有效</p><p>select 没经过测试，不知道对 select 是否也有效</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;textarea&#x27;</span>).<span class="title function_">bind</span>(<span class="string">&#x27;input propertychange&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// do sth</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
            <tag> 实时监听input或textarea值发生变化（不需要失去焦点） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax导入静态文件</title>
      <link href="/posts/126.html"/>
      <url>/posts/126.html</url>
      
        <content type="html"><![CDATA[<h2 id="导入静态json"><a href="#导入静态json" class="headerlink" title="导入静态json"></a>导入静态json</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="title class_">Hussar</span>.<span class="property">ctxPath</span> + <span class="string">&#x27;/static/js/homePage/map.json&#x27;</span>, <span class="comment">// 文件相对地址（相对于使用这个js脚本的html文件,非常重要，仔细理解这句话）</span></span><br><span class="line">  <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>, <span class="comment">// 类型,文件里定义的变量的类型</span></span><br><span class="line">  <span class="attr">async</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="导入静态txt"><a href="#导入静态txt" class="headerlink" title="导入静态txt"></a>导入静态txt</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意：导入txt时不要写dateType，会报错</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;./GZ11pathData.txt&#x27;</span>, <span class="comment">// 文件相对地址（相对于使用这个js脚本的html文件,非常重要，仔细理解这句话）</span></span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
            <tag> ajax导入静态文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>键盘事件</title>
      <link href="/posts/61433.html"/>
      <url>/posts/61433.html</url>
      
        <content type="html"><![CDATA[<h2 id="回车搜索"><a href="#回车搜索" class="headerlink" title="回车搜索"></a>回车搜索</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#search&#x27;</span>).<span class="title function_">bind</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> e = event || <span class="variable language_">window</span>.<span class="property">event</span> || <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>.<span class="property">arguments</span>[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">keyCode</span> == <span class="number">13</span>) &#123;</span><br><span class="line">    <span class="comment">// search是输入框，此处是要执行输入完毕后按下回车后的操作</span></span><br><span class="line">    <span class="comment">//…………..</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
            <tag> 键盘事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>isNaN()</title>
      <link href="/posts/15930.html"/>
      <url>/posts/15930.html</url>
      
        <content type="html"><![CDATA[<p>sNaN() 函数其实并不能像它的描述中所写的那样，数字值返回 false，其他返回 true。</p><p>实际上，它是判断一个值能否被 Number() 合法地转化成数字。</p><p>这中间有什么区别呢，主要提现在一些特别的情况如下：</p><ul><li><strong>1、数字形式的字符串</strong>。例如 “123”、”-3.14”，虽然是字符串型，但被 isNaN() 判为数，返回 false。（”12,345,678”，”1.2.3” 这些返回 true）</li><li><strong>2、空值</strong>。null、空字符串””、空数组[]，都可被 Number()合法的转为 0，于是被 isNaN 认为是数，返回 false。（undefined、空对象{}、空函数等无法转数字，返回 true）</li><li><strong>3、布尔值</strong>。Number(true)=1,Number(false)=0，所以 isNaN 对布尔值也返回 false。</li><li><strong>4、长度为 1 的数组</strong>。结果取决于其中元素，即：isNaN([a])=isNaN(a)，可递归。例如 isNaN([[“1.5”]])=false。</li><li><strong>5、数字特殊形式</strong>。例如”0xabc”、”2.5e+7”，这样的十六进制和科学计数法，即使是字符串也能转数字，所以也返回 false。</li></ul><p>可能还有其他情况，一时想不到了。</p><p>总之，很多时候不能用单纯用 isNaN() 取判断。</p><p>比如一个空值或者数组，甚至是包含字母和符号的字符串，它都有可能告诉你这是数值。还是要结合具体情况使用。</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> JavaScript </tag>
            
            <tag> isNaN() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>get请求的url经常会过长，导致数据丢失</title>
      <link href="/posts/17621.html"/>
      <url>/posts/17621.html</url>
      
        <content type="html"><![CDATA[<p>解决方案：采用 post 请求，来解决该问题，写一个采用 post 请求的函数即可</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sendByPost</span>(<span class="params">url, ids</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> oForm = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">  oForm.<span class="property">method</span> = <span class="string">&#x27;post&#x27;</span></span><br><span class="line">  oForm.<span class="property">action</span> = url</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> hasitemsids_input = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">  hasitemsids_input.<span class="property">type</span> = <span class="string">&#x27;hidden&#x27;</span></span><br><span class="line">  hasitemsids_input.<span class="property">name</span> = <span class="string">&#x27;ids&#x27;</span></span><br><span class="line">  hasitemsids_input.<span class="property">value</span> = ids</span><br><span class="line">  oForm.<span class="title function_">appendChild</span>(hasitemsids_input)</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(oForm)</span><br><span class="line"></span><br><span class="line">  oForm.<span class="title function_">submit</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以使用 formData</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> JavaScript </tag>
            
            <tag> get请求的url经常会过长，导致数据丢失 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后台接口返回的数据出现了$ref，$data.xxx的字样</title>
      <link href="/posts/54591.html"/>
      <url>/posts/54591.html</url>
      
        <content type="html"><![CDATA[<p>分析原因：个人理解是如果后台返回了个 map,map 里面放了两个 key 值，但是这两个 key 所对应的 value 指向的是同一个目标地址，概括为两个 key 所对应的 value 是同一个，或者说一个 value 对象（值相同，地址相同）用 map 的两个 key 值存储，那么返回前台时，第二个 key 的值不会是 value 而是第一个 key 的 value 的地址。</p><p>可以简单理解为：map 里面有重复的 value,那么就会出现如标题所示的字样。</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 后台接口返回的数据出现了$ref，$data.xxx的字样 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用本地的html文件通过ajax访问服务器</title>
      <link href="/posts/3195.html"/>
      <url>/posts/3195.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>在 chrome 的快捷方式上右键属性，选中快捷方式 tab，在目标栏的最后添加以下参数，然后重启 chrome，用来测试的文件就放在下面配置的 data-dir 里</p><p>注意：每个—前面都有一个空格</p><p>注意：服务器必须开启跨域访问</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">--user-data-dir=&quot;C:\Users\13551\Desktop&quot; --test-type --disable-web-security</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 利用本地的html文件通过ajax访问服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的区段查询表单验证</title>
      <link href="/posts/58527.html"/>
      <url>/posts/58527.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-正整数区段查询"><a href="#1-正整数区段查询" class="headerlink" title="1.正整数区段查询"></a>1.正整数区段查询</h2><p>支持全不填，全填，和单独填任意一个</p><p>html 代码</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-inline&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;sjtjStartMile&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;开始里程（m）&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;layui-input&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-mid&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-inline&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;sjtjEndMile&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;结束里程（m）&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;layui-input&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>js 代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表单验证开始</span></span><br><span class="line"><span class="keyword">let</span> startMile = $(<span class="string">&#x27;#sjtjStartMile&#x27;</span>).<span class="title function_">val</span>()</span><br><span class="line"><span class="keyword">let</span> endMile = $(<span class="string">&#x27;#sjtjEndMile&#x27;</span>).<span class="title function_">val</span>()</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isNaN</span>(startMile) || <span class="title class_">Number</span>(startMile) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="title class_">Hussar</span>.<span class="title function_">info</span>(<span class="string">&#x27;起始里程必须大于等于0&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isNaN</span>(endMile) || <span class="title class_">Number</span>(endMile) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="title class_">Hussar</span>.<span class="title function_">info</span>(<span class="string">&#x27;终止里程必须大于等于0&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (startMile &amp;&amp; endMile &amp;&amp; <span class="title class_">Number</span>(startMile) &gt;= <span class="title class_">Number</span>(endMile)) &#123;</span><br><span class="line">  <span class="title class_">Hussar</span>.<span class="title function_">info</span>(<span class="string">&#x27;起始里程必须小于终止里程&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 表单验证结束</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 常用的区段查询表单验证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的前端手写功能</title>
      <link href="/posts/11266.html"/>
      <url>/posts/11266.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、防抖"><a href="#1、防抖" class="headerlink" title="1、防抖"></a>1、防抖</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">task</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;run task&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> debounceTask = <span class="title function_">debounce</span>(task, <span class="number">1000</span>)</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, debounceTask)</span><br></pre></td></tr></table></figure><h1 id="2、节流"><a href="#2、节流" class="headerlink" title="2、节流"></a>2、节流</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> last = <span class="number">0</span> <span class="comment">// 上次触发时间</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    <span class="keyword">if</span> (now - last &gt; delay) &#123;</span><br><span class="line">      last = now</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">task</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;run task&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> throttleTask = <span class="title function_">throttle</span>(task, <span class="number">1000</span>)</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, throttleTask)</span><br></pre></td></tr></table></figure><h1 id="3、深拷贝"><a href="#3、深拷贝" class="headerlink" title="3、深拷贝"></a>3、深拷贝</h1><p><strong>JSON 方法</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不支持值为undefined、函数和循环引用的情况</span></span><br><span class="line"><span class="keyword">const</span> cloneObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj))</span><br></pre></td></tr></table></figure><p><strong>递归拷贝</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj, cache = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span> || <span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> obj</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj)</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (cache.<span class="title function_">has</span>(obj)) <span class="keyword">return</span> cache.<span class="title function_">get</span>(obj) <span class="comment">// 如果出现循环引用，则返回缓存的对象，防止递归进入死循环</span></span><br><span class="line">  <span class="keyword">let</span> cloneObj = <span class="keyword">new</span> obj.<span class="title function_">constructor</span>(<span class="params"></span>) <span class="comment">// 使用对象所属的构造函数创建一个新对象</span></span><br><span class="line">  cache.<span class="title function_">set</span>(obj, cloneObj) <span class="comment">// 缓存对象，用于循环引用的情况</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      cloneObj[key] = <span class="title function_">deepClone</span>(obj[key], cache) <span class="comment">// 递归拷贝</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cloneObj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>, <span class="attr">address</span>: &#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">200</span> &#125; &#125;</span><br><span class="line">obj.<span class="property">a</span> = obj <span class="comment">// 循环引用</span></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title function_">deepClone</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj.<span class="property">address</span> === obj.<span class="property">address</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h1 id="4、手写-Promise"><a href="#4、手写-Promise" class="headerlink" title="4、手写[[Promise]]"></a>4、手写[[Promise]]</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&#x27;pending&#x27;</span> <span class="comment">// 初始状态为等待</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">null</span> <span class="comment">// 成功的值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">null</span> <span class="comment">// 失败的原因</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span> = [] <span class="comment">// 成功的回调函数数组</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span> = [] <span class="comment">// 失败的回调函数数组</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">resolve</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = value</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> <span class="title function_">fn</span>()) <span class="comment">// 调用成功的回调函数</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">reject</span> = (<span class="params">reason</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reason</span> = reason</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> <span class="title function_">fn</span>()) <span class="comment">// 调用失败的回调函数</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> x = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">          x <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span> ? x.<span class="title function_">then</span>(resolve, reject) : <span class="title function_">resolve</span>(x)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> x = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">          x <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span> ? x.<span class="title function_">then</span>(resolve, reject) : <span class="title function_">resolve</span>(x)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 将成功的回调函数放入成功数组</span></span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> x = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">            x <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span> ? x.<span class="title function_">then</span>(resolve, reject) : <span class="title function_">resolve</span>(x)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 将失败的回调函数放入失败数组</span></span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> x = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">            x <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span> ? x.<span class="title function_">then</span>(resolve, reject) : <span class="title function_">resolve</span>(x)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">p1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>, <span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">p2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>, <span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">p1</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">p2</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">ret</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ret) <span class="comment">// 2</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h1 id="5、异步控制并发数"><a href="#5、异步控制并发数" class="headerlink" title="5、异步控制并发数"></a>5、异步控制并发数</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">limitRequest</span>(<span class="params">urls = [], limit = <span class="number">3</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> len = urls.<span class="property">length</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时启动limit个任务</span></span><br><span class="line">    <span class="keyword">while</span> (limit &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="title function_">start</span>()</span><br><span class="line">      limit -= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> url = urls.<span class="title function_">shift</span>() <span class="comment">// 从数组中拿取第一个任务</span></span><br><span class="line">      <span class="keyword">if</span> (url) &#123;</span><br><span class="line">        axios</span><br><span class="line">          .<span class="title function_">post</span>(url)</span><br><span class="line">          .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// todo</span></span><br><span class="line">          &#125;)</span><br><span class="line">          .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// todo</span></span><br><span class="line">          &#125;)</span><br><span class="line">          .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (count == len - <span class="number">1</span>) &#123;</span><br><span class="line">              <span class="comment">// 最后一个任务完成</span></span><br><span class="line">              <span class="title function_">resolve</span>()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// 完成之后，启动下一个任务</span></span><br><span class="line">              count++</span><br><span class="line">              <span class="title function_">start</span>()</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="title function_">limitRequest</span>([</span><br><span class="line">  <span class="string">&#x27;http://xxa&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;http://xxb&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;http://xxc&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;http://xxd&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;http://xxe&#x27;</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><h1 id="6、继承"><a href="#6、继承" class="headerlink" title="6、继承"></a>6、继承</h1><p><strong>ES5 继承（寄生组合继承）</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27; is eating&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> xm = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&#x27;xiaoming&#x27;</span>, <span class="number">12</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xm.<span class="property">name</span>) <span class="comment">// xiaoming</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xm.<span class="property">age</span>) <span class="comment">// 12</span></span><br><span class="line">xm.<span class="title function_">eat</span>() <span class="comment">// xiaoming is eating</span></span><br></pre></td></tr></table></figure><p><strong>ES6 继承</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27; is eating&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> xm = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&#x27;xiaoming&#x27;</span>, <span class="number">12</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xm.<span class="property">name</span>) <span class="comment">// xiaoming</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xm.<span class="property">age</span>) <span class="comment">// 12</span></span><br><span class="line">xm.<span class="title function_">eat</span>() <span class="comment">// xiaoming is eating</span></span><br></pre></td></tr></table></figure><h1 id="7、数组排序"><a href="#7、数组排序" class="headerlink" title="7、数组排序"></a>7、数组排序</h1><p><strong>sort 排序</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对数字进行排序，简写</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>]</span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对字母进行排序，简写</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">arr.<span class="title function_">sort</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span></span><br></pre></td></tr></table></figure><p><strong>冒泡排序</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 从第一个元素开始，比较相邻的两个元素，前者大就交换位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">let</span> num = arr[j]</span><br><span class="line">        arr[j] = arr[j + <span class="number">1</span>]</span><br><span class="line">        arr[j + <span class="number">1</span>] = num</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 每次遍历结束，都能找到一个最大值，放在数组最后</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">bubbleSort</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>])) <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h1 id="8、数组去重"><a href="#8、数组去重" class="headerlink" title="8、数组去重"></a>8、数组去重</h1><p><strong>Set 去重</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newArr = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)]</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">const</span> newArr = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr))</span><br></pre></td></tr></table></figure><p><strong>indexOf 去重</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newArr = arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> arr.<span class="title function_">indexOf</span>(item) === index)</span><br></pre></td></tr></table></figure><h1 id="9、获取-url-参数"><a href="#9、获取-url-参数" class="headerlink" title="9、获取 url 参数"></a>9、获取 url 参数</h1><p><strong>URLSearchParams 方法</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个URLSearchParams实例</span></span><br><span class="line"><span class="keyword">const</span> urlSearchParams = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>)</span><br><span class="line"><span class="comment">// 把键值对列表转换为一个对象</span></span><br><span class="line"><span class="keyword">const</span> params = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(urlSearchParams.<span class="title function_">entries</span>())</span><br></pre></td></tr></table></figure><p><strong>split 方法</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getParams</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> (url.<span class="title function_">includes</span>(<span class="string">&#x27;?&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">const</span> str = url.<span class="title function_">split</span>(<span class="string">&#x27;?&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">const</span> arr = str.<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> key = item.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">const</span> val = item.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">      res[key] = <span class="built_in">decodeURIComponent</span>(val) <span class="comment">// 解码</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="title function_">getParams</span>(<span class="string">&#x27;http://www.baidu.com?user=%E9%98%BF%E9%A3%9E&amp;age=16&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user) <span class="comment">// &#123; user: &#x27;阿飞&#x27;, age: &#x27;16&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h1 id="10、发布订阅模式"><a href="#10、发布订阅模式" class="headerlink" title="10、发布订阅模式"></a>10、发布订阅模式</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventEmitter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span> = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">on</span>(<span class="params">name, fn</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">cache</span>[name]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cache</span>[name].<span class="title function_">push</span>(fn)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cache</span>[name] = [fn]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">off</span>(<span class="params">name, fn</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> tasks = <span class="variable language_">this</span>.<span class="property">cache</span>[name]</span><br><span class="line">    <span class="keyword">if</span> (tasks) &#123;</span><br><span class="line">      <span class="keyword">const</span> index = tasks.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">f</span>) =&gt;</span> f === fn || f.<span class="property">callback</span> === fn)</span><br><span class="line">      <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        tasks.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">emit</span>(<span class="params">name, once = <span class="literal">false</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">cache</span>[name]) &#123;</span><br><span class="line">      <span class="comment">// 创建副本，如果回调函数内继续注册相同事件，会造成死循环</span></span><br><span class="line">      <span class="keyword">const</span> tasks = <span class="variable language_">this</span>.<span class="property">cache</span>[name].<span class="title function_">slice</span>()</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> fn <span class="keyword">of</span> tasks) &#123;</span><br><span class="line">        <span class="title function_">fn</span>()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (once) &#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">cache</span>[name]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> eventBus = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">task1</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;task1&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">task2</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;task2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">eventBus.<span class="title function_">on</span>(<span class="string">&#x27;task&#x27;</span>, task1)</span><br><span class="line">eventBus.<span class="title function_">on</span>(<span class="string">&#x27;task&#x27;</span>, task2)</span><br><span class="line">eventBus.<span class="title function_">off</span>(<span class="string">&#x27;task&#x27;</span>, task1)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  eventBus.<span class="title function_">emit</span>(<span class="string">&#x27;task&#x27;</span>) <span class="comment">// task2</span></span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 常见的前端手写功能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取时间</title>
      <link href="/posts/23546.html"/>
      <url>/posts/23546.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> getDate = <span class="keyword">function</span> <span class="title function_">getNowFormatDate</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//获取当前时间</span></span><br><span class="line">  <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">  <span class="keyword">var</span> seperator1 = <span class="string">&#x27;-&#x27;</span></span><br><span class="line">  <span class="keyword">var</span> seperator2 = <span class="string">&#x27;:&#x27;</span></span><br><span class="line">  <span class="keyword">var</span> month =</span><br><span class="line">    date.<span class="title function_">getMonth</span>() + <span class="number">1</span> &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + (date.<span class="title function_">getMonth</span>() + <span class="number">1</span>) : date.<span class="title function_">getMonth</span>() + <span class="number">1</span></span><br><span class="line">  <span class="keyword">var</span> strDate = date.<span class="title function_">getDate</span>() &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + date.<span class="title function_">getDate</span>() : date.<span class="title function_">getDate</span>()</span><br><span class="line">  <span class="keyword">var</span> currentdate =</span><br><span class="line">    date.<span class="title function_">getFullYear</span>() +</span><br><span class="line">    seperator1 +</span><br><span class="line">    month +</span><br><span class="line">    seperator1 +</span><br><span class="line">    strDate +</span><br><span class="line">    <span class="string">&#x27; &#x27;</span> +</span><br><span class="line">    date.<span class="title function_">getHours</span>() +</span><br><span class="line">    seperator2 +</span><br><span class="line">    date.<span class="title function_">getMinutes</span>() +</span><br><span class="line">    seperator2 +</span><br><span class="line">    date.<span class="title function_">getSeconds</span>()</span><br><span class="line">  <span class="keyword">return</span> currentdate</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 获取时间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态加载上传图片</title>
      <link href="/posts/32149.html"/>
      <url>/posts/32149.html</url>
      
        <content type="html"><![CDATA[<p>前端</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 就是获取图片的存储路径，让图片标签的src值指向一个后台写流的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showImg</span>(<span class="params">img</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> url = img.<span class="property">url</span></span><br><span class="line">  <span class="keyword">let</span> path = <span class="string">&#x27;/uploadFileFile/getBytesByAbsolutePath?imgPath=&#x27;</span> + url</span><br><span class="line">  $(<span class="string">&#x27;img&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, path)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后端</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 根据图片的绝对路径返回字节流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/getBytesByAbsolutePath&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBytesByAbsolutePath</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">imgPath</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;imgPath&quot;</span>);</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(imgPath);</span><br><span class="line"><span class="keyword">if</span>(file.exists())&#123;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line"><span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">is.read(bytes);</span><br><span class="line">is.close();</span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">response.setContentType(<span class="string">&quot;image/*&quot;</span>);</span><br><span class="line">os.write(bytes);</span><br><span class="line">os.close();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;图片不存在&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 动态加载上传图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>layer弹出层里再弹出一个弹出层导致新的弹出层重复弹出的问题</title>
      <link href="/posts/16214.html"/>
      <url>/posts/16214.html</url>
      
        <content type="html"><![CDATA[<p>解决办法:在 layui 的 layer 配置 json 里给每个弹出层指定个不同的 id 即可</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> index = layer.<span class="title function_">open</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">title</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">move</span>: $(<span class="string">&#x27;#uploadHead&#x27;</span>),</span><br><span class="line">  <span class="attr">closeBtn</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">area</span>: [<span class="string">&#x27;5.1979rem&#x27;</span>, <span class="string">&#x27;2.5052rem&#x27;</span>],</span><br><span class="line">  <span class="attr">content</span>: $(<span class="string">&#x27;#uploadFileModel&#x27;</span>),</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;layer1&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">layer.<span class="title function_">confirm</span>(</span><br><span class="line">  <span class="string">&#x27;是否取消本次文件上传？&#x27;</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">skin</span>: <span class="string">&#x27;confirm-class&#x27;</span>,</span><br><span class="line">    <span class="attr">icon</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;提示&#x27;</span>,</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;layer2&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">index1</span>) &#123;</span><br><span class="line">    <span class="comment">// index1表示确认框代表的弹出层实例</span></span><br><span class="line">    layer.<span class="title function_">closeAll</span>()</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> layui </tag>
            
            <tag> layer弹出层里再弹出一个弹出层导致新的弹出层重复弹出的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>table删除鼠标悬浮背景颜色变色的效果</title>
      <link href="/posts/28372.html"/>
      <url>/posts/28372.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*删除鼠标悬浮背景变色效果*/</span></span><br><span class="line"><span class="comment">/*其中#cxDataQdTjSxDiv是数据表格table容器的id,格式如下*/</span></span><br><span class="line"><span class="selector-id">#CxDataQdTjSxDiv</span> <span class="selector-class">.layui-table</span> <span class="selector-tag">tbody</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#CxDataQdTjSxDiv</span> <span class="selector-class">.layui-table</span> <span class="selector-tag">thead</span> <span class="selector-tag">tr</span>,</span><br><span class="line"><span class="selector-id">#CxDataQdTjSxDiv</span> <span class="selector-class">.layui-table</span><span class="selector-attr">[lay-even]</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(even) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;CxDataQdTjSxDiv&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tableContainer&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;tableTitle&quot;</span>&gt;</span>区段超限情况统计（上行）<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;CxDataQdTjSxTab&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-table&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> layui </tag>
            
            <tag> table删除鼠标悬浮背景颜色变色的效果 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>layer弹出带遮罩得加载动画</title>
      <link href="/posts/31980.html"/>
      <url>/posts/31980.html</url>
      
        <content type="html"><![CDATA[<p><code>var index = layer.msg(&#39;正在删除文件，请耐心等待&#39;, &#123;icon: 16, shade: 0.7, time: 0&#125;);</code></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> layui </tag>
            
            <tag> layer弹出带遮罩得加载动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>table动态纵向合并单元格</title>
      <link href="/posts/14114.html"/>
      <url>/posts/14114.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正常渲染表格</span></span><br><span class="line">table.<span class="title function_">render</span>(&#123;</span><br><span class="line">            <span class="attr">elem</span>: <span class="string">&#x27;#CxDataQdTjXXTab&#x27;</span>,</span><br><span class="line">            <span class="attr">height</span>: <span class="number">300</span>,</span><br><span class="line">            <span class="attr">url</span>: <span class="title class_">Hussar</span>.<span class="property">ctxPath</span> + <span class="string">&#x27;/CxData/getQdCxData&#x27;</span>,</span><br><span class="line">            <span class="attr">cols</span>: [</span><br><span class="line">                <span class="comment">//一级表头</span></span><br><span class="line">                [</span><br><span class="line">                    &#123;<span class="attr">title</span>: <span class="string">&#x27;序号&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;numbers&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">hide</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">                    &#123;<span class="attr">title</span>: <span class="string">&#x27;区段&#x27;</span>, <span class="attr">field</span>: <span class="string">&#x27;qj&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>,&#125;,</span><br><span class="line">                    &#123;<span class="attr">title</span>: <span class="string">&#x27;通道&#x27;</span>, <span class="attr">field</span>: <span class="string">&#x27;lx&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>,&#125;,</span><br><span class="line">                    &#123;<span class="attr">title</span>: <span class="string">&#x27;超限数量&#x27;</span>, <span class="attr">field</span>: <span class="string">&#x27;sl&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>&#125;,</span><br><span class="line">                ],</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">page</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">id</span>: <span class="string">&#x27;CxDataQdTjXXTab&#x27;</span>,</span><br><span class="line">            <span class="attr">even</span>: <span class="literal">true</span>, <span class="attr">limit</span>: <span class="number">20</span>,</span><br><span class="line">            <span class="attr">where</span>: &#123;</span><br><span class="line">                <span class="attr">csrwId</span>: $(<span class="string">&quot;#csrwId&quot;</span>).<span class="title function_">val</span>(),</span><br><span class="line">                <span class="attr">xb</span>: <span class="string">&#x27;下行&#x27;</span>,</span><br><span class="line">                <span class="attr">isSpecial</span>: isSpecial,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">done</span>(<span class="params">res</span>) &#123;</span><br><span class="line">                <span class="comment">// 表格渲染结束后调用合并单元格的方法</span></span><br><span class="line">                <span class="title function_">merge</span>(res, <span class="string">&quot;CxDataQdTjXXTab&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态和并单元格的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">res, id</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> data = res.<span class="property">data</span>;</span><br><span class="line">        <span class="keyword">let</span> mergeIndex = <span class="number">0</span>;<span class="comment">//定位需要添加合并属性的行数</span></span><br><span class="line">        <span class="keyword">let</span> mark = <span class="number">1</span>; <span class="comment">//这里涉及到简单的运算，mark是计算每次需要合并的格子数</span></span><br><span class="line">        <span class="comment">// 这里的索引是表格col[]数组的下标，下标从0开始，隐藏的列也要算</span></span><br><span class="line">        <span class="keyword">let</span> columsIndex = [<span class="number">2</span>, <span class="number">3</span>];<span class="comment">//需要合并的列索引值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; columsName.<span class="property">length</span>; k++) &#123; <span class="comment">//这里循环所有要合并的列</span></span><br><span class="line">            <span class="keyword">let</span> trArr = $(<span class="string">&quot;[lay-id=&#x27;&quot;</span> + id + <span class="string">&quot;&#x27;]&gt;.layui-table-box&gt;.layui-table-body&gt;.layui-table&quot;</span>).<span class="title function_">find</span>(<span class="string">&quot;tr&quot;</span>);<span class="comment">//所有行</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; res.<span class="property">data</span>.<span class="property">length</span>; i++) &#123; <span class="comment">//这里循环表格当前的数据</span></span><br><span class="line">                <span class="keyword">let</span> tdCurArr = trArr.<span class="title function_">eq</span>(i).<span class="title function_">find</span>(<span class="string">&quot;td&quot;</span>).<span class="title function_">eq</span>(columsIndex[k]);<span class="comment">//获取当前行的当前列</span></span><br><span class="line">                <span class="keyword">let</span> tdPreArr = trArr.<span class="title function_">eq</span>(mergeIndex).<span class="title function_">find</span>(<span class="string">&quot;td&quot;</span>).<span class="title function_">eq</span>(columsIndex[k]);<span class="comment">//获取相同列的第一列</span></span><br><span class="line">                <span class="comment">// 这里的markId就是合并的标识或者说条件，可以有多个，当相邻的某些行数据的这些属性相等时，上面设置的列索引中</span></span><br><span class="line">                <span class="comment">// 所包含的列就会合并</span></span><br><span class="line">                <span class="keyword">if</span> (data[i].<span class="property">markId</span> === data[i - <span class="number">1</span>].<span class="property">markId</span>) &#123; &#123; <span class="comment">//后一行的值与前一行的值做比较，相同就需要合并</span></span><br><span class="line">                    mark += <span class="number">1</span>;</span><br><span class="line">                    tdPreArr.<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="comment">//相同列的第一列增加rowspan属性</span></span><br><span class="line">                        $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;rowspan&quot;</span>, mark);</span><br><span class="line">                    &#125;);</span><br><span class="line">                    tdCurArr.<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="comment">//当前行隐藏</span></span><br><span class="line">                        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;display&quot;</span>, <span class="string">&quot;none&quot;</span>);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mergeIndex = i;</span><br><span class="line">                    mark = <span class="number">1</span>;<span class="comment">//一旦前后两行的值不一样了，那么需要合并的格子数mark就需要重新计算</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            mergeIndex = <span class="number">0</span>;</span><br><span class="line">            mark = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> layui </tag>
            
            <tag> table动态纵向合并单元格 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>layer弹出层table变形的问题</title>
      <link href="/posts/19453.html"/>
      <url>/posts/19453.html</url>
      
        <content type="html"><![CDATA[<p>解决方案 1<br>前提：需要给每个表头设置合适的宽度<br>效果：弹出层宽度根据渲染出来的表格宽度自适应，高度固定（百分比/具体的数值都可以）</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.dataDetailLayer</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dataDetailLayer&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;dataDetailTable&quot;</span> <span class="attr">lay-filter</span>=<span class="string">&quot;dataDetailTable&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">table.<span class="title function_">on</span>(<span class="string">&#x27;tool(dataTable)&#x27;</span>, <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="comment">// 注：test 是 table 原始标签的属性 lay-filter=&quot;对应的值&quot;</span></span><br><span class="line">  <span class="keyword">let</span> data = obj.<span class="property">data</span> <span class="comment">//获得当前行数据</span></span><br><span class="line">  <span class="keyword">let</span> id = data.<span class="property">id</span></span><br><span class="line">  <span class="keyword">let</span> layEvent = obj.<span class="property">event</span></span><br><span class="line">  <span class="keyword">if</span> (layEvent === <span class="string">&#x27;view&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">//查看</span></span><br><span class="line">    <span class="title function_">initDataDetailTable</span>(data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initDataDetailTable</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> loadLayer = layer.<span class="title function_">msg</span>(<span class="string">&#x27;正在获取数据&#x27;</span>, &#123; <span class="attr">icon</span>: <span class="number">16</span>, <span class="attr">time</span>: <span class="number">0</span> &#125;)</span><br><span class="line">  <span class="keyword">let</span> id = data.<span class="property">id</span></span><br><span class="line">  <span class="keyword">let</span> cols</span><br><span class="line">  <span class="keyword">if</span> (data.<span class="property">xianbie</span>) &#123;</span><br><span class="line">    <span class="comment">// 当宽度超过当前窗口的宽度时，可以加上下面这行代码。让弹窗宽度自适应为80%</span></span><br><span class="line">    <span class="comment">// 但是注意：此时表头右固定会失效</span></span><br><span class="line">    <span class="comment">// $(&quot;.dataDetailLayer&quot;).width($(document.body).width() * 0.8)</span></span><br><span class="line">    cols = [</span><br><span class="line">      [</span><br><span class="line">        <span class="comment">//表头</span></span><br><span class="line">        &#123; <span class="attr">type</span>: <span class="string">&#x27;numbers&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;序号&#x27;</span>, <span class="attr">width</span>: <span class="number">80</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;yskm&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;预算科目&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">90</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;wlsx&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;物料属性&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">110</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;wlbm&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;物资编码&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">140</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;wlmc&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;物料名称&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">120</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;ggxh&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;规格型号&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">120</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;dw&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;计量单位&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">90</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;dj&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;预算单价&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">90</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;sl&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;数量&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">90</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;hj&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;合计&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">80</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;slOne&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;第一季度&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">90</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;slTwo&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;第二季度&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">90</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;slThree&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;第三季度&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">90</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;slFour&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;第四季度&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">90</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;lrPer&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;录入人&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">80</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cols = [</span><br><span class="line">      [</span><br><span class="line">        <span class="comment">//表头</span></span><br><span class="line">        &#123; <span class="attr">type</span>: <span class="string">&#x27;numbers&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;序号&#x27;</span>, <span class="attr">rowspan</span>: <span class="number">2</span>, <span class="attr">width</span>: <span class="number">80</span> &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">field</span>: <span class="string">&#x27;yskm&#x27;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;预算科目&#x27;</span>,</span><br><span class="line">          <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">          <span class="attr">rowspan</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">width</span>: <span class="number">90</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">field</span>: <span class="string">&#x27;wlsx&#x27;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;物料属性&#x27;</span>,</span><br><span class="line">          <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">          <span class="attr">rowspan</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">width</span>: <span class="number">110</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">field</span>: <span class="string">&#x27;wlbm&#x27;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;物资编码&#x27;</span>,</span><br><span class="line">          <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">          <span class="attr">rowspan</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">width</span>: <span class="number">140</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">field</span>: <span class="string">&#x27;wlmc&#x27;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;物料名称&#x27;</span>,</span><br><span class="line">          <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">          <span class="attr">rowspan</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">width</span>: <span class="number">120</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">field</span>: <span class="string">&#x27;ggxh&#x27;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;规格型号&#x27;</span>,</span><br><span class="line">          <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">          <span class="attr">rowspan</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">width</span>: <span class="number">120</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">field</span>: <span class="string">&#x27;dw&#x27;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;计量单位&#x27;</span>,</span><br><span class="line">          <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">          <span class="attr">rowspan</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">width</span>: <span class="number">90</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">field</span>: <span class="string">&#x27;dj&#x27;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;预算单价&#x27;</span>,</span><br><span class="line">          <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">          <span class="attr">rowspan</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">width</span>: <span class="number">90</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;sl&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;数量&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">rowspan</span>: <span class="number">2</span>, <span class="attr">width</span>: <span class="number">90</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;hj&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;合计&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">rowspan</span>: <span class="number">2</span>, <span class="attr">width</span>: <span class="number">80</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">title</span>: <span class="string">&#x27;合计需求量&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">colspan</span>: <span class="number">3</span> &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">field</span>: <span class="string">&#x27;lrPer&#x27;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;录入人&#x27;</span>,</span><br><span class="line">          <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">          <span class="attr">rowspan</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">width</span>: <span class="number">80</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        <span class="comment">//表头</span></span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;slYf&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;燕房&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">80</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;slJc&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;机场&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">80</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">field</span>: <span class="string">&#x27;sl19h&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;19号&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">80</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  table.<span class="title function_">render</span>(&#123;</span><br><span class="line">    <span class="attr">elem</span>: <span class="string">&#x27;#dataDetailTable&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="title class_">Hussar</span>.<span class="property">ctxPath</span> + <span class="string">&#x27;/tYwglYsXlfinfo/list&#x27;</span>,</span><br><span class="line">    <span class="attr">even</span>: <span class="literal">true</span>,</span><br><span class="line">    cols,</span><br><span class="line">    <span class="attr">where</span>: &#123;</span><br><span class="line">      id</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">done</span>(<span class="params"></span>) &#123;</span><br><span class="line">      layer.<span class="title function_">close</span>(loadLayer)</span><br><span class="line">      layer.<span class="title function_">open</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: data.<span class="property">jcmc</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">content</span>: $(<span class="string">&#x27;.dataDetailLayer&#x27;</span>),</span><br><span class="line">        <span class="attr">area</span>: [<span class="string">&#x27;auto&#x27;</span>, <span class="string">&#x27;80%&#x27;</span>],</span><br><span class="line">        <span class="attr">btn</span>: [<span class="string">&#x27;关闭&#x27;</span>],</span><br><span class="line">        <span class="title function_">yes</span>(<span class="params">index</span>) &#123;</span><br><span class="line">          layer.<span class="title function_">close</span>(index)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方案 2:表格的各个表头的宽度固定，根据表头的总高度以及弹窗的样式自己算出 layer 的宽度。<br>同时给个合适的高度。（弹窗的宽，高都是固定值）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">layer.<span class="title function_">open</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;区间：&#x27;</span> + util.<span class="title function_">formatMile</span>(requestData.<span class="property">startMile</span>) + <span class="string">&#x27; - &#x27;</span> + util.<span class="title function_">formatMile</span>(requestData.<span class="property">endMile</span>),</span><br><span class="line">        <span class="attr">type</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">content</span>: $(<span class="string">&quot;.chartLayer&quot;</span>),</span><br><span class="line">        <span class="attr">area</span>: [<span class="string">&#x27;628px&#x27;</span>, <span class="string">&#x27;410px&#x27;</span>],</span><br><span class="line">        <span class="title function_">success</span>(<span class="params">layero, index</span>) &#123;</span><br><span class="line">            table.<span class="title function_">render</span>(&#123;</span><br><span class="line">                <span class="attr">elem</span>: <span class="string">&#x27;#chartLayerTable&#x27;</span></span><br><span class="line">                , <span class="attr">height</span>: <span class="number">313</span></span><br><span class="line">                , <span class="attr">url</span>: <span class="title class_">Hussar</span>.<span class="property">ctxPath</span> + <span class="string">&#x27;/sjfxMhJcsj/&#x27;</span> + url <span class="comment">//数据接口</span></span><br><span class="line">                , <span class="attr">page</span>: <span class="literal">false</span> <span class="comment">//开启分页</span></span><br><span class="line">                , <span class="attr">cols</span>: [[ <span class="comment">//表头</span></span><br><span class="line">                    &#123;<span class="attr">title</span>: <span class="string">&#x27;序号&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;numbers&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>&#125;</span><br><span class="line">                    , &#123;</span><br><span class="line">                        <span class="attr">field</span>: <span class="string">&#x27;mile&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;里程&#x27;</span>, <span class="attr">width</span>: <span class="number">130</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="title function_">templet</span>(<span class="params">row</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> util.<span class="title function_">formatMile</span>(row.<span class="property">mile</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    , &#123;<span class="attr">field</span>: <span class="string">&#x27;lx&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;检测项&#x27;</span>, <span class="attr">width</span>: <span class="number">120</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>&#125;</span><br><span class="line">                    , &#123;<span class="attr">field</span>: <span class="string">&#x27;value&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;检测值&#x27;</span>, <span class="attr">width</span>: <span class="number">80</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>&#125;</span><br><span class="line">                    , &#123;<span class="attr">field</span>: <span class="string">&#x27;pp&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;评判&#x27;</span>, <span class="attr">width</span>: <span class="number">90</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>&#125;</span><br><span class="line">                    , &#123;<span class="attr">field</span>: <span class="string">&#x27;date&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;检测日期&#x27;</span>, <span class="attr">width</span>: <span class="number">120</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>&#125;</span><br><span class="line">                ]],</span><br><span class="line">                <span class="attr">where</span>: requestData,</span><br><span class="line">                <span class="title function_">done</span>(<span class="params">res</span>) &#123;</span><br><span class="line">                <span class="comment">// 这里可以利用假数据算出设置的弹窗高度最高可以容纳几个表格数据。当表格的数据量多于这个值的时候，重置弹窗的宽度，在原先的基础上加上17px</span></span><br><span class="line">                    <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">length</span> &gt; <span class="number">9</span>) &#123;</span><br><span class="line">                        layer.<span class="title function_">style</span>(index, &#123;</span><br><span class="line">                            <span class="attr">width</span>: <span class="string">&#x27;645px&#x27;</span>,</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> layui </tag>
            
            <tag> layer弹出层table变形的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>table点击行触发表格的checkbox选中</title>
      <link href="/posts/38275.html"/>
      <url>/posts/38275.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正常的渲染一个表格</span></span><br><span class="line">table.<span class="title function_">render</span>(&#123;</span><br><span class="line">  <span class="attr">elem</span>: <span class="string">&#x27;#LineStruTable&#x27;</span>,</span><br><span class="line">  <span class="attr">height</span>: $(<span class="string">&#x27;.tableArea&#x27;</span>).<span class="title function_">height</span>() - <span class="number">85</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="title class_">Hussar</span>.<span class="property">ctxPath</span> + <span class="string">&#x27;/lineStru/list&#x27;</span>,</span><br><span class="line">  <span class="attr">toolbar</span>: <span class="string">&#x27;#toolbarDemo&#x27;</span>,</span><br><span class="line">  <span class="attr">defaultToolbar</span>: [<span class="string">&#x27;filter&#x27;</span>, <span class="string">&#x27;exports&#x27;</span>],</span><br><span class="line">  <span class="attr">cols</span>: [</span><br><span class="line">    [</span><br><span class="line">      &#123; <span class="attr">checkbox</span>: <span class="literal">true</span>, <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">50</span> &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;序号&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;numbers&#x27;</span>,</span><br><span class="line">        <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">50</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">        <span class="attr">hide</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">field</span>: <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">        <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">sort</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;线路名称&#x27;</span>,</span><br><span class="line">        <span class="attr">field</span>: <span class="string">&#x27;lineName&#x27;</span>,</span><br><span class="line">        <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">sort</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;线路编号&#x27;</span>,</span><br><span class="line">        <span class="attr">field</span>: <span class="string">&#x27;linkCode&#x27;</span>,</span><br><span class="line">        <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">sort</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;起始里程&#x27;</span>,</span><br><span class="line">        <span class="attr">field</span>: <span class="string">&#x27;startMileStr&#x27;</span>,</span><br><span class="line">        <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">sort</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;结束里程&#x27;</span>,</span><br><span class="line">        <span class="attr">field</span>: <span class="string">&#x27;endMileStr&#x27;</span>,</span><br><span class="line">        <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">sort</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;线路类型&#x27;</span>,</span><br><span class="line">        <span class="attr">field</span>: <span class="string">&#x27;typeStr&#x27;</span>,</span><br><span class="line">        <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">sort</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">page</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;lineStruTable&#x27;</span>,</span><br><span class="line">  <span class="attr">even</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">where</span>: &#123;</span><br><span class="line">    <span class="attr">cityId</span>: $(<span class="string">&#x27;#city&#x27;</span>).<span class="title function_">val</span>(),</span><br><span class="line">    <span class="attr">linkCode</span>: $(<span class="string">&#x27;#line&#x27;</span>).<span class="title function_">val</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染完表格后加上下面这两段代码即可</span></span><br><span class="line"><span class="comment">// 点击layui表格行会选中复选框</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">on</span>(</span><br><span class="line">  <span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;.layui-table-body table.layui-table tbody tr&#x27;</span>,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> index = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;data-index&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> tableBox = $(<span class="variable language_">this</span>).<span class="title function_">parents</span>(<span class="string">&#x27;.layui-table-box&#x27;</span>)</span><br><span class="line">    <span class="comment">//存在固定列</span></span><br><span class="line">    <span class="keyword">if</span> (tableBox.<span class="title function_">find</span>(<span class="string">&#x27;.layui-table-fixed.layui-table-fixed-l&#x27;</span>).<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      tableDiv = tableBox.<span class="title function_">find</span>(<span class="string">&#x27;.layui-table-fixed.layui-table-fixed-l&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      tableDiv = tableBox.<span class="title function_">find</span>(<span class="string">&#x27;.layui-table-body.layui-table-main&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> checkCell = tableDiv</span><br><span class="line">      .<span class="title function_">find</span>(<span class="string">&#x27;tr[data-index=&#x27;</span> + index + <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">      .<span class="title function_">find</span>(<span class="string">&#x27;td div.laytable-cell-checkbox div.layui-form-checkbox I&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (checkCell.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      checkCell.<span class="title function_">click</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//对td的单击事件进行拦截停止，防止事件冒泡再次触发上述的单击事件（Table的单击行事件不会拦截，依然有效）</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">on</span>(</span><br><span class="line">  <span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;td div.laytable-cell-checkbox div.layui-form-checkbox&#x27;</span>,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">stopPropagation</span>()</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> layui </tag>
            
            <tag> table点击行触发表格的checkbox选中 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>某个dom全屏或者整体页面全屏</title>
      <link href="/posts/54254.html"/>
      <url>/posts/54254.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果dom没有就让整个页面全屏</span></span><br><span class="line"><span class="keyword">const</span> full = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#box&#x27;</span>) || <span class="variable language_">document</span>.<span class="property">documentElement</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (full.<span class="property">RequestFullScreen</span>) &#123;</span><br><span class="line">  full.<span class="title class_">RequestFullScreen</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//兼容Firefox</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (full.<span class="property">mozRequestFullScreen</span>) &#123;</span><br><span class="line">  full.<span class="title function_">mozRequestFullScreen</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//兼容Chrome, Safari and Opera等</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (full.<span class="property">webkitRequestFullScreen</span>) &#123;</span><br><span class="line">  full.<span class="title function_">webkitRequestFullScreen</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//兼容IE/Edge</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (full.<span class="property">msRequestFullscreen</span>) &#123;</span><br><span class="line">  full.<span class="title function_">msRequestFullscreen</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> studyEveryday </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> studyEveryday </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 某个dom全屏或者整体页面全屏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>table拼接日期输入框和下拉框</title>
      <link href="/posts/11106.html"/>
      <url>/posts/11106.html</url>
      
        <content type="html"><![CDATA[<p>代码如下</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">SbUseHistoryInfoTableEditRowObj</span> = <span class="literal">null</span> <span class="comment">// 预先定义一个下拉框的变量</span></span><br><span class="line"><span class="comment">// 使用履历</span></span><br><span class="line">table.<span class="title function_">render</span>(&#123;</span><br><span class="line">  <span class="attr">elem</span>: <span class="string">&#x27;#SbUseHistoryInfoTable&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: [],</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="attr">contentType</span>: <span class="string">&#x27;application/json;charset=UTF-8&#x27;</span>,</span><br><span class="line">  <span class="comment">//url : Hussar.ctxPath+&#x27;/sbinfoProject/getSbUseHistory&#x27;,</span></span><br><span class="line">  <span class="attr">cols</span>: [</span><br><span class="line">    [</span><br><span class="line">      &#123; <span class="attr">checkbox</span>: <span class="literal">true</span>, <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">50</span> &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;序号&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;numbers&#x27;</span>,</span><br><span class="line">        <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">50</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;项目&#x27;</span>,</span><br><span class="line">        <span class="attr">field</span>: <span class="string">&#x27;xm&#x27;</span>,</span><br><span class="line">        <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">edit</span>: <span class="string">&#x27;text&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;时间&#x27;</span>,</span><br><span class="line">        <span class="attr">field</span>: <span class="string">&#x27;sj&#x27;</span>,</span><br><span class="line">        <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">edit</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">        <span class="attr">event</span>: <span class="string">&#x27;inputDate&#x27;</span>,</span><br><span class="line">        <span class="attr">data_filed</span>: <span class="string">&#x27;date&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;状态&#x27;</span>,</span><br><span class="line">        <span class="attr">field</span>: <span class="string">&#x27;zt&#x27;</span>,</span><br><span class="line">        <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">event</span>: <span class="string">&#x27;ztDropDown&#x27;</span>,</span><br><span class="line">        <span class="attr">templet</span>: <span class="keyword">function</span> (<span class="params">d</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> html = <span class="string">&#x27;&#x27;</span></span><br><span class="line">          <span class="keyword">if</span> (d.<span class="property">zt</span> == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">            html =</span><br><span class="line">              <span class="string">&quot;&lt;option value=&#x27;0&#x27;&gt;使用中&lt;/option&gt; &lt;option value=&#x27;1&#x27; selected=&#x27;selected&#x27;&gt;以归还&lt;/option&gt;&quot;</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            html =</span><br><span class="line">              <span class="string">&quot;&lt;option value=&#x27;0&#x27; selected=&#x27;selected&#x27;&gt;使用中&lt;/option&gt; &lt;option value=&#x27;1&#x27;&gt;以归还&lt;/option&gt;&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&#x27;&lt;select lay-filter=&quot;zt&quot; name=&quot;zt&quot;  &gt;&#x27;</span> + html + <span class="string">&#x27;&lt;/select&gt;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">limit</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="comment">//id : &#x27;useHistoryReload&#x27;,</span></span><br><span class="line">  <span class="attr">even</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">where</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">done</span>: <span class="keyword">function</span> (<span class="params">res, curr, count</span>) &#123;</span><br><span class="line">    form.<span class="title function_">render</span>(<span class="string">&#x27;select&#x27;</span>)</span><br><span class="line">    $(<span class="string">&#x27;.layui-table-body, .layui-table-box, .layui-table-cell&#x27;</span>).<span class="title function_">css</span>(</span><br><span class="line">      <span class="string">&#x27;overflow&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;visible&#x27;</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">form.<span class="title function_">on</span>(<span class="string">&#x27;select(zt)&#x27;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="comment">// 这里的zt就是select的lay-filter的值</span></span><br><span class="line">  <span class="keyword">var</span> oldData = table.<span class="property">cache</span>[<span class="string">&#x27;SbUseHistoryInfoTable&#x27;</span>] <span class="comment">// 这里cache后面的值也是table标签里面的lay-filter的值或者为id值，可以将它们两个设置为一样</span></span><br><span class="line">  <span class="title class_">SbUseHistoryInfoTableEditRowObj</span>.<span class="title function_">update</span>(&#123;</span><br><span class="line">    <span class="attr">zt</span>: data.<span class="property">value</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  table.<span class="title function_">reload</span>(<span class="string">&#x27;SbUseHistoryInfoTable&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: oldData,</span><br><span class="line">    <span class="attr">done</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 回调，css，防止下拉框被盖住，直接粘贴即可</span></span><br><span class="line">      $(<span class="string">&#x27;.layui-table-body, .layui-table-box, .layui-table-cell&#x27;</span>).<span class="title function_">css</span>(</span><br><span class="line">        <span class="string">&#x27;overflow&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;visible&#x27;</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">table.<span class="title function_">on</span>(<span class="string">&#x27;tool(SbUseHistoryInfoTable)&#x27;</span>, <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> newdata = &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> (obj.<span class="property">event</span> === <span class="string">&#x27;inputDate&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 点击事件日期输入框时进入到此事件</span></span><br><span class="line">    <span class="keyword">var</span> field = $(<span class="variable language_">this</span>).<span class="title function_">data</span>(<span class="string">&#x27;field&#x27;</span>)</span><br><span class="line">    laydate.<span class="title function_">render</span>(&#123;</span><br><span class="line">      <span class="attr">elem</span>: <span class="variable language_">this</span>.<span class="property">firstChild</span>,</span><br><span class="line">      <span class="attr">show</span>: <span class="literal">true</span>, <span class="comment">//直接显示</span></span><br><span class="line">      <span class="attr">range</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">closeStop</span>: <span class="variable language_">this</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;datetime&#x27;</span>,</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>,</span><br><span class="line">      <span class="attr">done</span>: <span class="keyword">function</span> (<span class="params">value, date</span>) &#123;</span><br><span class="line">        newdata[field] = value</span><br><span class="line">        obj.<span class="title function_">update</span>(newdata)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (obj.<span class="property">event</span> === <span class="string">&#x27;ztDropDown&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 点击下拉框时先进入到此事件</span></span><br><span class="line">    <span class="title class_">SbUseHistoryInfoTableEditRowObj</span> = obj</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> layui </tag>
            
            <tag> table拼接日期输入框和下拉框 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>table单元格编辑使用键盘跳转</title>
      <link href="/posts/17520.html"/>
      <url>/posts/17520.html</url>
      
        <content type="html"><![CDATA[<p>可以单独把下面的代码写个 js，然后在需要的页面上引入该 js</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="string">&#x27;.layui-table-edit&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="comment">// debugger</span></span><br><span class="line">  <span class="keyword">var</span> td = $(<span class="variable language_">this</span>).<span class="title function_">parent</span>(<span class="string">&#x27;td&#x27;</span>),</span><br><span class="line">    tr = td.<span class="title function_">parent</span>(<span class="string">&#x27;tr&#x27;</span>),</span><br><span class="line">    trs = tr.<span class="title function_">parent</span>().<span class="title function_">parent</span>().<span class="title function_">find</span>(<span class="string">&#x27;tr&#x27;</span>),</span><br><span class="line">    tr_index = tr.<span class="title function_">index</span>(),</span><br><span class="line">    td_index = td.<span class="title function_">index</span>(),</span><br><span class="line">    td_last_index = tr.<span class="title function_">find</span>(<span class="string">&#x27;[data-edit=&quot;text&quot;]:last&#x27;</span>).<span class="title function_">index</span>(),</span><br><span class="line">    td_first_index = tr.<span class="title function_">find</span>(<span class="string">&#x27;[data-edit=&quot;text&quot;]:first&#x27;</span>).<span class="title function_">index</span>()</span><br><span class="line">  <span class="keyword">switch</span> (e.<span class="property">keyCode</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">39</span>:</span><br><span class="line">      td.<span class="title function_">nextAll</span>(<span class="string">&#x27;[data-edit=&quot;text&quot;]:first&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">      <span class="keyword">if</span> (td_index == td_last_index) &#123;</span><br><span class="line">        tr.<span class="title function_">next</span>().<span class="title function_">find</span>(<span class="string">&#x27;td&#x27;</span>).<span class="title function_">eq</span>(td_first_index).<span class="title function_">click</span>()</span><br><span class="line">        <span class="keyword">if</span> (tr_index == trs.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">          trs.<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">find</span>(<span class="string">&#x27;td&#x27;</span>).<span class="title function_">eq</span>(td_first_index).<span class="title function_">click</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="string">&#x27;.layui-table-edit&#x27;</span>).<span class="title function_">select</span>()</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">37</span>:</span><br><span class="line">      td.<span class="title function_">prevAll</span>(<span class="string">&#x27;[data-edit=&quot;text&quot;]:first&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="string">&#x27;.layui-table-edit&#x27;</span>).<span class="title function_">select</span>()</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">38</span>:</span><br><span class="line">      tr.<span class="title function_">prev</span>().<span class="title function_">find</span>(<span class="string">&#x27;td&#x27;</span>).<span class="title function_">eq</span>(td_index).<span class="title function_">click</span>()</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="string">&#x27;.layui-table-edit&#x27;</span>).<span class="title function_">select</span>()</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">40</span>:</span><br><span class="line">      tr.<span class="title function_">next</span>().<span class="title function_">find</span>(<span class="string">&#x27;td&#x27;</span>).<span class="title function_">eq</span>(td_index).<span class="title function_">click</span>()</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="string">&#x27;.layui-table-edit&#x27;</span>).<span class="title function_">select</span>()</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> layui </tag>
            
            <tag> table单元格编辑使用键盘跳转 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>table高度自适应</title>
      <link href="/posts/11603.html"/>
      <url>/posts/11603.html</url>
      
        <content type="html"><![CDATA[<p>只需要给表格加上一下 css 即可，加上之后，使用 templet 可以自定义格式化 html 来填充每个 td 的高度</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*右下方的表格的内容高度自适应*/</span></span><br><span class="line"><span class="selector-class">.layui-table-cell</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：加上之后，可能标题和内容的宽度对应不起来，只需要手动给每个 col（表头对象）一个固定的宽度即可解决该问题</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> layui </tag>
            
            <tag> table高度自适应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>父子页面通信</title>
      <link href="/posts/14449.html"/>
      <url>/posts/14449.html</url>
      
        <content type="html"><![CDATA[<ul><li>子页面获取父页面元素的值<br>在 layui.use().里面写即可<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cityId = parent.<span class="property">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;cityId&#x27;</span>).<span class="property">value</span></span><br><span class="line"><span class="keyword">let</span> id = parent.<span class="property">layui</span>.$(<span class="string">&#x27;#id&#x27;</span>).<span class="title function_">val</span>()</span><br></pre></td></tr></table></figure></li><li>子页面调用父页面的方法<br>在 layui.use 之前写一个 json 对象赋给 window 对象<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Cdl</span> = &#123;</span><br><span class="line">  <span class="attr">seItem</span>: <span class="literal">null</span>,   <span class="comment">// 选中的条目</span></span><br><span class="line">  <span class="attr">layIndex</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">scrollHeight</span>: <span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line">layui.<span class="title function_">user</span>(&#123;</span><br><span class="line"><span class="title class_">Cdl</span>.<span class="property">initTreeView</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>子页面<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">parent</span>.<span class="property">Cdl</span>.<span class="title function_">initTreeView</span>()</span><br></pre></td></tr></table></figure></li><li>layui 让父页面的某个按钮点击<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">parent.<span class="property">layui</span>.$(<span class="string">&#x27;#search&#x27;</span>).<span class="title function_">click</span>()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> layui </tag>
            
            <tag> 父子页面通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在子弹窗写方法关闭当前子弹窗</title>
      <link href="/posts/58763.html"/>
      <url>/posts/58763.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> index = parent.<span class="property">layer</span>.<span class="title function_">getFrameIndex</span>(<span class="variable language_">window</span>.<span class="property">name</span>)</span><br><span class="line">parent.<span class="property">layer</span>.<span class="title function_">close</span>(index)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> layui </tag>
            
            <tag> 在子弹窗写方法关闭当前子弹窗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>table懒加载</title>
      <link href="/posts/14808.html"/>
      <url>/posts/14808.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> page = <span class="number">1</span>, limit = <span class="number">30</span>, pageNum = <span class="number">0</span>,count = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> dataList = [];</span><br><span class="line"><span class="title class_">DataAnalysis</span>.<span class="property">initData</span> = <span class="keyword">function</span> (<span class="params">page, limit</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> ajax = <span class="keyword">new</span> $ax( <span class="title class_">Hussar</span>.<span class="property">ctxPath</span>+<span class="string">&#x27;/swj/swjdetail&#x27;</span>,</span><br><span class="line">        <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">            count = res.<span class="property">count</span>;</span><br><span class="line">            <span class="keyword">let</span> recordList = res.<span class="property">data</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; recordList.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                dataList.<span class="title function_">push</span>(recordList[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            pageNum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(count/limit)+<span class="number">1</span>;</span><br><span class="line">        &#125;, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">            <span class="title class_">Hussar</span>.<span class="title function_">error</span>(<span class="string">&quot;加载失败&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    ajax.<span class="title function_">set</span>(<span class="string">&quot;xlmc&quot;</span>,xlmc);</span><br><span class="line">    ajax.<span class="title function_">set</span>(<span class="string">&quot;id&quot;</span>,id);</span><br><span class="line">    ajax.<span class="title function_">set</span>(<span class="string">&quot;page&quot;</span>, page);</span><br><span class="line">    ajax.<span class="title function_">set</span>(<span class="string">&quot;limit&quot;</span>, limit);</span><br><span class="line">    ajax.<span class="title function_">start</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">DataAnalysis</span>.<span class="property">initTablea</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">table.<span class="title function_">render</span>(&#123;</span><br><span class="line">    <span class="attr">elem</span>: <span class="string">&#x27;#swjtable&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>:$(<span class="string">&quot;body&gt;div:first-child&quot;</span>).<span class="title function_">height</span>(),</span><br><span class="line">        [</span><br><span class="line">            &#123;<span class="attr">title</span>: <span class="string">&#x27;序号&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;numbers&#x27;</span>, <span class="attr">align</span>: <span class="string">&quot;center&quot;</span>, <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="number">50</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">title</span>: <span class="string">&#x27;检测时间&#x27;</span>, <span class="attr">field</span>: <span class="string">&#x27;jcsj&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">halign</span>: <span class="string">&#x27;center&#x27;</span>,<span class="attr">width</span>: <span class="number">120</span>&#125;,</span><br><span class="line">        ]],</span><br><span class="line">    <span class="attr">page</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;testReload&#x27;</span>,</span><br><span class="line">    <span class="attr">even</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">limit</span>:count,</span><br><span class="line">    <span class="attr">data</span>:dataList,</span><br><span class="line">    <span class="attr">where</span>: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">done</span>: <span class="keyword">function</span> (<span class="params">res, curr, count</span>) &#123;</span><br><span class="line">        <span class="comment">// 监听滚动条</span></span><br><span class="line">        $(<span class="string">&quot;.layui-table-main&quot;</span>).<span class="title function_">scroll</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// console.log(&#x27;监听到了&#x27;)</span></span><br><span class="line">            <span class="keyword">if</span> (($(<span class="string">&#x27;.layui-table-main&#x27;</span>)[<span class="number">0</span>].<span class="property">scrollHeight</span> - $(<span class="variable language_">this</span>).<span class="title function_">scrollTop</span>() - $(<span class="string">&#x27;.layui-table-main&#x27;</span>)[<span class="number">0</span>].<span class="property">clientHeight</span>) == <span class="number">0</span> &amp;&amp; pageNum &gt; page) &#123;</span><br><span class="line">                <span class="title class_">DataAnalysis</span>.<span class="property">scrollHeight</span>=$(<span class="variable language_">this</span>).<span class="title function_">scrollTop</span>();</span><br><span class="line">                page = page + <span class="number">1</span>;</span><br><span class="line">                <span class="title class_">DataAnalysis</span>.<span class="title function_">initData</span>(page, limit);</span><br><span class="line">                table.<span class="title function_">reload</span>(<span class="string">&#x27;testReload&#x27;</span>, &#123;</span><br><span class="line">                    <span class="attr">data</span>: dataList</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 手动设置滚动条的位置</span></span><br><span class="line">        <span class="keyword">if</span> (page != <span class="number">1</span>) &#123;</span><br><span class="line">            $(<span class="string">&quot;.layui-table-main&quot;</span>).<span class="title function_">scrollTop</span>(<span class="title class_">DataAnalysis</span>.<span class="property">scrollHeight</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">DataAnalysis</span>.<span class="title function_">initData</span>(page,limit)</span><br><span class="line"><span class="title class_">DataAnalysis</span>.<span class="title function_">initTablea</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> layui </tag>
            
            <tag> table懒加载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise</title>
      <link href="/posts/30119.html"/>
      <url>/posts/30119.html</url>
      
        <content type="html"><![CDATA[<h1 id="promise-封装-ajax，并且-promise-的链式调用的示例"><a href="#promise-封装-ajax，并且-promise-的链式调用的示例" class="headerlink" title="promise 封装 ajax，并且 promise 的链式调用的示例"></a>promise 封装 ajax，并且 promise 的链式调用的示例</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> request = <span class="keyword">function</span> (<span class="params">url, type = <span class="string">&#x27;get&#x27;</span>, data = <span class="string">&#x27;&#x27;</span>, msg = <span class="string">&#x27;请求失败&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 封装jq ajax</span></span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">      type,</span><br><span class="line">      url,</span><br><span class="line">      <span class="attr">async</span>: <span class="literal">true</span>,</span><br><span class="line">      data,</span><br><span class="line">      <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="comment">//成功的回调函数</span></span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">500</span>) &#123;</span><br><span class="line">          <span class="title class_">Hussar</span>.<span class="title function_">info</span>(msg)</span><br><span class="line">          <span class="title function_">reject</span>()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">resolve</span>(res.<span class="property">data</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">error</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">reject</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">request</span>(<span class="string">&#x27;/mainLine/getAllLineList&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    homePage.<span class="property">lineList</span> = res</span><br><span class="line">    homePage.<span class="property">lineTableList</span> = res</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(<span class="string">&#x27;/car/getAllCarList&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    homePage.<span class="property">carList</span> = res</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(<span class="string">&#x27;/carOverrun/getAllCarOverRunData&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    homePage.<span class="property">tableData</span> = res</span><br><span class="line">    homePage.<span class="title function_">initSelect</span>()</span><br><span class="line">    homePage.<span class="title function_">createStationMap</span>($(<span class="string">&#x27;#line&#x27;</span>).<span class="title function_">val</span>(), $(<span class="string">&#x27;#car&#x27;</span>).<span class="title function_">val</span>())</span><br><span class="line">    homePage.<span class="title function_">initTable</span>()</span><br><span class="line">    homePage.<span class="title function_">initButton</span>()</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> es6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> es6 </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间日期控件点击完日期后，自动弹出时间选择框</title>
      <link href="/posts/25254.html"/>
      <url>/posts/25254.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;layui-master/dist/css/layui.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#f1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">500px</span> auto;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-form&quot;</span> <span class="attr">id</span>=<span class="string">&quot;f1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;i1&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;layui-master/dist/layui.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      layui.<span class="title function_">use</span>([<span class="string">&#x27;laydate&#x27;</span>, <span class="string">&#x27;layer&#x27;</span>], <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> $ = layui.<span class="property">$</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> laydate = layui.<span class="property">laydate</span></span></span><br><span class="line"><span class="language-javascript">        laydate.<span class="title function_">render</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">elem</span>: <span class="string">&#x27;#i1&#x27;</span>, <span class="comment">//指定元素</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">type</span>: <span class="string">&#x27;datetime&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">min</span>: <span class="string">&#x27;2021-1-15&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">max</span>: <span class="string">&#x27;2021-2-18&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">/*重点代码*/</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">ready</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;.layui-laydate-content table tbody tr&#x27;</span>).<span class="title function_">on</span>(</span></span><br><span class="line"><span class="language-javascript">              <span class="string">&#x27;click&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">              <span class="string">&#x27;td&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (</span></span><br><span class="line"><span class="language-javascript">                  $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;class&#x27;</span>) == <span class="string">&#x27;&#x27;</span> ||</span></span><br><span class="line"><span class="language-javascript">                  $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;class&#x27;</span>) == <span class="literal">null</span> ||</span></span><br><span class="line"><span class="language-javascript">                  $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;class&#x27;</span>) == <span class="string">&#x27;layui-this&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                ) &#123;</span></span><br><span class="line"><span class="language-javascript">                  $(</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;.layui-laydate-footer [lay-type=&#x27;datetime&#x27;].laydate-btns-time&quot;</span></span></span><br><span class="line"><span class="language-javascript">                  ).<span class="title function_">click</span>()</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">            )</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> layui </tag>
            
            <tag> 时间日期控件点击完日期后，自动弹出时间选择框 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue组件公共模板</title>
      <link href="/posts/48436.html"/>
      <url>/posts/48436.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;index&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> vue </category>
          
          <category> base </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> vue </tag>
            
            <tag> base </tag>
            
            <tag> vue组件公共模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fileinput插件获取不到手动拖拽的文件对象的问题</title>
      <link href="/posts/39443.html"/>
      <url>/posts/39443.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> frame;</span><br><span class="line">$(<span class="string">&quot;#add_file&quot;</span>).<span class="title function_">fileinput</span>(&#123;</span><br><span class="line">  <span class="attr">language</span>: <span class="string">&#x27;zh&#x27;</span>,                 <span class="comment">//中文</span></span><br><span class="line">  <span class="attr">uploadUrl</span>: <span class="string">&#x27;/&#x27;</span> + url + <span class="string">&#x27;/uploadFile&#x27;</span>,</span><br><span class="line">  <span class="attr">showUpload</span>: <span class="literal">false</span>,               <span class="comment">//是否显示上传按钮</span></span><br><span class="line">  <span class="attr">showCaption</span>: <span class="literal">false</span>,             <span class="comment">//不显示文字表述</span></span><br><span class="line">  <span class="attr">uploadAsync</span>: <span class="literal">true</span>,               <span class="comment">//采用同步上传</span></span><br><span class="line">  <span class="attr">removeFromPreviewOnError</span>: <span class="literal">true</span>,  <span class="comment">//当文件不符合规则，就不显示预览</span></span><br><span class="line">  <span class="attr">dropZoneEnabled</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">dropZoneTitle</span>: <span class="string">&#x27;拖拽文件到这里 …&lt;br&gt;只支持单文件上传&#x27;</span>,</span><br><span class="line">  <span class="attr">maxFileCount</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">maxFileSize</span>: <span class="number">0</span>,          <span class="comment">//单位为kb，如果为0表示不限制文件大小</span></span><br><span class="line">  <span class="attr">uploadExtraData</span>: <span class="keyword">function</span> (<span class="params">previewId, index</span>) &#123;</span><br><span class="line">    <span class="comment">//这是一个回调函数，会在上传时调用，读取配置的额外参数。</span></span><br><span class="line">    <span class="comment">//拷贝代码，参数先不删</span></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">      <span class="attr">xb2</span>: $(<span class="string">&quot;#xb2&quot;</span>).<span class="title function_">val</span>(),</span><br><span class="line">      <span class="attr">yewuId</span>: $(<span class="string">&quot;#yewuId&quot;</span>).<span class="title function_">val</span>(),</span><br><span class="line">      <span class="attr">algType</span>: $(<span class="string">&quot;#algType&quot;</span>).<span class="title function_">find</span>(<span class="string">&quot;option:selected&quot;</span>).<span class="title function_">text</span>(),</span><br><span class="line">      <span class="attr">fileType</span>: $(<span class="string">&quot;#fileType&quot;</span>).<span class="title function_">find</span>(<span class="string">&quot;option:selected&quot;</span>).<span class="title function_">text</span>(),</span><br><span class="line">      <span class="attr">col1</span>: $(<span class="string">&quot;#col1&quot;</span>).<span class="title function_">val</span>(),</span><br><span class="line">      <span class="attr">col2</span>: $(<span class="string">&quot;#col2&quot;</span>).<span class="title function_">val</span>(),</span><br><span class="line">      <span class="attr">col3</span>: $(<span class="string">&quot;#col3&quot;</span>).<span class="title function_">val</span>(),</span><br><span class="line">      <span class="attr">col4</span>: $(<span class="string">&quot;#col4&quot;</span>).<span class="title function_">val</span>(),</span><br><span class="line">      <span class="attr">magor</span>: $(<span class="string">&quot;#magor&quot;</span>).<span class="title function_">html</span>(),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">on</span>(<span class="string">&quot;filebatchselected&quot;</span>, <span class="keyword">function</span>(<span class="params">event, files</span>) &#123;<span class="comment">// 监听文件选择</span></span><br><span class="line">  <span class="comment">// document.getElementById(&#x27;add_file&#x27;)</span></span><br><span class="line">  <span class="comment">// $(&#x27;#add_file&#x27;).append(files[0])</span></span><br><span class="line">  frame = files[<span class="number">0</span>] <span class="comment">// 此时拖拽文件后，监听事件，frame就等于第一个文件对象</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">frame = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;add_file&#x27;</span>).<span class="property">files</span>[<span class="number">0</span>];<span class="comment">// 这能获得手动选择文件后的第一个文件对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 前台传递</span></span><br><span class="line">formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();        <span class="comment">//每一次需重新创建</span></span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, blob);</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;fileName&#x27;</span>, file.<span class="property">name</span>);</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;part&#x27;</span>, part);</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;guid&#x27;</span>, uid);</span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="comment">//上传文件数据</span></span><br><span class="line">  <span class="attr">url</span>: <span class="title class_">Hussar</span>.<span class="property">ctxPath</span> + <span class="string">&quot;/testTasks/doUploadDatas&quot;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">cache</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">data</span>: formData,</span><br><span class="line">  <span class="attr">processData</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">contentType</span>: <span class="literal">false</span>，</span><br><span class="line">  <span class="title function_">success</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">  <span class="title function_">error</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 后台接收</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/doUploadDatas&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span>  Map&lt;String,Object&gt; <span class="title function_">doSaveImportDatas</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file, String fileName, Integer part,String guid)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">  Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> fpPath+ File.separator+<span class="string">&quot;source&quot;</span>+File.separator+guid+File.separator;</span><br><span class="line"></span><br><span class="line">    <span class="type">File</span> <span class="variable">mkdir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">    <span class="keyword">if</span> (!mkdir.exists()) &#123;</span><br><span class="line">      mkdir.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(path+<span class="string">&quot;\\&quot;</span>+fileName+<span class="string">&quot;-&quot;</span>+part));</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileId</span> <span class="operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;code&quot;</span>,<span class="number">200</span>);</span><br><span class="line">    map.put(<span class="string">&quot;path&quot;</span>,path);</span><br><span class="line">    map.put(<span class="string">&quot;fileId&quot;</span>,fileId);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    map.put(<span class="string">&quot;error&quot;</span>,e.getMessage());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> bootstrap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> bootstrap </tag>
            
            <tag> fileinput插件获取不到手动拖拽的文件对象的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制文件流转文件并触发下载</title>
      <link href="/posts/60522.html"/>
      <url>/posts/60522.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * word/doc</span></span><br><span class="line"><span class="comment"> * data就是后台返回的二进制流</span></span><br><span class="line"><span class="comment"> * fileName就是你想要把这个流转为二进制的名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">downloadDoc</span>(<span class="params">data, fileName</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([data], &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;application/vnd.openxmlformats-officedocument.wordprocessingml.document&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">let</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  link.<span class="property">href</span> = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob)</span><br><span class="line">  link.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">  link.<span class="title function_">setAttribute</span>(<span class="string">&#x27;download&#x27;</span>, fileName + <span class="string">&#x27;.doc&#x27;</span>)</span><br><span class="line">  link.<span class="title function_">click</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * excel/xlsx</span></span><br><span class="line"><span class="comment"> * data就是后台返回的二进制流</span></span><br><span class="line"><span class="comment"> * fileName就是你想要把这个流转为二进制的名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">downloadXlsx</span>(<span class="params">data, fileName</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(<span class="keyword">new</span> <span class="title class_">Blob</span>([data]))</span><br><span class="line">  <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  link.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">  link.<span class="property">href</span> = url</span><br><span class="line">  link.<span class="title function_">setAttribute</span>(<span class="string">&#x27;download&#x27;</span>, fileName + <span class="string">&#x27;.xlsx&#x27;</span>)</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(link)</span><br><span class="line">  link.<span class="title function_">click</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> vue </category>
          
          <category> base </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> vue </tag>
            
            <tag> base </tag>
            
            <tag> 二进制文件流转文件并触发下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>局部导入css</title>
      <link href="/posts/48248.html"/>
      <url>/posts/48248.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;index&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">@import &#x27;~@/assets/css/single_block.css&#x27;;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> vue </category>
          
          <category> base </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> vue </tag>
            
            <tag> base </tag>
            
            <tag> 局部导入css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于堆叠属性stack的问题</title>
      <link href="/posts/43700.html"/>
      <url>/posts/43700.html</url>
      
        <content type="html"><![CDATA[<ol><li>多系列的柱状图 stack 如果是数字且越小，该系列的每根柱子越靠前；</li><li>但是如果 stack 为 0，那么该系列的每根柱子都会被放到最后；</li><li>这是一个需要注意的问题！！！！！！！！！</li></ol>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> Echarts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Echarts </tag>
            
            <tag> 关于堆叠属性stack的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markLine或markArea在使用滚动条放大之后消失的问题</title>
      <link href="/posts/37931.html"/>
      <url>/posts/37931.html</url>
      
        <content type="html"><![CDATA[<ul><li>问题：水平的 markLine 或者 markArea 当使用 dataZoom 放大的时候。只要 markLine/markArea 不完全在当前缩放的范围内（有部分在）那么它们就会整体消失</li><li><p>解决方式：官方没有给出真正的解决方式。临时解决方式如下</p><p>监听滚动条的滚动，获得使用滚动条缩放 echarts 缩放后的范围（x 轴的最小值和最大值）。根据后台请求的 markLineData/markAreaData 重新计算边界。如果某个 markLine/markArea 的左侧边界小于缩放后的 x 轴左侧边界，那么就将它的左侧边界放大到 x 轴的左侧边界。右侧同理。替换掉原先的标记 series。</p><p><strong>注意：重新 setOption()时，可以合并原先的 option（noMerge:false)。因为只是重绘 markLine/markArea,没必要销毁原先的所有组件，并重新创建新的组件。同时如果有内置滚动条的情况下，必须指定(silent:true)（不抛出事件）,否则使用内置滚动条放大 echarts 后，每次左右平移只能移动一点点，因为只要移动就会进入到滚动条监听事件里，而监听事件里又有 setOption()会打断平移操作</strong></p><p>示例代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">charts.<span class="title function_">off</span>(<span class="string">&#x27;dataZoom&#x27;</span>)</span><br><span class="line">charts.<span class="title function_">on</span>(<span class="string">&#x27;dataZoom&#x27;</span>, <span class="keyword">function</span> (<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> opt = charts.<span class="title function_">getOption</span>()</span><br><span class="line">  <span class="keyword">let</span> startValuex = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(opt.<span class="property">dataZoom</span>[<span class="number">0</span>].<span class="property">startValue</span>) <span class="comment">// x轴左侧向上取整</span></span><br><span class="line">  <span class="keyword">let</span> endValuex = <span class="title class_">Math</span>.<span class="title function_">floor</span>(opt.<span class="property">dataZoom</span>[<span class="number">0</span>].<span class="property">endValue</span>) <span class="comment">// x轴右侧向下取整</span></span><br><span class="line">  <span class="keyword">let</span> markLineData = [] <span class="comment">// 新的markLine数组</span></span><br><span class="line">  echartsData.<span class="property">lineStruData</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// echartsData.lineStuData是后台传回来的标线数据[[&#123;name:&#x27;&#x27;,xAxis:100&#125;,&#123;xAxis:200&#125;].]</span></span><br><span class="line">    <span class="keyword">let</span> startCoordMile = e[<span class="number">0</span>].<span class="property">xAxis</span></span><br><span class="line">    <span class="keyword">let</span> endCoordMie = e[<span class="number">1</span>].<span class="property">xAxis</span></span><br><span class="line">    <span class="keyword">if</span> (e[<span class="number">0</span>].<span class="property">xAxis</span> &lt; startValuex &amp;&amp; e[<span class="number">1</span>].<span class="property">xAxis</span> &gt; startValuex) &#123;</span><br><span class="line">      startCoordMile = startValuex</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (e[<span class="number">0</span>].<span class="property">xAxis</span> &lt; endValuex &amp;&amp; e[<span class="number">1</span>].<span class="property">xAxis</span> &gt; endValuex) &#123;</span><br><span class="line">      endCoordMie = endValuex</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    markLineData.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">xAxis</span>: startCoordMile</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    markLineData.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">xAxis</span>: endCoordMie</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    markLineData.<span class="title function_">push</span>([</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">xAxis</span>: startCoordMile,</span><br><span class="line">        <span class="attr">yAxis</span>: yMax,</span><br><span class="line">        <span class="attr">symbol</span>: <span class="string">&#x27;arrow&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: e[<span class="number">0</span>].<span class="property">name</span>,</span><br><span class="line">        <span class="attr">label</span>: &#123;</span><br><span class="line">          <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">position</span>: <span class="string">&#x27;middle&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">xAxis</span>: endCoordMie,</span><br><span class="line">        <span class="attr">yAxis</span>: yMax,</span><br><span class="line">        <span class="attr">symbol</span>: <span class="string">&#x27;arrow&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ])</span><br><span class="line">  &#125;)</span><br><span class="line">  opt.<span class="property">series</span>[opt.<span class="property">series</span>.<span class="property">length</span> - <span class="number">1</span>].<span class="property">markLine</span>.<span class="property">data</span> = markLineData</span><br><span class="line">  charts.<span class="title function_">setOption</span>(opt, &#123;</span><br><span class="line">    <span class="comment">// noMerge默认值为false，不用显示的写出</span></span><br><span class="line">    <span class="attr">silent</span>: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> Echarts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Echarts </tag>
            
            <tag> markLine或markArea在使用滚动条放大之后消失的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监听窗口的尺寸变化，动态刷新echarts图</title>
      <link href="/posts/9557.html"/>
      <url>/posts/9557.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> chart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;id&#x27;</span>))</span><br><span class="line">  chart.<span class="title function_">resize</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> Echarts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Echarts </tag>
            
            <tag> 监听窗口的尺寸变化，动态刷新echarts图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rabbitmq-server管理</title>
      <link href="/posts/58254.html"/>
      <url>/posts/58254.html</url>
      
        <content type="html"><![CDATA[<p>前提：通信端口默认是 5672 端口，如果远程连接，别忘记先在防火墙上开启该端口</p><p>查看运行状态</p><h1 id="service-rabbitmq-server-status"><a href="#service-rabbitmq-server-status" class="headerlink" title="service rabbitmq-server status"></a>service rabbitmq-server status</h1><p>启动</p><p><code>service rabbitmq-server stop</code></p><p>停止</p><p><code>service rabbitmq-server start</code></p><p>重启 rabbitmq 服务</p><p><code>service rabbitmq-server restart</code></p><p>查看 log 文件</p><p><code>cd /var/log/rabbitmq/</code></p><p><code>vim ***.log</code></p><p>查看已有插件列表</p><p><code>rabbitmq-plugins list</code></p><p>安装插件<br>(这里以安装 web 管理客户端为例子，该客户端的端口是 15672.别忘记在防火墙开启端口)<br><code>rabbitmq-plugins enable rabbitmq_management</code></p><p>编写配置文件（这里以开放外部访问为例子）<br><code>cd /etc/rabbitmq/</code><br><code>vim rabbitmq.config</code></p><p>向 rabbitmq.config 文件中写入如下内容：<br>[{rabbit, [{loopback_users, []}]}].</p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> rabbitmq-server管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给layui的下拉框赋值，同时触发layui的下拉框选择事件</title>
      <link href="/posts/46931.html"/>
      <url>/posts/46931.html</url>
      
        <content type="html"><![CDATA[<p>前提：该选择框需要放在 layui-form 的表单下</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#citySerch&quot;</span>).<span class="title function_">val</span>(cityId);<span class="comment">// 给下拉框赋值</span></span><br><span class="line"><span class="title class_">Let</span> filter=$(<span class="string">&#x27;#citySerch&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;lay-filter&#x27;</span>);<span class="comment">//获取该元素的lay-filter属性</span></span><br><span class="line">filter&amp;&amp;layui.<span class="title function_">event</span>(<span class="string">&#x27;form&#x27;</span>,<span class="string">&#x27;select(&#x27;</span>+filter+<span class="string">&#x27;)&#x27;</span>,&#123;<span class="attr">elem</span>:$(<span class="string">&quot;#citySerch&quot;</span>),<span class="attr">value</span>:cityId&#125;);<span class="comment">//触发该标签的select事件</span></span><br><span class="line">form.<span class="title function_">render</span>(<span class="string">&#x27;select&#x27;</span>);<span class="comment">// 重新渲染下拉框</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> JavaScript </category>
          
          <category> layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> JavaScript </tag>
            
            <tag> layui </tag>
            
            <tag> 给layui的下拉框赋值，同时触发layui的下拉框选择事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue自定义上传功能</title>
      <link href="/posts/13753.html"/>
      <url>/posts/13753.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">importData</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;/engineeringCar/importData&#x27;</span>, params, &#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;multipart/form-data&#x27;</span> &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-button @click=&quot;importData&quot;&gt;导入&lt;/el-button&gt;</span><br><span class="line">    &lt;input</span><br><span class="line">      v-show=&quot;false&quot;</span><br><span class="line">      name=&quot;file&quot;</span><br><span class="line">      ref=&quot;selectFile&quot;</span><br><span class="line">      type=&quot;file&quot;</span><br><span class="line">      @change=&quot;changeFile&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; importData &#125; from &#x27;./request&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;index&#x27;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changeFile(e) &#123;</span><br><span class="line">      let file = e.target.files[0]</span><br><span class="line"></span><br><span class="line">      // 判断文件类型</span><br><span class="line">      let fileType = file.name.substring(file.name.lastIndexOf(&#x27;.&#x27;) + 1)</span><br><span class="line">      if (fileType !== &#x27;xlsx&#x27;) &#123;</span><br><span class="line">        layer.warning(this, &#x27;仅支持上传xlsx文件&#x27;)</span><br><span class="line">        this.$refs.selectFile.value = &#x27;&#x27; // 清空已选择的文件</span><br><span class="line">        return</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 拼接form数据</span><br><span class="line">      let param = new FormData() //创建form对象</span><br><span class="line">      param.append(&#x27;file&#x27;, file) //通过append向form对象添加数据</span><br><span class="line"></span><br><span class="line">      importData(param).then((res) =&gt; &#123;</span><br><span class="line">        if (res.code === 200) &#123;</span><br><span class="line">          layer.success(this, &#x27;导入成功&#x27;)</span><br><span class="line">          this.list()</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          layer.failure(this, res.message)</span><br><span class="line">        &#125;</span><br><span class="line">        this.$refs.selectFile.value = &#x27;&#x27;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    importData() &#123;</span><br><span class="line">      this.$refs.selectFile.dispatchEvent(new MouseEvent(&#x27;click&#x27;))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/importData&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DtoResult <span class="title function_">importData</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> engineeringCarService.importData(file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> vue </category>
          
          <category> base </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> vue </tag>
            
            <tag> base </tag>
            
            <tag> vue自定义上传功能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>传输文件显示permission denied</title>
      <link href="/posts/28736.html"/>
      <url>/posts/28736.html</url>
      
        <content type="html"><![CDATA[<p>scp 默认不允许使用 root 账号传输文件.如果想用 root 账号传输文件，在两端服务器</p><p>0、使用第二步切换为 root 账号</p><p>1、修改 sshd 配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>2、找到 PermitRootLogin，把前面的#去掉，并且改为 yes</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PermitRootLogin <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><p>3、重启 sshd 服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service ssh start</span><br></pre></td></tr></table></figure><p>4、使用 root 账户远程登陆服务器并传输文件即可。注意 root 密码是在第二步自己设置的</p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> 传输文件显示permission denied </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>切换为root账号</title>
      <link href="/posts/3339.html"/>
      <url>/posts/3339.html</url>
      
        <content type="html"><![CDATA[<ul><li>Ubuntu 的默认 root 密码是随机的，即每次开机都有一个新的 root 密码。可以在终端输入命令 sudo passwd，然后输入当前用户的密码，回车.</li><li>终端会提示输入新的密码并确认，此时的密码就是 root 新密码。修改成功后，输入命令 su root，再输入新的密码就成功切换到 root 帐号了</li></ul>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> 切换为root账号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国大陆镜像源</title>
      <link href="/posts/28789.html"/>
      <url>/posts/28789.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://mirrors.aliyun.com/ubuntu</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> 中国大陆镜像源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装nginx</title>
      <link href="/posts/31907.html"/>
      <url>/posts/31907.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换至root用户</span></span><br><span class="line">sudo su root</span><br><span class="line">apt-get install nginx</span><br></pre></td></tr></table></figure><p>查看 nginx 是否安装成功</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -v</span><br></pre></td></tr></table></figure><p>启动 nginx</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service nginx start #方式1</span><br><span class="line">/usr/sbin/nginx #方式2</span><br></pre></td></tr></table></figure><p>结束 nginx</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service nginx stop #方式1</span><br><span class="line">/usr/sbin/nginx -s stop #方式2</span><br></pre></td></tr></table></figure><p>重启 nginx</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service nginx reload #方式1</span><br><span class="line">/usr/sbin/nginx -s reload #方式2</span><br></pre></td></tr></table></figure><p><strong>注意：nginx 方式 1 和方式 2 不能互相调用</strong></p><p>nginx 文件安装完成之后的文件位置：</p><ul><li>/usr/sbin/nginx：主程序</li><li>/etc/nginx：存放配置文件</li><li>/usr/share/nginx：存放静态文件</li><li>/var/log/nginx：存放日志</li></ul>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> 安装nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>没有firewall-cmd命令</title>
      <link href="/posts/40422.html"/>
      <url>/posts/40422.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install firewalld</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> 没有firewall-cmd命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上传组件设置token</title>
      <link href="/posts/14250.html"/>
      <url>/posts/14250.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;el-upload</span><br><span class="line">  <span class="keyword">class</span>=<span class="string">&quot;uploadBtn&quot;</span></span><br><span class="line">  accept=<span class="string">&quot;xlsx&quot;</span></span><br><span class="line">  action=<span class="string">&quot;http://127.0.0.1:82/lineDic/sstjq/importData&quot;</span></span><br><span class="line">  :on-success=<span class="string">&quot;importData&quot;</span></span><br><span class="line">  :show-file-list=<span class="string">&quot;false&quot;</span></span><br><span class="line">  :limit=<span class="string">&quot;1&quot;</span></span><br><span class="line">  :headers=<span class="string">&quot;headers&quot;</span></span><br><span class="line">  :file-list=<span class="string">&quot;fileList&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>导入<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line">&lt;/el-upload&gt;</span><br><span class="line"></span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123; <span class="keyword">return</span>&#123; <span class="attr">headers</span>: &#123; <span class="title class_">Authorization</span>: <span class="literal">null</span> &#125;, &#125; &#125; <span class="attr">methods</span>: &#123; <span class="title function_">setToken</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> tokenName = <span class="variable language_">window</span>.<span class="property">tokenName</span> || <span class="variable language_">window</span>.<span class="property">top</span>.<span class="property">tokenName</span> <span class="keyword">let</span> token =</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(tokenName) <span class="variable language_">this</span>.<span class="property">headers</span>.<span class="property">Authorization</span> = token &#125;, &#125;</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123; <span class="variable language_">this</span>.<span class="title function_">setToken</span>(); &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> vue </category>
          
          <category> element-ui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> vue </tag>
            
            <tag> element-ui </tag>
            
            <tag> 上传组件设置token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置静态ip</title>
      <link href="/posts/47994.html"/>
      <url>/posts/47994.html</url>
      
        <content type="html"><![CDATA[<h2 id="ubuntu-server18"><a href="#ubuntu-server18" class="headerlink" title="ubuntu_server18"></a>ubuntu_server18</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/netplan/50-cloud-init.yaml</span><br></pre></td></tr></table></figure><p>配置如下,注意格式 冒号后边有个空格</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">ens33:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">addresses:</span> [<span class="number">192.168</span><span class="number">.37</span><span class="number">.188</span><span class="string">/24</span>]</span><br><span class="line">      <span class="attr">gateway4:</span> <span class="number">192.168</span><span class="number">.37</span><span class="number">.2</span></span><br><span class="line">      <span class="attr">nameservers:</span></span><br><span class="line">        <span class="attr">addresses:</span> [<span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span>, <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>]</span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>编辑好 最后保存配置文件，执行命令重启网络服务生效</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo netplan applys</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> 设置静态ip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下文档类型转PDF乱码解决方式</title>
      <link href="/posts/29596.html"/>
      <url>/posts/29596.html</url>
      
        <content type="html"><![CDATA[<p>在 Linux 系统下进行文本类型转 PDF 时出现乱码。<br><img src="https://s2.loli.net/2023/03/08/HpV2Lmv5bAFQgPD.png" alt="20210708223956.png"></p><p>解决方案：</p><ol><li><p>安装 fontconfig</p><p>安装命令：</p><p>yum –y install fontconfig</p></li><li><p>在/usr/share/fonts 目录下新建一个目录 chinese</p><p>操作命令：</p><p>cd /usr/share/fonts</p><p>mkdir chinese</p><p>cd chinese</p></li><li><p>修改文件夹权限</p><p>操作命令：</p><p>chmod -R 755 /usr/share/fonts/chinese/</p></li><li><p>将本地字体上传至服务器</p><p>操作步骤：</p><ol><li>将 C:\Windows\Fonts 目录下的字体拷贝到一个新建文件夹（因为文件夹权限无法直接上传，所以需要创建一个新建文件夹）</li><li>将需要的字体上传到服务器的/usr/share/fonts/chinese 目录下</li></ol></li><li><p>安装 ttmkfdir</p><p>安装命令：</p><p>yum -y install ttmkfdir</p><p>ttmkfdir -e /usr/share/X11/fonts/encodings/encodings.dir</p></li><li><p>修改 fonts.conf 配置文件</p><p>操作命令：</p><p>vi /etc/fonts/fonts.conf</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Font directory list --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dir</span>&gt;</span>/usr/share/fonts<span class="tag">&lt;/<span class="name">dir</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dir</span>&gt;</span>/usr/share/X11/fonts/Type1<span class="tag">&lt;/<span class="name">dir</span>&gt;</span> <span class="tag">&lt;<span class="name">dir</span>&gt;</span>/usr/share/X11/fonts/TTF<span class="tag">&lt;/<span class="name">dir</span>&gt;</span> <span class="tag">&lt;<span class="name">dir</span>&gt;</span>/usr/local/share/fonts<span class="tag">&lt;/<span class="name">dir</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dir</span> <span class="attr">prefix</span>=<span class="string">&quot;xdg&quot;</span>&gt;</span>fonts<span class="tag">&lt;/<span class="name">dir</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dir</span>&gt;</span>/usr/share/fonts/chinese<span class="tag">&lt;/<span class="name">dir</span>&gt;</span> #这里是你要添加的路径</span><br><span class="line"><span class="comment">&lt;!-- the following element will be removed in the future --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dir</span>&gt;</span>~/.fonts<span class="tag">&lt;/<span class="name">dir</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>刷新 Liunx 字体缓存</p><p>操作命令：</p><p>mkfontdir</p><p>mkfontscale</p><p>fc-cache –fv</p><p>fc-list :lang=ZH</p></li><li><p>重启服务器(完成配置)（注意：第 7 步完成之后如果生效了。那么就不用之行第 8 步了）</p></li></ol><p><a href="https://blog.csdn.net/weixin_45606229/article/details/111060060">原文链接</a></p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> Linux下文档类型转PDF乱码解决方式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置openOffice</title>
      <link href="/posts/62612.html"/>
      <url>/posts/62612.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>下载 tar.gz 包。下载地址：<a href="http://www.openoffice.org/zh-cn/">http://www.openoffice.org/zh-cn/</a> (需要下载 rpm 格式的)</p></li><li><p>通过 xftp 上传到 linux 中。我的目录在/opt/openoffice 中</p></li><li>解压文件：tar -zxvf Apache_OpenOffice_4.1.6_Linux_x86-64_install-rpm_zh-CN.tar.gz，解压后进入 zh-CN 目录中。</li><li>cd RPMS/ 里面都是 rpm 文件，我们需要安装这些文件</li><li>安装 rpm 文件： rpm -ivh *.rpm</li><li>进入 desktop-integration/目录：cd desktop-integration/</li><li>安装 openoffice:rpm -ivh openoffice4.1.6-redhat-menus-4.1.6-9790.noarch.rpm</li><li>安装成功后会在/opt 下出现一个 openoffice4 文件。</li><li><p>启动服务</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/opt/openoffice4/program/soffice -headless -accept=&quot;socket,host=127.0.0.1,port=8100;urp;&quot; -nofirststartwizard</span><br></pre></td></tr></table></figure></li><li><p>查看启动状态</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef|grep openofficenetstat -lnp |grep 8100</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> 配置openOffice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>@Async和@EnableAsync注解</title>
      <link href="/posts/28711.html"/>
      <url>/posts/28711.html</url>
      
        <content type="html"><![CDATA[<h2 id="1）-含义："><a href="#1）-含义：" class="headerlink" title="1） 含义："></a>1） 含义：</h2><p>1，在方法上使用该@Async 注解，申明该方法是一个异步任务；</p><p>2，在类上面使用该@Async 注解，申明该类中的所有方法都是异步任务；</p><p>3，使用此注解的方法的类对象，必须是 spring 管理下的 bean 对象；</p><p>4，要想使用异步任务，需要在主类上开启异步配置，即，配置上@EnableAsync 注解；</p><h2 id="2）-使用："><a href="#2）-使用：" class="headerlink" title="2）  使用："></a>2）  使用：</h2><p>在 Spring 中启用@Async：</p><p>1，@Async 注解在使用时，如果不指定线程池的名称，则使用 Spring 默认的线程池，Spring 默认的线程池为<strong>SimpleAsyncTaskExecutor</strong>。</p><p>2，方法上一旦标记了这个@Async 注解，当其它线程调用这个方法时，就会开启一个新的子线程去异步处理该业务逻辑。</p><h2 id="3）-代码示例—默认线程池："><a href="#3）-代码示例—默认线程池：" class="headerlink" title="3）  代码示例—默认线程池："></a>3）  代码示例—默认线程池：</h2><h3 id="3-1，启动类中增加-EnableAsync"><a href="#3-1，启动类中增加-EnableAsync" class="headerlink" title="3.1，启动类中增加@EnableAsync"></a>3.1，启动类中增加@EnableAsync</h3><p>以 Spring boot 为例，启动类中增加@EnableAsync：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span><span class="meta">@SpringBootApplicationpublic</span> <span class="keyword">class</span> <span class="title class_">ManageApplication</span> &#123;    <span class="comment">//...&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-2，方法上加-Async-注解："><a href="#3-2，方法上加-Async-注解：" class="headerlink" title="3.2，方法上加@Async 注解："></a>3.2，方法上加@Async 注解：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Componentpublic</span> <span class="keyword">class</span> <span class="title class_">MyAsyncTask</span> &#123;     <span class="meta">@Async</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">asyncCpsItemImportTask</span><span class="params">(Long platformId, String jsonList)</span>&#123;        <span class="comment">//...具体业务逻辑    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-3，默认线程池的缺陷："><a href="#3-3，默认线程池的缺陷：" class="headerlink" title="3.3，默认线程池的缺陷："></a>3.3，默认线程池的缺陷：</h3><p>上面的配置会启用默认的线程池/执行器，异步执行指定的方法。</p><p>Spring 默认的线程池的默认配置：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">默认核心线程数：8，        最大线程数：Integet.MAX<span class="emphasis">_VALUE，    队列使用LinkedBlockingQueue，    容量是：Integet.MAX_</span>VALUE，    空闲线程保留时间：60s，    线程池拒绝策略：AbortPolicy。</span><br></pre></td></tr></table></figure><p>从最大线程数的配置上，相信你也看到问题了：<strong>并发情况下，会无限创建线程。。。</strong></p><h3 id="3-4，默认线程池—自定义配置参数："><a href="#3-4，默认线程池—自定义配置参数：" class="headerlink" title="3.4，默认线程池—自定义配置参数："></a>3.4，默认线程池—自定义配置参数：</h3><p>默认线程池的上述缺陷如何解决：</p><p>答案是，自定义配置参数就可以了。</p><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">spring:  task:    execution:      pool:        max-size: <span class="number">6</span>        core-size: <span class="number">3</span>        keep-alive: <span class="number">3</span>s        queue-capacity: <span class="number">1000</span>        thread-<span class="keyword">name</span>-prefix: <span class="keyword">name</span></span><br></pre></td></tr></table></figure><h2 id="4）-代码示例—自定义线程池："><a href="#4）-代码示例—自定义线程池：" class="headerlink" title="4） 代码示例—自定义线程池："></a>4） 代码示例—<a href="https://so.csdn.net/so/search?q=%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E6%B1%A0&amp;spm=1001.2101.3001.7020">自定义线程池</a>：</h2><p>在业务场景中，有时需要使用自己定义的执行器来跑异步的业务逻辑，那该怎么办呢？</p><p>答案是，自定义线程池。</p><h3 id="4-1，还是启动类中先增加-EnableAsync"><a href="#4-1，还是启动类中先增加-EnableAsync" class="headerlink" title="4.1，还是启动类中先增加@EnableAsync"></a>4.1，还是启动类中先增加@EnableAsync</h3><p>以 Spring boot 为例，启动类中增加@EnableAsync：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span><span class="meta">@SpringBootApplicationpublic</span> <span class="keyword">class</span> <span class="title class_">ManageApplication</span> &#123;    <span class="comment">//...&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-2，编写配置类"><a href="#4-2，编写配置类" class="headerlink" title="4.2，编写配置类"></a>4.2，编写配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span><span class="meta">@Datapublic</span> <span class="keyword">class</span> <span class="title class_">ExecutorConfig</span>&#123;    <span class="comment">/**     * 核心线程     */</span>    <span class="keyword">private</span> <span class="type">int</span> corePoolSize;    <span class="comment">/**     * 最大线程     */</span>    <span class="keyword">private</span> <span class="type">int</span> maxPoolSize;    <span class="comment">/**     * 队列容量     */</span>    <span class="keyword">private</span> <span class="type">int</span> queueCapacity;    <span class="comment">/**     * 保持时间     */</span>    <span class="keyword">private</span> <span class="type">int</span> keepAliveSeconds;    <span class="comment">/**     * 名称前缀     */</span>    <span class="keyword">private</span> String preFix;     <span class="meta">@Bean(&quot;MyExecutor&quot;)</span>    <span class="keyword">public</span> Executor <span class="title function_">myExecutor</span><span class="params">()</span> &#123;        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();        executor.setCorePoolSize(corePoolSize);        executor.setMaxPoolSize(maxPoolSize);        executor.setQueueCapacity(queueCapacity);        executor.setKeepAliveSeconds(keepAliveSeconds);        executor.setThreadNamePrefix(preFix);        executor.setRejectedExecutionHandler( <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy());        executor.initialize();        <span class="keyword">return</span> executor;    &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3，方法上加-Async-注解："><a href="#4-3，方法上加-Async-注解：" class="headerlink" title="4.3，方法上加@Async 注解："></a>4.3，方法上加@Async 注解：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Componentpublic</span> <span class="keyword">class</span> <span class="title class_">MyAsyncTask</span> &#123;     <span class="meta">@Async(&quot;MyExecutor&quot;)</span> <span class="comment">//使用自定义的线程池(执行器)    public void asyncCpsItemImportTask(Long platformId, String jsonList)&#123;        //...具体业务逻辑    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="5）异步任务的事务问题："><a href="#5）异步任务的事务问题：" class="headerlink" title="5）异步任务的事务问题："></a>5）异步任务的事务问题：</h2><p>@Async 注解由于是异步执行的，在其进行数据库的操作之时，将无法控制事务管理。</p><p>解决办法：可以把@<a href="https://so.csdn.net/so/search?q=Transactional&amp;spm=1001.2101.3001.7020">Transactional</a>注解放到内部的需要进行事务的方法上。</p><h2 id="6）异步任务的返回结果："><a href="#6）异步任务的返回结果：" class="headerlink" title="6）异步任务的返回结果："></a>6）异步任务的返回结果：</h2><p>异步的业务逻辑处理场景 有两种：一个是不需要返回结果，另一种是需要接收返回结果。</p><p>不需要返回结果的比较简单，就不多说了。</p><p>需要接收返回结果的示例如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Async(&quot;MyExecutor&quot;)</span><span class="keyword">public</span> Future&lt;Map&lt;Long, List&gt;&gt; <span class="title function_">queryMap</span><span class="params">(List ids)</span> &#123;    List&lt;&gt; result = businessService.queryMap(ids);    ..............    Map&lt;Long, List&gt; resultMap = Maps.newHashMap();    ...    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AsyncResult</span>&lt;&gt;(resultMap);&#125;</span><br></pre></td></tr></table></figure><p>调用异步方法的示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;Long, List&gt; <span class="title function_">asyncProcess</span><span class="params">(List&lt;BindDeviceDO&gt; bindDevices,List&lt;BindStaffDO&gt; bindStaffs, String dccId)</span> &#123;        Map&lt;Long, List&gt; finalMap =<span class="literal">null</span>;        <span class="comment">// 返回值：        Future&lt;Map&lt;Long, List&gt;&gt; asyncResult = MyService.queryMap(ids);        try &#123;            finalMap = asyncResult.get();        &#125; catch (Exception e) &#123;            ...        &#125;        return finalMap;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="7）关于-Spring-中的线程池-执行器"><a href="#7）关于-Spring-中的线程池-执行器" class="headerlink" title="7）关于 Spring 中的线程池(执行器)"></a>7）关于 Spring 中的线程池(执行器)</h2><p>Spring 用 TaskExecutor 和 TaskScheduler 接口提供了异步执行和调度任务的抽象。</p><p>Spring 的 TaskExecutor 和 java.util.concurrent.Executor 接口时一样的，这个接口只有一个方法 execute(Runnable task)。</p><p>Spring 已经内置了许多 TaskExecutor 的实现，没有必要自己去实现：</p><ul><li><strong>SimpleAsyncTaskExecutor</strong>：  这种实现不会重用任何线程，<strong>每次调用都会创建一个新的线程</strong>。</li><li><strong>SyncTaskExecutor</strong>：  这种实现不会异步的执行，相反，每次调用都在发起调用的线程中执行。它的主要用处是在不需要多线程的时候，比如简单的测试用例；</li><li><strong>ConcurrentTaskExecutor</strong>：这个实现是对 Java 5 java.util.concurrent.Executor 类的包装。有另一个 ThreadPoolTaskExecutor 类更为好用，它暴露了 Executor 的配置参数作为 bean 属性。</li><li><strong>SimpleThreadPoolTaskExecutor</strong>：  这个实现实际上是 Quartz 的 SimpleThreadPool 类的子类，它会监听 Spring 的生命周期回调。当你有线程池，需要在 Quartz 和非 Quartz 组件中共用时，这是它的典型用处。</li><li><strong>ThreadPoolTaskExecutor：   这是最常用、最通用的一种实现</strong>。它包含了 java.util.concurrent.ThreadPoolExecutor 的属性，并且用 TaskExecutor 进行包装。</li></ul><h2 id="8）无法调用同类中的-Async-的方法"><a href="#8）无法调用同类中的-Async-的方法" class="headerlink" title="8）无法调用同类中的@Async 的方法"></a>8）<strong>无法调用同类中的@Async 的方法</strong></h2><h3 id="Async-的原理概括："><a href="#Async-的原理概括：" class="headerlink" title="@Async 的原理概括："></a>@Async 的原理概括：</h3><p>@Async  的原理是通过 Spring AOP 动态代理   的方式来实现的。</p><p>Spring 容器启动初始化 bean 时，判断类中是否使用了@<a href="https://so.csdn.net/so/search?q=Async&amp;spm=1001.2101.3001.7020" title="Async">Async</a>注解，如果使用了则为其创建切入点和切入点处理器，根据切入点创建代理，</p><p>在线程调用@Async 注解标注的方法时，会调用代理，执行切入点处理器 invoke 方法，将方法的执行提交给线程池中的另外一个线程来处理，从而实现了异步执行。</p><p>所以，需要注意的一个错误用法是，如果 a 方法调用它同类中的标注@Async 的 b 方法，是不会异步执行的，因为从 a 方法进入调用的都是该类对象本身，不会进入代理类。</p><p><strong>因此，相同类中的方法调用带@Async 的方法是无法异步的，这种情况仍然是同步。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
          <category> 异步 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 异步 </tag>
            
            <tag> @Async和@EnableAsync注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步demo</title>
      <link href="/posts/49484.html"/>
      <url>/posts/49484.html</url>
      
        <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>在日常开发中，有很多时候都会使用异步的方式去请求方法，以提高代码的执行效率。比如用户购买某件商品，然后需要插入购买记录，物品-1，微信公众号消息推送之类，流程会很多，也会需要很多时间，而 SpringBoot 为异步提供了更加简单的使用方式，通过两个注解即可实现异步调用方法。</p><h2 id="1、使用方式"><a href="#1、使用方式" class="headerlink" title="1、使用方式"></a>1、使用方式</h2><p>SpringBoot 为我们提供了很多使用便利，我们只需要一个@Enablexxx 注解 + 功能注解，便能轻松简单的实现功能，比如异步调用和定时任务。</p><h4 id="1-1-简单使用异步调用（无返回调用）"><a href="#1-1-简单使用异步调用（无返回调用）" class="headerlink" title="1.1 简单使用异步调用（无返回调用）"></a>1.1 简单使用异步调用（无返回调用）</h4><p>假定使用场景：用户购买完一件商品，需要短信通知 + 微信消息推送（不考虑失败场景），不需要返回值。</p><blockquote><p>注意：下面代码是为了展现一个之前一直困惑我的问题，所以代码有些问题，解决办法看下面：</p></blockquote><p><strong>Service 层，模拟功能实现：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncMsgService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(AsyncMsgService.class);</span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendSms</span><span class="params">()</span>&#123;</span><br><span class="line">        ThreadUtil.sleep(<span class="number">3000L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;发送短信~~~~~~~~~~~~~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pushWechatMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        ThreadUtil.sleep(<span class="number">3000L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;推送微信消息~~~~~~~~~~~~~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        sendSms();</span><br><span class="line">        pushWechatMsg();</span><br><span class="line">        <span class="comment">// 耗时时间</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">totalTime</span> <span class="operator">=</span> (<span class="type">float</span>)(System.currentTimeMillis() - start) / <span class="number">1000</span>;</span><br><span class="line">        logger.info(<span class="string">&quot;total time: &quot;</span> + totalTime + <span class="string">&quot; seconds&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>然后写一个调用的 Controller：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/v1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AsyncMsgService msgService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/sendMsg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        msgService.sendMsg();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong></p><blockquote><p>发送短信<del>~</del><del>~</del><del>~</del><br>推送微信消息<del>~</del><del>~</del><del>~</del><br>total time: 6.001 seconds</p></blockquote><p>可以看出我们所期待的异步执行并没有发生，两个任务仍然在同步执行。我相信肯定不只是我碰到这个问题，我也是看了上面推荐的那篇博客才发现自己的问题所在：</p><blockquote><p>在使用 spring 的异步<a href="https://so.csdn.net/so/search?q=%E5%A4%9A%E7%BA%BF%E7%A8%8B&amp;spm=1001.2101.3001.7020">多线程</a>时经常回碰到多线程失效的问题，解决方式为：<br>异步方法和调用方法一定要写在不同的类中 ,如果写在一个类中,是没有效果的！</p></blockquote><p>原因：</p><blockquote><p>Spring 对@Transactional 注解时也有类似问题，Spring 对扫描时具有@Transactional 注解方法的类时，是生成一个代理类，由代理类去开启关闭事务，而在同一个类中，方法调用是在类体内执行的，Spring 对无法截获这个方法调用。</p></blockquote><p>因此上面代码的解决方式就是将两个异步方法和调用的<code>sendMsg()</code>方法分开，便能实现异步调用。</p><h4 id="1-2-有返回值的异步调用"><a href="#1-2-有返回值的异步调用" class="headerlink" title="1.2 有返回值的异步调用"></a>1.2 有返回值的异步调用</h4><p>很多时候我们使用异步调用是需要方法的返回值，而不是进行简单的调用，如果我们还是按照上面的方式来调用，我们大概率会得到一个 null 的返回值，因为主线程并未等待异步任务的完成就 return 了结果。</p><h5 id="1-2-1-配置线程池"><a href="#1-2-1-配置线程池" class="headerlink" title="1.2.1 配置线程池"></a>1.2.1 配置线程池</h5><blockquote><p>这一步不是必须的，一个@EnableAsync 便能让 SpringBoot 为我们自动配置，我们也可以通过自定义的方式来让它和我们的实际使用更加契合。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span>  <span class="comment">// 启用异步任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncConfiguration</span> &#123;</span><br><span class="line">    <span class="comment">// 声明一个线程池(并指定线程池的名字)</span></span><br><span class="line">    <span class="meta">@Bean(&quot;taskExecutor&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">asyncExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        <span class="comment">//核心线程数5：线程池创建时候初始化的线程数</span></span><br><span class="line">        executor.setCorePoolSize(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//最大线程数5：线程池最大的线程数，只有在缓冲队列满了之后才会申请超过核心线程数的线程</span></span><br><span class="line">        executor.setMaxPoolSize(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//缓冲队列500：用来缓冲执行任务的队列</span></span><br><span class="line">        executor.setQueueCapacity(<span class="number">500</span>);</span><br><span class="line">        <span class="comment">//允许线程的空闲时间60秒：当超过了核心线程出之外的线程在空闲时间到达之后会被销毁</span></span><br><span class="line">        executor.setKeepAliveSeconds(<span class="number">60</span>);</span><br><span class="line">        <span class="comment">//线程池名的前缀：设置好了之后可以方便我们定位处理任务所在的线程池</span></span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;DailyAsync-&quot;</span>);</span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Service 层，模拟功能实现：</strong></p><blockquote><p>有返回的异步方法，其返回值最好封装为 CompletableFuture 类型，使用 Java8 提供的 Future 的扩展功能</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AsyncMsgService msgService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(AsyncService.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步执行查询用户的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Async(&quot;taskExecutor&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CompletableFuture&lt;String&gt; <span class="title function_">findUser</span><span class="params">()</span>&#123;</span><br><span class="line">        ThreadUtil.sleep(<span class="number">3000L</span>);</span><br><span class="line">        <span class="keyword">return</span> CompletableFuture.completedFuture(<span class="string">&quot;执行异步任务···&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>写一个测试方法：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(AsyncTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AsyncService asyncService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">asyncUser</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException, TimeoutException &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 异步任务</span></span><br><span class="line">        System.out.println(<span class="string">&quot;异步任务开启~~~~~~~~~~~~~~~~~~&quot;</span>);</span><br><span class="line">        CompletableFuture&lt;String&gt; user1 = asyncService.findUser();</span><br><span class="line">        CompletableFuture&lt;String&gt; user2 = asyncService.findUser();</span><br><span class="line">        CompletableFuture&lt;String&gt; user3 = asyncService.findUser();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//join() 的作用：让“主线程”等待“子线程”结束之后才能继续运行</span></span><br><span class="line">        CompletableFuture.allOf(user1,user2,user3).join();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 耗时时间</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">totalTime</span> <span class="operator">=</span> (<span class="type">float</span>)(System.currentTimeMillis() - start) / <span class="number">1000</span>;</span><br><span class="line">        logger.info(<span class="string">&quot;total time: &quot;</span> + totalTime + <span class="string">&quot; seconds&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;--&gt; &quot;</span> + user1.get());</span><br><span class="line">        logger.info(<span class="string">&quot;--&gt; &quot;</span> + user2.get());</span><br><span class="line">        logger.info(<span class="string">&quot;--&gt; &quot;</span> + user3.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>返回结果：</strong></p><blockquote><p>异步任务开启<del>~</del>~<br>total time: 3.016 seconds<br>–&gt; 执行异步任务···<br>–&gt; 执行异步任务···<br>–&gt; 执行异步任务···</p></blockquote><p>从消耗时间可以看出异步方法生效，但是需要注意，调用方法和异步方法不能处于同一类中，否则会造成异步任务失效。</p><h2 id="2、CompletableFuture-实现异步方法"><a href="#2、CompletableFuture-实现异步方法" class="headerlink" title="2、CompletableFuture 实现异步方法"></a>2、CompletableFuture 实现异步方法</h2><p>如果你不想或者不愿局限于 SpringBoot 的注解式调用异步，你可以使用 CompletableFuture 快速、简单的实现异步调用方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无返回值的异步方法CompletableFuture.runAsync()</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title function_">testMethod</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">ThreadUtil.sleep(<span class="number">3000L</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;异步无返回&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有返回值的异步方法CompletableFuture.supplyAsync()</span></span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;String&gt; <span class="title function_">testMethod2</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">ThreadUtil.sleep(<span class="number">3000L</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;异步有返回&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试方法：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">asyncTest</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">asyncMsgService.testMethod().get(<span class="number">4000L</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException | TimeoutException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 耗时时间</span></span><br><span class="line"><span class="type">float</span> <span class="variable">totalTime</span> <span class="operator">=</span> (<span class="type">float</span>)(System.currentTimeMillis() - start) / <span class="number">1000</span>;</span><br><span class="line">logger.info(<span class="string">&quot;total time: &quot;</span> + totalTime + <span class="string">&quot; seconds&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">asyncTest2</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">CompletableFuture&lt;String&gt; future = asyncMsgService.testMethod2();</span><br><span class="line"><span class="comment">// 计算结果完成时的回调方法</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">future.whenComplete((k, v) -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;返回k=&quot;</span> + k);</span><br><span class="line">System.out.println(<span class="string">&quot;异常v=&quot;</span> + v);</span><br><span class="line">&#125;).exceptionally(e -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;捕获异常=&quot;</span> + e.getMessage());</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;okk&quot;</span>;</span><br><span class="line">&#125;).get(<span class="number">4000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException | TimeoutException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 耗时时间</span></span><br><span class="line"><span class="type">float</span> <span class="variable">totalTime</span> <span class="operator">=</span> (<span class="type">float</span>)(System.currentTimeMillis() - start) / <span class="number">1000</span>;</span><br><span class="line">logger.info(<span class="string">&quot;total time: &quot;</span> + totalTime + <span class="string">&quot; seconds&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用以上方法，也能实现对方法的异步调用。</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> SpringBoot </category>
          
          <category> 异步 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 异步 </tag>
            
            <tag> 异步demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决centos8下python命令失效的问题</title>
      <link href="/posts/14182.html"/>
      <url>/posts/14182.html</url>
      
        <content type="html"><![CDATA[<p>执行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /usr/bin/python3.6 /usr/bin/python</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/have_a_cat/article/details/118191281">参考地址</a></p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> 解决centos8下python命令失效的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建shell脚本并且运行</title>
      <link href="/posts/22256.html"/>
      <url>/posts/22256.html</url>
      
        <content type="html"><![CDATA[<p>创建 shell 脚本并且运行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim hello.sh</span><br></pre></td></tr></table></figure><p>提权</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod u+x hello.sh</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash hello.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> general </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> general </tag>
            
            <tag> linux </tag>
            
            <tag> 创建shell脚本并且运行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后台运行命令</title>
      <link href="/posts/60780.html"/>
      <url>/posts/60780.html</url>
      
        <content type="html"><![CDATA[<p>如果使用 nohup 命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名为 nohup.out 的文件中，除非另外指定 了输出文件：</p><p>输出被重定向到 myout.file 文件中。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup command &gt; myout.file 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>不输出日志文件。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup command &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> general </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> general </tag>
            
            <tag> linux </tag>
            
            <tag> 后台运行命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看命令所在源文件的位置</title>
      <link href="/posts/50313.html"/>
      <url>/posts/50313.html</url>
      
        <content type="html"><![CDATA[<p>直接使用下面这条命令跟随符号链接来以获取实际的可执行文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">readlink -f `which java`</span><br></pre></td></tr></table></figure><p><code>readlink</code> 命令会跟随一个符号链接。我在 <code>which java</code> 的外侧使用 <code>readlink</code> 将会使用 <code>which java</code> 的输出来替换要检查的符号链接，这被称之为命令替换。因此，在这个实例中，上面的命令大体上相当于 <code>readlink -f /usr/bin/java</code> 。</p><p>在我的示例中，可执行文件的位置是 <code>/usr/lib/jvm/java-11-openjdk-amd64/bin/java</code> 。</p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> general </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> general </tag>
            
            <tag> linux </tag>
            
            <tag> 查看命令所在源文件的位置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看日志最后几行</title>
      <link href="/posts/9243.html"/>
      <url>/posts/9243.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -n 50 wx.log</span><br></pre></td></tr></table></figure><p>示例：查看/var/log/boot.log，只显示最后一行。则执行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -n 1  /var/log/boot.log</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -n 1000 #显示最后1000行</span><br><span class="line">tail -n +1000 #从1000行开始显示，显示1000行以后的</span><br><span class="line">head -n 1000 #显示前面1000行</span><br></pre></td></tr></table></figure><p>实时监听文件末尾多行的变化，打印到控制台。ctrl+c 退出</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -f file #默认显示10行</span><br><span class="line">tail -500f file #调整为500行</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/keta/p/9627227.html">原文链接</a></p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> general </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> general </tag>
            
            <tag> linux </tag>
            
            <tag> 查看日志最后几行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看后台运行的java -jar项目的端口号，并杀死该进程</title>
      <link href="/posts/58898.html"/>
      <url>/posts/58898.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsof -i:8088Kill -9 pid</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> general </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> general </tag>
            
            <tag> linux </tag>
            
            <tag> 查看后台运行的java -jar项目的端口号，并杀死该进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看cpu核心数</title>
      <link href="/posts/1698.html"/>
      <url>/posts/1698.html</url>
      
        <content type="html"><![CDATA[<p>查看物理 cpu 数目</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/cpuinfo | grep &quot;physical id&quot; | sort | uniq | wc -l</span><br></pre></td></tr></table></figure><p>查看每个物理 cpu 里的核数</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/cpuinfo| grep &quot;cpu cores&quot;| uniq</span><br></pre></td></tr></table></figure><p>查看 cpu 逻辑核心数（cpu 数量*每个 cpu 的核数）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/cpuinfo| grep &quot;processor&quot;| wc -l</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_38880380/article/details/79638252">原文链接</a></p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> general </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> general </tag>
            
            <tag> linux </tag>
            
            <tag> 查看cpu核心数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根据端口号查询占用pid</title>
      <link href="/posts/50070.html"/>
      <url>/posts/50070.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -nap|grep 8080</span><br><span class="line">tcp6       0      0 :::8081                 :::*                    LISTEN      16996/java</span><br><span class="line">kill -9 16996</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsof -i:8080</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> general </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> general </tag>
            
            <tag> linux </tag>
            
            <tag> 根据端口号查询占用pid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用windowd的cmd向linux服务器上传文件</title>
      <link href="/posts/31381.html"/>
      <url>/posts/31381.html</url>
      
        <content type="html"><![CDATA[<p>示例代码</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -P 221 D:\hussar-web-2.2.0.war root@123.123.122.138:/opt/tomcat8/webapps/</span><br></pre></td></tr></table></figure><p>城轨项目的使用的上传 war 包用：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -P 221 D:\Work\workProject\dtjc\target\hussar-web-2.2.0.war root@123.123.122.138:/opt/tomcat8/webapps/</span><br></pre></td></tr></table></figure><p>说明：<br>其中 221 是端口，123.123.122.138 是 ip，root 是登陆用户，D:\hussar-web-2.2.0.war 是文件路径,/opt/tomcat8/webapps/是服务器存储上传文件的路径</p><p><em><strong>网上拷贝</strong></em></p><hr><p>1、上传本地文件到服务器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -P 221 /path/filename username@servername:/path/</span><br></pre></td></tr></table></figure><p>例如 scp /var/www/test.php root@192.168.0.101:/var/www/ 把本机/var/www/目录下的 test.php 文件上传到 192.168.0.101 这台服务器上的/var/www/目录中</p><p>2、从服务器下载文件</p><p>下载文件我们经常使用 wget，但是如果没有 http 服务，如何从服务器上下载文件呢？</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -P 221 username@servername:/path/filename /var/www/local_dir（本地目录）</span><br></pre></td></tr></table></figure><p>例如 scp root@192.168.0.101:/var/www/test.txt 把 192.168.0.101 上的/var/www/test.txt 的文件下载到/var/www/local_dir（本地目录）</p><p>3、从服务器下载整个目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -P 221 -r username@servername:/var/www/remote_dir/（远程目录） /var/www/local_dir（本地目录）</span><br></pre></td></tr></table></figure><p>例如:scp -r root@192.168.0.101:/var/www/test /var/www/</p><p>4、上传目录到服务器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -P 221 -r local_dir username@servername:remote_dir</span><br></pre></td></tr></table></figure><p>例如：scp -r test root@192.168.0.101:/var/www/ 把当前目录下的 test 目录上传到服务器的/var/www/ 目录</p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> general </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> general </tag>
            
            <tag> linux </tag>
            
            <tag> 用windowd的cmd向linux服务器上传文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>端口管理</title>
      <link href="/posts/31179.html"/>
      <url>/posts/31179.html</url>
      
        <content type="html"><![CDATA[<h2 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=5672/tcp --permanent   # 开放5672端口</span><br><span class="line">firewall-cmd --zone=public --remove-port=5672/tcp --permanent  #关闭5672端口</span><br><span class="line">firewall-cmd --reload   # 配置立即生效</span><br></pre></td></tr></table></figure><h2 id="查看防火墙所有开放的端口"><a href="#查看防火墙所有开放的端口" class="headerlink" title="查看防火墙所有开放的端口"></a>查看防火墙所有开放的端口</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure><h2 id="开放端口，复杂规则"><a href="#开放端口，复杂规则" class="headerlink" title="开放端口，复杂规则"></a>开放端口，复杂规则</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只允许10.13.49.108的ip通过tcp协议访问18080端口</span></span><br><span class="line">firewall-cmd --permanent --zone=public --add-rich-rule=<span class="string">&quot;rule family=&quot;</span>ipv4<span class="string">&quot; source address=&quot;</span>10.13.49.108<span class="string">&quot; port protocol=&quot;</span>tcp<span class="string">&quot; port=&quot;</span>18080<span class="string">&quot; accept&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只允许172.16.1.0网段的ip通过tcp协议访问18080端口</span></span><br><span class="line">firewall-cmd --permanent --zone=public --add-rich-rule=<span class="string">&quot;rule family=&quot;</span>ipv4<span class="string">&quot; source address=&quot;</span>172.16.1.0/24<span class="string">&quot; port protocol=&quot;</span>tcp<span class="string">&quot; port=&quot;</span>18080<span class="string">&quot; accept&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只允许172.16.0.0网段的ip通过tcp协议访问18080端口</span></span><br><span class="line">firewall-cmd --permanent --zone=public --add-rich-rule=<span class="string">&quot;rule family=&quot;</span>ipv4<span class="string">&quot; source address=&quot;</span>172.16.0.0/16<span class="string">&quot; port protocol=&quot;</span>tcp<span class="string">&quot; port=&quot;</span>18080<span class="string">&quot; accept&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除上面配置的复杂规则</span></span><br><span class="line">firewall-cmd --permanent --zone=public --remove-rich-rule=<span class="string">&quot;rule family=&quot;</span>ipv4<span class="string">&quot; source address=&quot;</span>192.168.1.0/24<span class="string">&quot; port protocol=&quot;</span>tcp<span class="string">&quot; port=&quot;</span>18080<span class="string">&quot; accept&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有</span></span><br><span class="line">firewall-cmd --list-all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置立即生效</span></span><br><span class="line">firewall-cmd --reload   </span><br></pre></td></tr></table></figure><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><p>如果要开放的端口太多，嫌麻烦，可以关闭防火墙，安全性自行评估</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><h2 id="查看防火墙状态"><a href="#查看防火墙状态" class="headerlink" title="查看防火墙状态"></a>查看防火墙状态</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure><h2 id="查看和监听端口"><a href="#查看和监听端口" class="headerlink" title="查看和监听端口"></a>查看和监听端口</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -lnpt</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/08/YQxDGBVPKJLfsgj.png" alt="20210708231956.png"></p><h2 id="检查端口被哪个进程占用"><a href="#检查端口被哪个进程占用" class="headerlink" title="检查端口被哪个进程占用"></a>检查端口被哪个进程占用</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -lnpt |grep 5672</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/08/QGSKjb5mAMUeVTy.png" alt="20210708232118.png"></p><p><a href="https://www.cnblogs.com/heqiuyong/p/10460150.htm">原文</a></p>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> general </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> general </tag>
            
            <tag> linux </tag>
            
            <tag> 端口管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看网址</title>
      <link href="/posts/16547.html"/>
      <url>/posts/16547.html</url>
      
        <content type="html"><![CDATA[<p>示例</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl 127.0.0.1:80 #查看本地的nginx是否启动</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> general </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> general </tag>
            
            <tag> linux </tag>
            
            <tag> 查看网址 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程管理</title>
      <link href="/posts/11053.html"/>
      <url>/posts/11053.html</url>
      
        <content type="html"><![CDATA[<h2 id="查看进程的详细信息"><a href="#查看进程的详细信息" class="headerlink" title="查看进程的详细信息"></a>查看进程的详细信息</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps 6832</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/08/FcyXDSVUpwW3iRb.png" alt="20210708232827.png"></p><h2 id="中止进程"><a href="#中止进程" class="headerlink" title="中止进程"></a>中止进程</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill -9 6832</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> general </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> general </tag>
            
            <tag> linux </tag>
            
            <tag> 进程管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>磁盘管理</title>
      <link href="/posts/55826.html"/>
      <url>/posts/55826.html</url>
      
        <content type="html"><![CDATA[<h2 id="查看某个文件夹所属的磁盘容量"><a href="#查看某个文件夹所属的磁盘容量" class="headerlink" title="查看某个文件夹所属的磁盘容量"></a>查看某个文件夹所属的磁盘容量</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">df -h 文件路径</span><br></pre></td></tr></table></figure><p>查看磁盘列表</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">df -hl</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ops </category>
          
          <category> linux </category>
          
          <category> general </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ops </tag>
            
            <tag> general </tag>
            
            <tag> linux </tag>
            
            <tag> 磁盘管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>show profile功能</title>
      <link href="/posts/51045.html"/>
      <url>/posts/51045.html</url>
      
        <content type="html"><![CDATA[<ul><li>开启 Show Profile 功能，默认该功能是关闭的，使用前需开启。<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;profiling&#x27;</span>;</span><br><span class="line">  <span class="keyword">set</span> profiling <span class="operator">=</span> <span class="keyword">on</span>;</span><br><span class="line">  ## 执行一部分<span class="keyword">sql</span>后(默认保留<span class="number">15</span>条)</span><br><span class="line">  <span class="keyword">show</span> profiles;</span><br><span class="line">  ## duration是持续时间</span><br><span class="line">  ## 针对特定的<span class="keyword">sql</span>进行诊断</span><br><span class="line">  <span class="keyword">show</span> profile cpu,block io <span class="keyword">for</span> query Query_ID;<span class="comment">/*Query_ID为#3步骤中show profiles列表中的Query_ID*/</span></span><br></pre></td></tr></table></figure></li><li><p>show profile 的常用查询参数。</p><p>①ALL：显示所有的开销信息。</p><p>②BLOCK IO：显示块 IO 开销。</p><p>③CONTEXT SWITCHES：上下文切换开销。</p><p>④CPU：显示 CPU 开销信息。</p><p>⑤IPC：显示发送和接收开销信息。</p><p>⑥MEMORY：显示内存开销信息。</p><p>⑦PAGE FAULTS：显示页面错误开销信息。</p><p>⑧SOURCE：显示和 Source_function，Source_file，Source_line 相关的开销信息。</p><p>⑨SWAPS：显示交换次数开销信息。</p></li><li><p>日常开发需注意的结论。（出现下述结论都需要优化)</p><p>①converting HEAP to MyISAM：查询结果太大，内存不够，数据往磁盘上搬了。</p><p>②Creating tmp table：创建临时表。先拷贝数据到临时表，用完后再删除临时表。</p><p>③Copying to tmp table on disk：把内存中临时表复制到磁盘上，危险！！！</p><p>④locked。</p></li><li><p>总结</p><p>1.show profile 默认是关闭的，并且开启后只存活于当前会话，也就说每次使用前都需要开启。</p><p>2.通过 show profiles 查看 sql 语句的耗时时间，然后通过 show profile 命令对耗时时间长的 sql 语句进行诊断。</p><p>3.注意 show profile 诊断结果中出现相关字段的含义，判断是否需要优化 sql 语句。</p><p>4.可更多的关注 MySQL 官方文档，获取更多的知识。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> show profile功能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>union和union all 关键字</title>
      <link href="/posts/32462.html"/>
      <url>/posts/32462.html</url>
      
        <content type="html"><![CDATA[<ul><li>区别 1：取结果的交集<ul><li>union: 对两个结果集进行并集操作, 不包括重复行,相当于 distinct, 同时进行默认规则的排序;</li><li>union all: 对两个结果集进行并集操作, 包括重复行, 即所有的结果全部显示, 不管是不是重复;</li></ul></li><li><p>区别 2：获取结果后的操作</p><ul><li>union: 会对获取的结果进行排序操作</li><li>union all: 不会对获取的结果进行排序操作</li></ul></li><li><p>区别 3：</p><ul><li>union 看到结果中 ID=3 的只有一条<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student2 <span class="keyword">where</span> id <span class="operator">&lt;</span> <span class="number">4</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student2 <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">2</span> <span class="keyword">and</span> id <span class="operator">&lt;</span> <span class="number">6</span></span><br></pre></td></tr></table></figure></li><li><p>union all 结果中 ID=3 的结果有两个</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student2 <span class="keyword">where</span> id <span class="operator">&lt;</span> <span class="number">4</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student2 <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">2</span> <span class="keyword">and</span> id <span class="operator">&lt;</span> <span class="number">6</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>总结</p><p>union all 只是合并查询结果，并不会进行去重和排序操作，在没有去重的前提下，使用 union all 的执行效率要比 union 高</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
            <tag> mysql </tag>
            
            <tag> union和union all 关键字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello world</title>
      <link href="/posts/14785.html"/>
      <url>/posts/14785.html</url>
      
        <content type="html"><![CDATA[<p>值此博客建站成功之际，难以抑制内心的激动心情<br>只好写一行 hello world 了 😄😄😄</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>写完了 hello world，然后就是测试主题 butterfly 的各种功能</p><h1 id="测试-toc-功能"><a href="#测试-toc-功能" class="headerlink" title="测试 toc 功能"></a>测试 toc 功能</h1><h2 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h2><p>111</p><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>222</p><h2 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h2><p>333</p><hr><p>还要整合的模块</p><ul><li>[x] 评论系统</li><li>[x] 搜索系统</li><li>[ ] 网站验证</li><li>[ ] 广告</li></ul><hr><p>公式测试(mathjax)</p><script type="math/tex; mode=display">e^{i\theta}=\cos\theta+i\sin\theta</script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
